<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1,000,000 samples, 0.02%)</title><rect x="1161.5" y="261" width="0.3" height="15.0" fill="rgb(231,83,48)" rx="2" ry="2" />
<text  x="1164.53" y="271.5" ></text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (500,000 samples, 0.01%)</title><rect x="193.1" y="69" width="0.2" height="15.0" fill="rgb(233,58,29)" rx="2" ry="2" />
<text  x="196.15" y="79.5" ></text>
</g>
<g >
<title>std::equal_to&lt;long&gt;::operator (481,000,000 samples, 10.38%)</title><rect x="951.7" y="181" width="122.5" height="15.0" fill="rgb(211,170,20)" rx="2" ry="2" />
<text  x="954.71" y="191.5" >std::equal_to&lt;l..</text>
</g>
<g >
<title>std::function&lt;void  (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="325" width="1102.6" height="15.0" fill="rgb(206,148,13)" rx="2" ry="2" />
<text  x="50.70" y="335.5" >std::function&lt;void </text>
</g>
<g >
<title>std::operator&amp; (500,000 samples, 0.01%)</title><rect x="57.1" y="197" width="0.2" height="15.0" fill="rgb(248,205,24)" rx="2" ry="2" />
<text  x="60.12" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (2,250,000 samples, 0.05%)</title><rect x="1154.8" y="197" width="0.6" height="15.0" fill="rgb(248,201,40)" rx="2" ry="2" />
<text  x="1157.78" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (500,000 samples, 0.01%)</title><rect x="66.4" y="213" width="0.1" height="15.0" fill="rgb(218,85,16)" rx="2" ry="2" />
<text  x="69.36" y="223.5" ></text>
</g>
<g >
<title>testing::Test::Run (143,750,000 samples, 3.10%)</title><rect x="1153.1" y="373" width="36.6" height="15.0" fill="rgb(225,212,39)" rx="2" ry="2" />
<text  x="1156.07" y="383.5" >tes..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::End (500,000 samples, 0.01%)</title><rect x="71.3" y="165" width="0.1" height="15.0" fill="rgb(239,172,19)" rx="2" ry="2" />
<text  x="74.26" y="175.5" ></text>
</g>
<g >
<title>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (143,750,000 samples, 3.10%)</title><rect x="1153.1" y="357" width="36.6" height="15.0" fill="rgb(232,127,39)" rx="2" ry="2" />
<text  x="1156.07" y="367.5" >voi..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (500,000 samples, 0.01%)</title><rect x="1161.9" y="277" width="0.1" height="15.0" fill="rgb(237,66,34)" rx="2" ry="2" />
<text  x="1164.92" y="287.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::load (500,000 samples, 0.01%)</title><rect x="132.0" y="181" width="0.1" height="15.0" fill="rgb(218,227,42)" rx="2" ry="2" />
<text  x="135.01" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateLeafNode (3,609,000,000 samples, 77.91%)</title><rect x="206.1" y="213" width="919.3" height="15.0" fill="rgb(215,141,12)" rx="2" ry="2" />
<text  x="209.14" y="223.5" >bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std:..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::FreeEpochDeltaChain (16,250,000 samples, 0.35%)</title><rect x="1157.1" y="261" width="4.1" height="15.0" fill="rgb(238,220,17)" rx="2" ry="2" />
<text  x="1160.08" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (3,000,000 samples, 0.06%)</title><rect x="1161.3" y="293" width="0.8" height="15.0" fill="rgb(216,112,37)" rx="2" ry="2" />
<text  x="1164.34" y="303.5" ></text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (14,500,000 samples, 0.31%)</title><rect x="188.7" y="117" width="3.7" height="15.0" fill="rgb(207,162,33)" rx="2" ry="2" />
<text  x="191.69" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (500,000 samples, 0.01%)</title><rect x="818.0" y="165" width="0.1" height="15.0" fill="rgb(219,136,9)" rx="2" ry="2" />
<text  x="820.98" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InstallNodeToReplace (2,000,000 samples, 0.04%)</title><rect x="193.5" y="149" width="0.5" height="15.0" fill="rgb(205,7,36)" rx="2" ry="2" />
<text  x="196.46" y="159.5" ></text>
</g>
<g >
<title>[unknown] (500,000 samples, 0.01%)</title><rect x="1150.3" y="485" width="0.1" height="15.0" fill="rgb(212,15,50)" rx="2" ry="2" />
<text  x="1153.26" y="495.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;::unordered_set&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt; &gt; (10,250,000 samples, 0.22%)</title><rect x="1154.5" y="293" width="2.6" height="15.0" fill="rgb(236,49,47)" rx="2" ry="2" />
<text  x="1157.47" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (1,500,000 samples, 0.03%)</title><rect x="205.1" y="197" width="0.4" height="15.0" fill="rgb(216,21,15)" rx="2" ry="2" />
<text  x="208.12" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long, long, std::__detail::_Identity, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,000,000 samples, 0.02%)</title><rect x="1156.0" y="165" width="0.2" height="15.0" fill="rgb(216,170,28)" rx="2" ry="2" />
<text  x="1158.99" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LocateSeparatorByKey (22,500,000 samples, 0.49%)</title><rect x="198.2" y="197" width="5.8" height="15.0" fill="rgb(241,205,53)" rx="2" ry="2" />
<text  x="201.24" y="207.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (3,500,000 samples, 0.08%)</title><rect x="192.4" y="117" width="0.9" height="15.0" fill="rgb(232,46,13)" rx="2" ry="2" />
<text  x="195.38" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_bucket_begin (1,250,000 samples, 0.03%)</title><rect x="1155.5" y="197" width="0.4" height="15.0" fill="rgb(218,3,39)" rx="2" ry="2" />
<text  x="1158.55" y="207.5" ></text>
</g>
<g >
<title>std::atomic&lt;char*&gt;::fetch_sub (1,750,000 samples, 0.04%)</title><rect x="52.9" y="181" width="0.5" height="15.0" fill="rgb(248,62,46)" rx="2" ry="2" />
<text  x="55.92" y="191.5" ></text>
</g>
<g >
<title>____wcstold_l_internal (2,500,000 samples, 0.05%)</title><rect x="1150.5" y="501" width="0.6" height="15.0" fill="rgb(249,93,9)" rx="2" ry="2" />
<text  x="1153.45" y="511.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::compare_exchange_strong (5,750,000 samples, 0.12%)</title><rect x="56.0" y="213" width="1.5" height="15.0" fill="rgb(231,216,47)" rx="2" ry="2" />
<text  x="59.04" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (9,750,000 samples, 0.21%)</title><rect x="1154.6" y="245" width="2.5" height="15.0" fill="rgb(236,51,6)" rx="2" ry="2" />
<text  x="1157.59" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (500,000 samples, 0.01%)</title><rect x="1162.9" y="309" width="0.2" height="15.0" fill="rgb(252,115,7)" rx="2" ry="2" />
<text  x="1165.94" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (148,000,000 samples, 3.19%)</title><rect x="10.0" y="453" width="37.7" height="15.0" fill="rgb(241,208,44)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >std..</text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; __gnu_cxx::__ops::__val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (1,500,000 samples, 0.03%)</title><rect x="199.1" y="165" width="0.4" height="15.0" fill="rgb(226,153,20)" rx="2" ry="2" />
<text  x="202.13" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (3,000,000 samples, 0.06%)</title><rect x="189.3" y="85" width="0.7" height="15.0" fill="rgb(238,129,54)" rx="2" ry="2" />
<text  x="192.26" y="95.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, common::WorkerPool::AddThread (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="437" width="1102.6" height="15.0" fill="rgb(238,159,18)" rx="2" ry="2" />
<text  x="50.70" y="447.5" >void std::__invoke_impl&lt;void, common::WorkerPool::AddThread</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (201,000,000 samples, 4.34%)</title><rect x="137.0" y="117" width="51.2" height="15.0" fill="rgb(205,91,17)" rx="2" ry="2" />
<text  x="140.04" y="127.5" >bwtre..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::TryAllocate (11,250,000 samples, 0.24%)</title><rect x="52.5" y="197" width="2.8" height="15.0" fill="rgb(205,34,3)" rx="2" ry="2" />
<text  x="55.47" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TryConsolidateNode (245,500,000 samples, 5.30%)</title><rect x="132.1" y="197" width="62.6" height="15.0" fill="rgb(226,107,4)" rx="2" ry="2" />
<text  x="135.14" y="207.5" >bwtree..</text>
</g>
<g >
<title>std::atomic&lt;char*&gt;::load (7,750,000 samples, 0.17%)</title><rect x="53.4" y="181" width="1.9" height="15.0" fill="rgb(210,92,46)" rx="2" ry="2" />
<text  x="56.37" y="191.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="485" width="1102.6" height="15.0" fill="rgb(209,34,4)" rx="2" ry="2" />
<text  x="50.70" y="495.5" >std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread</text>
</g>
<g >
<title>std::pair&lt;long, long&gt;::pair&lt;long, long, true&gt; (500,000 samples, 0.01%)</title><rect x="58.9" y="197" width="0.1" height="15.0" fill="rgb(208,71,17)" rx="2" ry="2" />
<text  x="61.91" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (500,000 samples, 0.01%)</title><rect x="130.0" y="197" width="0.2" height="15.0" fill="rgb(210,12,53)" rx="2" ry="2" />
<text  x="133.04" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Insert (4,325,250,000 samples, 93.37%)</title><rect x="48.4" y="245" width="1101.7" height="15.0" fill="rgb(254,176,33)" rx="2" ry="2" />
<text  x="51.40" y="255.5" >bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash..</text>
</g>
<g >
<title>std::operator&amp; (500,000 samples, 0.01%)</title><rect x="193.3" y="117" width="0.1" height="15.0" fill="rgb(208,76,26)" rx="2" ry="2" />
<text  x="196.27" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (1,500,000 samples, 0.03%)</title><rect x="205.1" y="181" width="0.4" height="15.0" fill="rgb(252,107,43)" rx="2" ry="2" />
<text  x="208.12" y="191.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (4,476,500,000 samples, 96.63%)</title><rect x="10.0" y="517" width="1140.3" height="15.0" fill="rgb(235,104,54)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >[libstdc++.so.6.0.30]</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Begin (17,000,000 samples, 0.37%)</title><rect x="85.0" y="149" width="4.3" height="15.0" fill="rgb(251,118,43)" rx="2" ry="2" />
<text  x="87.95" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::~ElasticNode (14,750,000 samples, 0.32%)</title><rect x="1157.5" y="229" width="3.7" height="15.0" fill="rgb(225,177,22)" rx="2" ry="2" />
<text  x="1160.46" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::ThreadFunc (148,000,000 samples, 3.19%)</title><rect x="10.0" y="405" width="37.7" height="15.0" fill="rgb(210,0,34)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >bwt..</text>
</g>
<g >
<title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash (1,500,000 samples, 0.03%)</title><rect x="1155.9" y="197" width="0.3" height="15.0" fill="rgb(254,92,18)" rx="2" ry="2" />
<text  x="1158.87" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (750,000 samples, 0.02%)</title><rect x="1155.7" y="149" width="0.2" height="15.0" fill="rgb(211,13,36)" rx="2" ry="2" />
<text  x="1158.68" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (5,500,000 samples, 0.12%)</title><rect x="128.1" y="181" width="1.4" height="15.0" fill="rgb(218,37,49)" rx="2" ry="2" />
<text  x="131.13" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (9,750,000 samples, 0.21%)</title><rect x="1158.7" y="213" width="2.5" height="15.0" fill="rgb(207,173,50)" rx="2" ry="2" />
<text  x="1161.73" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (1,250,000 samples, 0.03%)</title><rect x="129.5" y="181" width="0.3" height="15.0" fill="rgb(252,25,0)" rx="2" ry="2" />
<text  x="132.53" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeMetaData::NodeMetaData (1,750,000 samples, 0.04%)</title><rect x="58.3" y="165" width="0.5" height="15.0" fill="rgb(244,155,46)" rx="2" ry="2" />
<text  x="61.33" y="175.5" ></text>
</g>
<g >
<title>std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;::operator (750,000 samples, 0.02%)</title><rect x="1187.3" y="213" width="0.2" height="15.0" fill="rgb(240,120,25)" rx="2" ry="2" />
<text  x="1190.33" y="223.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::BloomFilter (500,000 samples, 0.01%)</title><rect x="133.5" y="133" width="0.1" height="15.0" fill="rgb(216,16,39)" rx="2" ry="2" />
<text  x="136.48" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_check_len (750,000 samples, 0.02%)</title><rect x="1154.1" y="229" width="0.2" height="15.0" fill="rgb(207,223,44)" rx="2" ry="2" />
<text  x="1157.15" y="239.5" ></text>
</g>
<g >
<title>common::WorkerPool::AddThread (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="421" width="1102.6" height="15.0" fill="rgb(235,172,19)" rx="2" ry="2" />
<text  x="50.70" y="431.5" >common::WorkerPool::AddThread</text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (110,000,000 samples, 2.37%)</title><rect x="1097.4" y="197" width="28.0" height="15.0" fill="rgb(234,42,15)" rx="2" ry="2" />
<text  x="1100.41" y="207.5" >t..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::~LeafNode (16,000,000 samples, 0.35%)</title><rect x="1157.1" y="245" width="4.1" height="15.0" fill="rgb(229,104,39)" rx="2" ry="2" />
<text  x="1160.14" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::InlineAllocate (18,750,000 samples, 0.40%)</title><rect x="50.8" y="229" width="4.8" height="15.0" fill="rgb(254,198,50)" rx="2" ry="2" />
<text  x="53.82" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (1,127,500,000 samples, 24.34%)</title><rect x="354.8" y="197" width="287.2" height="15.0" fill="rgb(254,179,5)" rx="2" ry="2" />
<text  x="357.83" y="207.5" >bwtree::BwTree&lt;long, long, test::BwTre..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (1,500,000 samples, 0.03%)</title><rect x="197.8" y="181" width="0.4" height="15.0" fill="rgb(248,102,17)" rx="2" ry="2" />
<text  x="200.79" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;long, false&gt;* std::__to_address&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; (500,000 samples, 0.01%)</title><rect x="1156.4" y="181" width="0.2" height="15.0" fill="rgb(244,54,7)" rx="2" ry="2" />
<text  x="1159.44" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreaterEqual (1,000,000 samples, 0.02%)</title><rect x="818.0" y="181" width="0.2" height="15.0" fill="rgb(254,225,4)" rx="2" ry="2" />
<text  x="820.98" y="191.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (148,000,000 samples, 3.19%)</title><rect x="10.0" y="501" width="37.7" height="15.0" fill="rgb(232,113,29)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >std..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (750,000 samples, 0.02%)</title><rect x="197.5" y="197" width="0.2" height="15.0" fill="rgb(220,121,0)" rx="2" ry="2" />
<text  x="200.48" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_deallocate_nodes (1,000,000 samples, 0.02%)</title><rect x="1162.3" y="261" width="0.3" height="15.0" fill="rgb(210,99,1)" rx="2" ry="2" />
<text  x="1165.30" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Destroy (2,000,000 samples, 0.04%)</title><rect x="11.0" y="341" width="0.5" height="15.0" fill="rgb(214,197,9)" rx="2" ry="2" />
<text  x="13.96" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::clear (1,250,000 samples, 0.03%)</title><rect x="1162.2" y="277" width="0.4" height="15.0" fill="rgb(212,218,7)" rx="2" ry="2" />
<text  x="1165.24" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::__upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; &gt; (13,000,000 samples, 0.28%)</title><rect x="199.6" y="165" width="3.4" height="15.0" fill="rgb(247,183,13)" rx="2" ry="2" />
<text  x="202.64" y="175.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (398,250,000 samples, 8.60%)</title><rect x="715.7" y="181" width="101.5" height="15.0" fill="rgb(218,36,38)" rx="2" ry="2" />
<text  x="718.71" y="191.5" >test::BwTree..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::GetNodeHeader (750,000 samples, 0.02%)</title><rect x="197.3" y="197" width="0.2" height="15.0" fill="rgb(205,70,52)" rx="2" ry="2" />
<text  x="200.28" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (2,250,000 samples, 0.05%)</title><rect x="191.2" y="53" width="0.6" height="15.0" fill="rgb(238,29,31)" rx="2" ry="2" />
<text  x="194.23" y="63.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (26,750,000 samples, 0.58%)</title><rect x="59.5" y="213" width="6.9" height="15.0" fill="rgb(242,3,30)" rx="2" ry="2" />
<text  x="62.54" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (3,250,000 samples, 0.07%)</title><rect x="192.4" y="101" width="0.9" height="15.0" fill="rgb(250,197,52)" rx="2" ry="2" />
<text  x="195.44" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc::operator (500,000 samples, 0.01%)</title><rect x="135.8" y="85" width="0.2" height="15.0" fill="rgb(215,217,33)" rx="2" ry="2" />
<text  x="138.83" y="95.5" ></text>
</g>
<g >
<title>[unknown] (750,000 samples, 0.02%)</title><rect x="1150.3" y="501" width="0.2" height="15.0" fill="rgb(214,198,26)" rx="2" ry="2" />
<text  x="1153.26" y="511.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator::operator (1,000,000 samples, 0.02%)</title><rect x="192.8" y="69" width="0.2" height="15.0" fill="rgb(206,199,9)" rx="2" ry="2" />
<text  x="195.76" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a2&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (500,000 samples, 0.01%)</title><rect x="189.6" y="69" width="0.2" height="15.0" fill="rgb(206,197,8)" rx="2" ry="2" />
<text  x="192.64" y="79.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (3,750,000 samples, 0.08%)</title><rect x="1155.4" y="213" width="0.9" height="15.0" fill="rgb(215,119,14)" rx="2" ry="2" />
<text  x="1158.36" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::FindSplitPoint (206,000,000 samples, 4.45%)</title><rect x="74.6" y="165" width="52.5" height="15.0" fill="rgb(237,30,28)" rx="2" ry="2" />
<text  x="77.64" y="175.5" >bwtre..</text>
</g>
<g >
<title>std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::operator[] (3,250,000 samples, 0.07%)</title><rect x="1161.3" y="309" width="0.8" height="15.0" fill="rgb(248,26,27)" rx="2" ry="2" />
<text  x="1164.28" y="319.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (10,000,000 samples, 0.22%)</title><rect x="1092.4" y="165" width="2.6" height="15.0" fill="rgb(253,164,32)" rx="2" ry="2" />
<text  x="1095.44" y="175.5" ></text>
</g>
<g >
<title>BwtreeTest_ConcurrentSkewedInsert_10_Test::TestBody (4,328,250,000 samples, 93.43%)</title><rect x="47.7" y="261" width="1102.5" height="15.0" fill="rgb(219,22,15)" rx="2" ry="2" />
<text  x="50.70" y="271.5" >BwtreeTest_ConcurrentSkewedInsert_10_Test::TestBody</text>
</g>
<g >
<title>long const&amp; std::forward&lt;long const&amp;&gt; (500,000 samples, 0.01%)</title><rect x="1074.2" y="197" width="0.2" height="15.0" fill="rgb(220,132,25)" rx="2" ry="2" />
<text  x="1077.23" y="207.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="501" width="1102.6" height="15.0" fill="rgb(226,56,29)" rx="2" ry="2" />
<text  x="50.70" y="511.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread</text>
</g>
<g >
<title>operator new (13,250,000 samples, 0.29%)</title><rect x="183.9" y="85" width="3.4" height="15.0" fill="rgb(206,127,5)" rx="2" ry="2" />
<text  x="186.91" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (2,000,000 samples, 0.04%)</title><rect x="1125.5" y="213" width="0.5" height="15.0" fill="rgb(253,41,44)" rx="2" ry="2" />
<text  x="1128.49" y="223.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="309" width="1102.6" height="15.0" fill="rgb(213,115,49)" rx="2" ry="2" />
<text  x="50.70" y="319.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>std::pair&lt;long, long&gt;::pair&lt;long, true&gt; (1,250,000 samples, 0.03%)</title><rect x="1097.1" y="181" width="0.3" height="15.0" fill="rgb(252,134,13)" rx="2" ry="2" />
<text  x="1100.09" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (6,500,000 samples, 0.14%)</title><rect x="1163.4" y="293" width="1.6" height="15.0" fill="rgb(238,42,35)" rx="2" ry="2" />
<text  x="1166.38" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;long, long, std::__detail::_Identity, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,000,000 samples, 0.02%)</title><rect x="1155.6" y="165" width="0.3" height="15.0" fill="rgb(233,69,43)" rx="2" ry="2" />
<text  x="1158.61" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a1&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (1,500,000 samples, 0.03%)</title><rect x="189.3" y="69" width="0.3" height="15.0" fill="rgb(226,24,12)" rx="2" ry="2" />
<text  x="192.26" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::GrowChunk (4,000,000 samples, 0.09%)</title><rect x="51.5" y="197" width="1.0" height="15.0" fill="rgb(244,14,50)" rx="2" ry="2" />
<text  x="54.46" y="207.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::Insert (3,750,000 samples, 0.08%)</title><rect x="136.0" y="117" width="0.9" height="15.0" fill="rgb(217,176,50)" rx="2" ry="2" />
<text  x="138.96" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsDeltaNode (1,750,000 samples, 0.04%)</title><rect x="70.8" y="181" width="0.4" height="15.0" fill="rgb(230,74,53)" rx="2" ry="2" />
<text  x="73.75" y="191.5" ></text>
</g>
<g >
<title>testing::TestInfo::Run (143,750,000 samples, 3.10%)</title><rect x="1153.1" y="389" width="36.6" height="15.0" fill="rgb(250,78,17)" rx="2" ry="2" />
<text  x="1156.07" y="399.5" >tes..</text>
</g>
<g >
<title>std::_Function_handler&lt;void  (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="389" width="1102.6" height="15.0" fill="rgb(223,167,9)" rx="2" ry="2" />
<text  x="50.70" y="399.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (230,500,000 samples, 4.98%)</title><rect x="134.6" y="133" width="58.7" height="15.0" fill="rgb(243,140,49)" rx="2" ry="2" />
<text  x="137.56" y="143.5" >void b..</text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (1,250,000 samples, 0.03%)</title><rect x="134.1" y="133" width="0.3" height="15.0" fill="rgb(228,4,13)" rx="2" ry="2" />
<text  x="137.11" y="143.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, BwtreeTest_ConcurrentSkewedInsert_10_Test::TestBody (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="293" width="1102.6" height="15.0" fill="rgb(249,93,3)" rx="2" ry="2" />
<text  x="50.70" y="303.5" >std::enable_if&lt;is_invocable_r_v&lt;void, BwtreeTest_ConcurrentSkewedInsert_10_Test::TestBody</text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::Exists (2,250,000 samples, 0.05%)</title><rect x="135.4" y="117" width="0.6" height="15.0" fill="rgb(248,114,42)" rx="2" ry="2" />
<text  x="138.39" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::GetIndexPair (500,000 samples, 0.01%)</title><rect x="191.4" y="37" width="0.1" height="15.0" fill="rgb(244,130,47)" rx="2" ry="2" />
<text  x="194.36" y="47.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreaterEqual (2,000,000 samples, 0.04%)</title><rect x="197.7" y="197" width="0.5" height="15.0" fill="rgb(234,187,29)" rx="2" ry="2" />
<text  x="200.67" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (1,000,000 samples, 0.02%)</title><rect x="818.2" y="197" width="0.3" height="15.0" fill="rgb(216,106,1)" rx="2" ry="2" />
<text  x="821.23" y="207.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::compare_exchange_strong (1,500,000 samples, 0.03%)</title><rect x="193.6" y="133" width="0.4" height="15.0" fill="rgb(223,179,33)" rx="2" ry="2" />
<text  x="196.59" y="143.5" ></text>
</g>
<g >
<title>unsigned long&amp;&amp; std::forward&lt;unsigned long&gt; (1,000,000 samples, 0.02%)</title><rect x="203.7" y="149" width="0.3" height="15.0" fill="rgb(249,58,48)" rx="2" ry="2" />
<text  x="206.72" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (750,000 samples, 0.02%)</title><rect x="1125.8" y="181" width="0.2" height="15.0" fill="rgb(224,92,26)" rx="2" ry="2" />
<text  x="1128.81" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (500,000 samples, 0.01%)</title><rect x="205.4" y="165" width="0.1" height="15.0" fill="rgb(241,91,36)" rx="2" ry="2" />
<text  x="208.37" y="175.5" ></text>
</g>
<g >
<title>main (143,750,000 samples, 3.10%)</title><rect x="1153.1" y="501" width="36.6" height="15.0" fill="rgb(244,184,14)" rx="2" ry="2" />
<text  x="1156.07" y="511.5" >main</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::DeltaNode::DeltaNode (2,500,000 samples, 0.05%)</title><rect x="58.1" y="197" width="0.7" height="15.0" fill="rgb(242,217,51)" rx="2" ry="2" />
<text  x="61.14" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (750,000 samples, 0.02%)</title><rect x="194.1" y="165" width="0.2" height="15.0" fill="rgb(238,93,6)" rx="2" ry="2" />
<text  x="197.10" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (55,000,000 samples, 1.19%)</title><rect x="89.3" y="149" width="14.0" height="15.0" fill="rgb(243,8,6)" rx="2" ry="2" />
<text  x="92.28" y="159.5" ></text>
</g>
<g >
<title>std::equal_to&lt;long&gt;::operator (61,750,000 samples, 1.33%)</title><rect x="1074.4" y="197" width="15.7" height="15.0" fill="rgb(213,51,49)" rx="2" ry="2" />
<text  x="1077.36" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward&lt;false, true, std::random_access_iterator_tag&gt;::__copy_move_b&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*&gt; (500,000 samples, 0.01%)</title><rect x="189.5" y="37" width="0.1" height="15.0" fill="rgb(254,56,39)" rx="2" ry="2" />
<text  x="192.52" y="47.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (44,250,000 samples, 0.96%)</title><rect x="113.4" y="133" width="11.2" height="15.0" fill="rgb(254,197,7)" rx="2" ry="2" />
<text  x="116.35" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::~BwTree (16,500,000 samples, 0.36%)</title><rect x="1157.1" y="309" width="4.2" height="15.0" fill="rgb(222,66,21)" rx="2" ry="2" />
<text  x="1160.08" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;common::WorkerPool::AddThread (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="453" width="1102.6" height="15.0" fill="rgb(250,181,29)" rx="2" ry="2" />
<text  x="50.70" y="463.5" >std::__invoke_result&lt;common::WorkerPool::AddThread</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_deallocate_node_ptr (750,000 samples, 0.02%)</title><rect x="1162.3" y="229" width="0.2" height="15.0" fill="rgb(235,186,50)" rx="2" ry="2" />
<text  x="1165.30" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (500,000 samples, 0.01%)</title><rect x="1153.8" y="261" width="0.2" height="15.0" fill="rgb(242,165,46)" rx="2" ry="2" />
<text  x="1156.83" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_deallocate_node (750,000 samples, 0.02%)</title><rect x="1162.3" y="245" width="0.2" height="15.0" fill="rgb(243,113,52)" rx="2" ry="2" />
<text  x="1165.30" y="255.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta*&gt;::load (1,750,000 samples, 0.04%)</title><rect x="11.0" y="309" width="0.5" height="15.0" fill="rgb(236,126,37)" rx="2" ry="2" />
<text  x="14.02" y="319.5" ></text>
</g>
<g >
<title>double std::generate_canonical&lt;double, 53ul, std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt; &gt; (1,250,000 samples, 0.03%)</title><rect x="1187.2" y="229" width="0.3" height="15.0" fill="rgb(208,44,5)" rx="2" ry="2" />
<text  x="1190.20" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, long const&amp;&gt; (750,000 samples, 0.02%)</title><rect x="58.8" y="213" width="0.2" height="15.0" fill="rgb(223,224,45)" rx="2" ry="2" />
<text  x="61.84" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateSiblingChain (4,250,000 samples, 0.09%)</title><rect x="817.2" y="197" width="1.0" height="15.0" fill="rgb(232,151,11)" rx="2" ry="2" />
<text  x="820.15" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::push_back (1,500,000 samples, 0.03%)</title><rect x="1154.0" y="261" width="0.4" height="15.0" fill="rgb(208,139,24)" rx="2" ry="2" />
<text  x="1157.02" y="271.5" ></text>
</g>
<g >
<title>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (143,750,000 samples, 3.10%)</title><rect x="1153.1" y="453" width="36.6" height="15.0" fill="rgb(212,228,0)" rx="2" ry="2" />
<text  x="1156.07" y="463.5" >boo..</text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt;::operator (3,000,000 samples, 0.06%)</title><rect x="201.0" y="149" width="0.7" height="15.0" fill="rgb(237,196,3)" rx="2" ry="2" />
<text  x="203.98" y="159.5" ></text>
</g>
<g >
<title>BwtreeTest_ConcurrentSkewedInsert_10_Test::TestBody (143,500,000 samples, 3.10%)</title><rect x="1153.1" y="325" width="36.5" height="15.0" fill="rgb(233,216,44)" rx="2" ry="2" />
<text  x="1156.07" y="335.5" >Bwt..</text>
</g>
<g >
<title>void std::advance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, long&gt; (750,000 samples, 0.02%)</title><rect x="192.2" y="69" width="0.2" height="15.0" fill="rgb(207,226,38)" rx="2" ry="2" />
<text  x="195.19" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (133,750,000 samples, 2.89%)</title><rect x="153.2" y="101" width="34.1" height="15.0" fill="rgb(206,195,31)" rx="2" ry="2" />
<text  x="156.22" y="111.5" >bw..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1,250,000 samples, 0.03%)</title><rect x="1161.5" y="277" width="0.4" height="15.0" fill="rgb(208,193,34)" rx="2" ry="2" />
<text  x="1164.53" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::PerformGarbageCollection (148,000,000 samples, 3.19%)</title><rect x="10.0" y="389" width="37.7" height="15.0" fill="rgb(249,123,35)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >bwt..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::~EpochManager (16,250,000 samples, 0.35%)</title><rect x="1157.1" y="293" width="4.1" height="15.0" fill="rgb(236,71,17)" rx="2" ry="2" />
<text  x="1160.08" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (750,000 samples, 0.02%)</title><rect x="818.3" y="181" width="0.2" height="15.0" fill="rgb(231,217,40)" rx="2" ry="2" />
<text  x="821.30" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::lower_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (500,000 samples, 0.01%)</title><rect x="129.9" y="165" width="0.1" height="15.0" fill="rgb(253,18,39)" rx="2" ry="2" />
<text  x="132.91" y="175.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (500,000 samples, 0.01%)</title><rect x="190.4" y="69" width="0.1" height="15.0" fill="rgb(229,136,9)" rx="2" ry="2" />
<text  x="193.41" y="79.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* const&amp; std::min&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (2,000,000 samples, 0.04%)</title><rect x="205.5" y="197" width="0.5" height="15.0" fill="rgb(248,94,17)" rx="2" ry="2" />
<text  x="208.50" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::JoinEpoch (1,000,000 samples, 0.02%)</title><rect x="55.6" y="229" width="0.2" height="15.0" fill="rgb(225,4,49)" rx="2" ry="2" />
<text  x="58.60" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateInnerNode (750,000 samples, 0.02%)</title><rect x="129.8" y="181" width="0.2" height="15.0" fill="rgb(231,114,26)" rx="2" ry="2" />
<text  x="132.85" y="191.5" ></text>
</g>
<g >
<title>void std::__advance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, long&gt; (750,000 samples, 0.02%)</title><rect x="192.2" y="53" width="0.2" height="15.0" fill="rgb(211,30,37)" rx="2" ry="2" />
<text  x="195.19" y="63.5" ></text>
</g>
<g >
<title>[unknown] (3,250,000 samples, 0.07%)</title><rect x="1150.3" y="517" width="0.8" height="15.0" fill="rgb(243,108,17)" rx="2" ry="2" />
<text  x="1153.26" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;unsigned long&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, unsigned long&gt; (3,750,000 samples, 0.08%)</title><rect x="203.0" y="181" width="1.0" height="15.0" fill="rgb(247,54,39)" rx="2" ry="2" />
<text  x="206.02" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetValue (15,750,000 samples, 0.34%)</title><rect x="1153.1" y="309" width="4.0" height="15.0" fill="rgb(225,46,2)" rx="2" ry="2" />
<text  x="1156.07" y="319.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (2,750,000 samples, 0.06%)</title><rect x="72.6" y="165" width="0.7" height="15.0" fill="rgb(246,216,24)" rx="2" ry="2" />
<text  x="75.60" y="175.5" ></text>
</g>
<g >
<title>double std::uniform_real_distribution&lt;double&gt;::operator (3,000,000 samples, 0.06%)</title><rect x="1186.8" y="277" width="0.8" height="15.0" fill="rgb(220,180,3)" rx="2" ry="2" />
<text  x="1189.82" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator::operator (1,750,000 samples, 0.04%)</title><rect x="201.1" y="133" width="0.5" height="15.0" fill="rgb(230,115,10)" rx="2" ry="2" />
<text  x="204.11" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetLowKeyPair (3,000,000 samples, 0.06%)</title><rect x="49.9" y="229" width="0.7" height="15.0" fill="rgb(227,194,20)" rx="2" ry="2" />
<text  x="52.86" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::~LeafNode (142,250,000 samples, 3.07%)</title><rect x="11.5" y="341" width="36.2" height="15.0" fill="rgb(236,163,10)" rx="2" ry="2" />
<text  x="14.46" y="351.5" >bwt..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetLowKeyPair (500,000 samples, 0.01%)</title><rect x="196.5" y="197" width="0.1" height="15.0" fill="rgb(238,170,23)" rx="2" ry="2" />
<text  x="199.46" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TraverseReadOptimized (5,500,000 samples, 0.12%)</title><rect x="1153.1" y="293" width="1.4" height="15.0" fill="rgb(221,0,49)" rx="2" ry="2" />
<text  x="1156.07" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::GetSplitSibling (217,750,000 samples, 4.70%)</title><rect x="71.6" y="181" width="55.5" height="15.0" fill="rgb(216,42,41)" rx="2" ry="2" />
<text  x="74.64" y="191.5" >bwtre..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::GetSize (750,000 samples, 0.02%)</title><rect x="198.8" y="181" width="0.2" height="15.0" fill="rgb(240,226,9)" rx="2" ry="2" />
<text  x="201.81" y="191.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="469" width="1102.6" height="15.0" fill="rgb(237,193,23)" rx="2" ry="2" />
<text  x="50.70" y="479.5" >void std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread</text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, test::MultiThreadTestUtil::RunThreadsUntilFinish (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="373" width="1102.6" height="15.0" fill="rgb(215,54,15)" rx="2" ry="2" />
<text  x="50.70" y="383.5" >std::enable_if&lt;is_invocable_r_v&lt;void, test::MultiThreadTestUtil::RunThreadsUntilFinish</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;long&gt;::_M_valptr (500,000 samples, 0.01%)</title><rect x="1156.7" y="181" width="0.1" height="15.0" fill="rgb(226,80,34)" rx="2" ry="2" />
<text  x="1159.70" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetNextNodeID (2,250,000 samples, 0.05%)</title><rect x="204.3" y="181" width="0.6" height="15.0" fill="rgb(227,228,25)" rx="2" ry="2" />
<text  x="207.29" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::copy_backward&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (3,750,000 samples, 0.08%)</title><rect x="189.2" y="101" width="1.0" height="15.0" fill="rgb(225,0,41)" rx="2" ry="2" />
<text  x="192.20" y="111.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, long&gt; const*&gt;::iterator_category std::__iterator_category&lt;std::pair&lt;long, long&gt; const*&gt; (1,250,000 samples, 0.03%)</title><rect x="1095.0" y="165" width="0.3" height="15.0" fill="rgb(205,142,17)" rx="2" ry="2" />
<text  x="1097.99" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateSiblingChain (4,500,000 samples, 0.10%)</title><rect x="204.0" y="197" width="1.1" height="15.0" fill="rgb(215,46,33)" rx="2" ry="2" />
<text  x="206.97" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;long, false&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_allocate_node&lt;long const&amp;&gt; (2,500,000 samples, 0.05%)</title><rect x="1156.3" y="197" width="0.6" height="15.0" fill="rgb(240,8,43)" rx="2" ry="2" />
<text  x="1159.31" y="207.5" ></text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (750,000 samples, 0.02%)</title><rect x="193.1" y="85" width="0.2" height="15.0" fill="rgb(238,212,23)" rx="2" ry="2" />
<text  x="196.08" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::back (1,250,000 samples, 0.03%)</title><rect x="1162.6" y="309" width="0.3" height="15.0" fill="rgb(250,67,11)" rx="2" ry="2" />
<text  x="1165.55" y="319.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (2,750,000 samples, 0.06%)</title><rect x="132.5" y="165" width="0.7" height="15.0" fill="rgb(215,2,27)" rx="2" ry="2" />
<text  x="135.52" y="175.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (750,000 samples, 0.02%)</title><rect x="201.6" y="133" width="0.1" height="15.0" fill="rgb(208,40,5)" rx="2" ry="2" />
<text  x="204.55" y="143.5" ></text>
</g>
<g >
<title>RUN_ALL_TESTS (143,750,000 samples, 3.10%)</title><rect x="1153.1" y="485" width="36.6" height="15.0" fill="rgb(251,48,53)" rx="2" ry="2" />
<text  x="1156.07" y="495.5" >RUN..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::Allocate (17,250,000 samples, 0.37%)</title><rect x="50.9" y="213" width="4.4" height="15.0" fill="rgb(242,140,34)" rx="2" ry="2" />
<text  x="53.95" y="223.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order2 (1,250,000 samples, 0.03%)</title><rect x="56.6" y="181" width="0.3" height="15.0" fill="rgb(234,216,10)" rx="2" ry="2" />
<text  x="59.61" y="191.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (1,500,000 samples, 0.03%)</title><rect x="197.8" y="165" width="0.4" height="15.0" fill="rgb(231,122,37)" rx="2" ry="2" />
<text  x="200.79" y="175.5" ></text>
</g>
<g >
<title>std::operator&amp; (500,000 samples, 0.01%)</title><rect x="56.9" y="181" width="0.2" height="15.0" fill="rgb(251,58,10)" rx="2" ry="2" />
<text  x="59.93" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsDeltaNode (3,000,000 samples, 0.06%)</title><rect x="132.5" y="181" width="0.7" height="15.0" fill="rgb(231,58,6)" rx="2" ry="2" />
<text  x="135.46" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;long&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, long&gt; (1,750,000 samples, 0.04%)</title><rect x="1097.0" y="197" width="0.4" height="15.0" fill="rgb(243,115,17)" rx="2" ry="2" />
<text  x="1099.96" y="207.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (148,000,000 samples, 3.19%)</title><rect x="10.0" y="437" width="37.7" height="15.0" fill="rgb(226,202,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >voi..</text>
</g>
<g >
<title>void std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_realloc_insert&lt;long const&amp;&gt; (1,250,000 samples, 0.03%)</title><rect x="1154.1" y="245" width="0.3" height="15.0" fill="rgb(240,194,43)" rx="2" ry="2" />
<text  x="1157.08" y="255.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (1,250,000 samples, 0.03%)</title><rect x="191.5" y="37" width="0.3" height="15.0" fill="rgb(234,137,34)" rx="2" ry="2" />
<text  x="194.49" y="47.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;long, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Exists (500,000 samples, 0.01%)</title><rect x="1153.6" y="261" width="0.2" height="15.0" fill="rgb(237,149,36)" rx="2" ry="2" />
<text  x="1156.64" y="271.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (500,000 samples, 0.01%)</title><rect x="1090.6" y="181" width="0.1" height="15.0" fill="rgb(254,152,1)" rx="2" ry="2" />
<text  x="1093.59" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (24,500,000 samples, 0.53%)</title><rect x="1090.7" y="181" width="6.3" height="15.0" fill="rgb(232,212,15)" rx="2" ry="2" />
<text  x="1093.72" y="191.5" ></text>
</g>
<g >
<title>std::operator| (1,000,000 samples, 0.02%)</title><rect x="57.3" y="197" width="0.2" height="15.0" fill="rgb(244,175,6)" rx="2" ry="2" />
<text  x="60.25" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::GetSize (500,000 samples, 0.01%)</title><rect x="71.3" y="181" width="0.1" height="15.0" fill="rgb(213,188,54)" rx="2" ry="2" />
<text  x="74.26" y="191.5" ></text>
</g>
<g >
<title>__divtf3 (750,000 samples, 0.02%)</title><rect x="1163.2" y="293" width="0.2" height="15.0" fill="rgb(213,76,6)" rx="2" ry="2" />
<text  x="1166.19" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash_aux (1,500,000 samples, 0.03%)</title><rect x="1155.9" y="181" width="0.3" height="15.0" fill="rgb(247,46,46)" rx="2" ry="2" />
<text  x="1158.87" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTreeBase::GetInnerDeltaChainLengthThreshold (1,500,000 samples, 0.03%)</title><rect x="194.3" y="181" width="0.4" height="15.0" fill="rgb(225,111,44)" rx="2" ry="2" />
<text  x="197.29" y="191.5" ></text>
</g>
<g >
<title>double std::uniform_real_distribution&lt;double&gt;::operator (2,750,000 samples, 0.06%)</title><rect x="1186.8" y="261" width="0.7" height="15.0" fill="rgb(207,182,18)" rx="2" ry="2" />
<text  x="1189.82" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateLeafNode (238,000,000 samples, 5.14%)</title><rect x="133.3" y="165" width="60.7" height="15.0" fill="rgb(212,153,27)" rx="2" ry="2" />
<text  x="136.35" y="175.5" >bwtree..</text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;long, true, false&gt;, bool&gt; std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;long const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt; &gt; (9,500,000 samples, 0.21%)</title><rect x="1154.7" y="229" width="2.4" height="15.0" fill="rgb(210,59,53)" rx="2" ry="2" />
<text  x="1157.66" y="239.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt;::difference_type std::distance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (500,000 samples, 0.01%)</title><rect x="191.9" y="69" width="0.2" height="15.0" fill="rgb(219,148,24)" rx="2" ry="2" />
<text  x="194.94" y="79.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt; &gt; (10,250,000 samples, 0.22%)</title><rect x="1154.5" y="261" width="2.6" height="15.0" fill="rgb(223,208,26)" rx="2" ry="2" />
<text  x="1157.47" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (1,500,000 samples, 0.03%)</title><rect x="70.8" y="165" width="0.4" height="15.0" fill="rgb(249,63,3)" rx="2" ry="2" />
<text  x="73.81" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (148,000,000 samples, 3.19%)</title><rect x="10.0" y="421" width="37.7" height="15.0" fill="rgb(237,119,10)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >bwt..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafInsertNode::LeafInsertNode (5,750,000 samples, 0.12%)</title><rect x="57.6" y="229" width="1.4" height="15.0" fill="rgb(214,151,18)" rx="2" ry="2" />
<text  x="60.57" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (235,250,000 samples, 5.08%)</title><rect x="133.3" y="149" width="60.0" height="15.0" fill="rgb(210,57,45)" rx="2" ry="2" />
<text  x="136.35" y="159.5" >bwtree..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (103,000,000 samples, 2.22%)</title><rect x="21.5" y="309" width="26.2" height="15.0" fill="rgb(214,63,20)" rx="2" ry="2" />
<text  x="24.46" y="319.5" >b..</text>
</g>
<g >
<title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (2,250,000 samples, 0.05%)</title><rect x="1154.8" y="213" width="0.6" height="15.0" fill="rgb(228,39,41)" rx="2" ry="2" />
<text  x="1157.78" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (12,750,000 samples, 0.28%)</title><rect x="66.5" y="213" width="3.2" height="15.0" fill="rgb(239,179,3)" rx="2" ry="2" />
<text  x="69.48" y="223.5" ></text>
</g>
<g >
<title>____wcstod_l_internal (2,250,000 samples, 0.05%)</title><rect x="1151.1" y="517" width="0.6" height="15.0" fill="rgb(213,78,14)" rx="2" ry="2" />
<text  x="1154.09" y="527.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::ClearEpoch (16,250,000 samples, 0.35%)</title><rect x="1157.1" y="277" width="4.1" height="15.0" fill="rgb(228,107,42)" rx="2" ry="2" />
<text  x="1160.08" y="287.5" ></text>
</g>
<g >
<title>all (4,632,500,000 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(208,49,52)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order (500,000 samples, 0.01%)</title><rect x="193.8" y="117" width="0.2" height="15.0" fill="rgb(234,213,15)" rx="2" ry="2" />
<text  x="196.85" y="127.5" ></text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (3,500,000 samples, 0.08%)</title><rect x="1096.1" y="149" width="0.9" height="15.0" fill="rgb(208,133,19)" rx="2" ry="2" />
<text  x="1099.07" y="159.5" ></text>
</g>
<g >
<title>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (143,750,000 samples, 3.10%)</title><rect x="1153.1" y="341" width="36.6" height="15.0" fill="rgb(228,224,45)" rx="2" ry="2" />
<text  x="1156.07" y="351.5" >voi..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::BaseNode (2,250,000 samples, 0.05%)</title><rect x="58.2" y="181" width="0.6" height="15.0" fill="rgb(238,87,50)" rx="2" ry="2" />
<text  x="61.21" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a2&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (1,000,000 samples, 0.02%)</title><rect x="189.4" y="53" width="0.2" height="15.0" fill="rgb(207,106,39)" rx="2" ry="2" />
<text  x="192.39" y="63.5" ></text>
</g>
<g >
<title>int&amp; std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (500,000 samples, 0.01%)</title><rect x="1162.9" y="293" width="0.2" height="15.0" fill="rgb(221,202,47)" rx="2" ry="2" />
<text  x="1165.94" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod&lt;unsigned long, 2147483647ul, 16807ul, 0ul, true, true&gt;::__calc (500,000 samples, 0.01%)</title><rect x="1187.4" y="181" width="0.1" height="15.0" fill="rgb(206,211,23)" rx="2" ry="2" />
<text  x="1190.39" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InstallNodeToReplace (6,250,000 samples, 0.13%)</title><rect x="56.0" y="229" width="1.6" height="15.0" fill="rgb(210,35,53)" rx="2" ry="2" />
<text  x="58.98" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateLeafNode (3,750,000 samples, 0.08%)</title><rect x="1153.4" y="277" width="1.0" height="15.0" fill="rgb(235,67,33)" rx="2" ry="2" />
<text  x="1156.45" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetNextNodeID (1,750,000 samples, 0.04%)</title><rect x="817.5" y="181" width="0.5" height="15.0" fill="rgb(214,162,6)" rx="2" ry="2" />
<text  x="820.53" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ValueCmpEqual (93,750,000 samples, 2.02%)</title><rect x="1126.0" y="213" width="23.9" height="15.0" fill="rgb(247,124,34)" rx="2" ry="2" />
<text  x="1129.00" y="223.5" >b..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator::operator (9,250,000 samples, 0.20%)</title><rect x="1092.6" y="149" width="2.4" height="15.0" fill="rgb(248,69,15)" rx="2" ry="2" />
<text  x="1095.63" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (750,000 samples, 0.02%)</title><rect x="1162.7" y="293" width="0.2" height="15.0" fill="rgb(246,42,53)" rx="2" ry="2" />
<text  x="1165.68" y="303.5" ></text>
</g>
<g >
<title>std::function&lt;void  (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="405" width="1102.6" height="15.0" fill="rgb(231,159,48)" rx="2" ry="2" />
<text  x="50.70" y="415.5" >std::function&lt;void </text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateInnerNode (45,000,000 samples, 0.97%)</title><rect x="194.7" y="213" width="11.4" height="15.0" fill="rgb(206,133,33)" rx="2" ry="2" />
<text  x="197.67" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; __gnu_cxx::__ops::__iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (1,500,000 samples, 0.03%)</title><rect x="1090.2" y="181" width="0.4" height="15.0" fill="rgb(219,44,4)" rx="2" ry="2" />
<text  x="1093.21" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (27,000,000 samples, 0.58%)</title><rect x="1090.1" y="197" width="6.9" height="15.0" fill="rgb(206,62,18)" rx="2" ry="2" />
<text  x="1093.09" y="207.5" ></text>
</g>
<g >
<title>unsigned long std::__detail::__mod&lt;unsigned long, 2147483647ul, 16807ul, 0ul&gt; (500,000 samples, 0.01%)</title><rect x="1187.4" y="197" width="0.1" height="15.0" fill="rgb(247,38,25)" rx="2" ry="2" />
<text  x="1190.39" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (1,250,000 samples, 0.03%)</title><rect x="1155.5" y="181" width="0.4" height="15.0" fill="rgb(217,187,26)" rx="2" ry="2" />
<text  x="1158.55" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (1,250,000 samples, 0.03%)</title><rect x="1157.1" y="229" width="0.4" height="15.0" fill="rgb(206,137,47)" rx="2" ry="2" />
<text  x="1160.14" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__niter_base&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (1,000,000 samples, 0.02%)</title><rect x="189.8" y="69" width="0.2" height="15.0" fill="rgb(242,41,10)" rx="2" ry="2" />
<text  x="192.77" y="79.5" ></text>
</g>
<g >
<title>std::hash&lt;long&gt;::operator (1,000,000 samples, 0.02%)</title><rect x="136.6" y="69" width="0.3" height="15.0" fill="rgb(229,44,52)" rx="2" ry="2" />
<text  x="139.60" y="79.5" ></text>
</g>
<g >
<title>util::Distribution&lt; (103,750,000 samples, 2.24%)</title><rect x="1163.2" y="309" width="26.4" height="15.0" fill="rgb(213,157,25)" rx="2" ry="2" />
<text  x="1166.19" y="319.5" >u..</text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (7,750,000 samples, 0.17%)</title><rect x="1187.6" y="277" width="2.0" height="15.0" fill="rgb(244,156,26)" rx="2" ry="2" />
<text  x="1190.58" y="287.5" ></text>
</g>
<g >
<title>round_and_return (500,000 samples, 0.01%)</title><rect x="1189.9" y="517" width="0.1" height="15.0" fill="rgb(246,105,6)" rx="2" ry="2" />
<text  x="1192.87" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;long, false&gt;* std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::operator (2,500,000 samples, 0.05%)</title><rect x="1156.3" y="213" width="0.6" height="15.0" fill="rgb(225,93,15)" rx="2" ry="2" />
<text  x="1159.31" y="223.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta*&gt;::load (2,500,000 samples, 0.05%)</title><rect x="51.8" y="181" width="0.7" height="15.0" fill="rgb(252,113,2)" rx="2" ry="2" />
<text  x="54.84" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::~ElasticNode (131,750,000 samples, 2.84%)</title><rect x="14.1" y="325" width="33.6" height="15.0" fill="rgb(216,57,42)" rx="2" ry="2" />
<text  x="17.14" y="335.5" >bw..</text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (2,500,000 samples, 0.05%)</title><rect x="1094.4" y="133" width="0.6" height="15.0" fill="rgb(240,217,1)" rx="2" ry="2" />
<text  x="1097.35" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (5,250,000 samples, 0.11%)</title><rect x="73.3" y="165" width="1.3" height="15.0" fill="rgb(212,220,39)" rx="2" ry="2" />
<text  x="76.30" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (10,500,000 samples, 0.23%)</title><rect x="11.5" y="325" width="2.6" height="15.0" fill="rgb(222,161,39)" rx="2" ry="2" />
<text  x="14.46" y="335.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::LeaveEpoch (500,000 samples, 0.01%)</title><rect x="55.8" y="229" width="0.2" height="15.0" fill="rgb(228,226,13)" rx="2" ry="2" />
<text  x="58.85" y="239.5" ></text>
</g>
<g >
<title>____wcstof_l_internal (1,250,000 samples, 0.03%)</title><rect x="1151.7" y="517" width="0.3" height="15.0" fill="rgb(210,107,29)" rx="2" ry="2" />
<text  x="1154.66" y="527.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::GarbageNode*&gt;::compare_exchange_strong (500,000 samples, 0.01%)</title><rect x="193.3" y="133" width="0.1" height="15.0" fill="rgb(227,205,52)" rx="2" ry="2" />
<text  x="196.27" y="143.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt;::pair&lt;unsigned long, true&gt; (2,500,000 samples, 0.05%)</title><rect x="203.3" y="165" width="0.7" height="15.0" fill="rgb(224,114,4)" rx="2" ry="2" />
<text  x="206.33" y="175.5" ></text>
</g>
<g >
<title>util::Zipf::Generate (96,250,000 samples, 2.08%)</title><rect x="1165.0" y="293" width="24.6" height="15.0" fill="rgb(233,42,19)" rx="2" ry="2" />
<text  x="1168.04" y="303.5" >u..</text>
</g>
<g >
<title>testing::UnitTest::Run (143,750,000 samples, 3.10%)</title><rect x="1153.1" y="469" width="36.6" height="15.0" fill="rgb(234,224,4)" rx="2" ry="2" />
<text  x="1156.07" y="479.5" >tes..</text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (3,500,000 samples, 0.08%)</title><rect x="191.0" y="69" width="0.9" height="15.0" fill="rgb(205,152,25)" rx="2" ry="2" />
<text  x="193.98" y="79.5" ></text>
</g>
<g >
<title>test::MultiThreadTestUtil::RunThreadsUntilFinish (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="341" width="1102.6" height="15.0" fill="rgb(205,122,25)" rx="2" ry="2" />
<text  x="50.70" y="351.5" >test::MultiThreadTestUtil::RunThreadsUntilFinish</text>
</g>
<g >
<title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt; &gt; (10,250,000 samples, 0.22%)</title><rect x="1154.5" y="277" width="2.6" height="15.0" fill="rgb(242,99,51)" rx="2" ry="2" />
<text  x="1157.47" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetDepth (500,000 samples, 0.01%)</title><rect x="57.6" y="213" width="0.2" height="15.0" fill="rgb(226,209,42)" rx="2" ry="2" />
<text  x="60.63" y="223.5" ></text>
</g>
<g >
<title>_nss_dns_gethostbyaddr2_r (750,000 samples, 0.02%)</title><rect x="1189.7" y="517" width="0.2" height="15.0" fill="rgb(254,105,8)" rx="2" ry="2" />
<text  x="1192.68" y="527.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc::operator (1,250,000 samples, 0.03%)</title><rect x="136.5" y="85" width="0.4" height="15.0" fill="rgb(234,110,16)" rx="2" ry="2" />
<text  x="139.53" y="95.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt;::difference_type std::__distance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (500,000 samples, 0.01%)</title><rect x="191.9" y="53" width="0.2" height="15.0" fill="rgb(231,34,35)" rx="2" ry="2" />
<text  x="194.94" y="63.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (1,000,000 samples, 0.02%)</title><rect x="192.8" y="85" width="0.2" height="15.0" fill="rgb(234,136,26)" rx="2" ry="2" />
<text  x="195.76" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (1,250,000 samples, 0.03%)</title><rect x="1125.7" y="197" width="0.3" height="15.0" fill="rgb(231,228,5)" rx="2" ry="2" />
<text  x="1128.68" y="207.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (1,000,000 samples, 0.02%)</title><rect x="201.3" y="117" width="0.3" height="15.0" fill="rgb(216,114,52)" rx="2" ry="2" />
<text  x="204.30" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateNode (238,250,000 samples, 5.14%)</title><rect x="133.3" y="181" width="60.7" height="15.0" fill="rgb(243,84,24)" rx="2" ry="2" />
<text  x="136.29" y="191.5" >bwtree..</text>
</g>
<g >
<title>std::__cmpexch_failure_order2 (500,000 samples, 0.01%)</title><rect x="56.5" y="197" width="0.1" height="15.0" fill="rgb(252,65,32)" rx="2" ry="2" />
<text  x="59.49" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateInnerNode (1,000,000 samples, 0.02%)</title><rect x="1153.2" y="277" width="0.2" height="15.0" fill="rgb(213,37,36)" rx="2" ry="2" />
<text  x="1156.19" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetNode (5,750,000 samples, 0.12%)</title><rect x="130.5" y="181" width="1.5" height="15.0" fill="rgb(215,221,37)" rx="2" ry="2" />
<text  x="133.55" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::deallocate (500,000 samples, 0.01%)</title><rect x="1162.3" y="213" width="0.1" height="15.0" fill="rgb(206,188,42)" rx="2" ry="2" />
<text  x="1165.30" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::AddGarbageNode (750,000 samples, 0.02%)</title><rect x="193.3" y="149" width="0.2" height="15.0" fill="rgb(217,88,11)" rx="2" ry="2" />
<text  x="196.27" y="159.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (500,000 samples, 0.01%)</title><rect x="818.0" y="149" width="0.1" height="15.0" fill="rgb(226,92,38)" rx="2" ry="2" />
<text  x="820.98" y="159.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, test::MultiThreadTestUtil::RunThreadsUntilFinish (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="357" width="1102.6" height="15.0" fill="rgb(238,123,31)" rx="2" ry="2" />
<text  x="50.70" y="367.5" >void std::__invoke_impl&lt;void, test::MultiThreadTestUtil::RunThreadsUntilFinish</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (1,000,000 samples, 0.02%)</title><rect x="71.4" y="181" width="0.2" height="15.0" fill="rgb(205,72,14)" rx="2" ry="2" />
<text  x="74.39" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TakeNodeSnapshot (7,750,000 samples, 0.17%)</title><rect x="130.2" y="197" width="1.9" height="15.0" fill="rgb(238,208,42)" rx="2" ry="2" />
<text  x="133.17" y="207.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (9,750,000 samples, 0.21%)</title><rect x="124.6" y="149" width="2.5" height="15.0" fill="rgb(207,219,53)" rx="2" ry="2" />
<text  x="127.62" y="159.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (148,000,000 samples, 3.19%)</title><rect x="10.0" y="485" width="37.7" height="15.0" fill="rgb(223,192,14)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >std..</text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (6,000,000 samples, 0.13%)</title><rect x="1095.4" y="165" width="1.6" height="15.0" fill="rgb(230,142,13)" rx="2" ry="2" />
<text  x="1098.43" y="175.5" ></text>
</g>
<g >
<title>operator new (3,750,000 samples, 0.08%)</title><rect x="187.3" y="101" width="0.9" height="15.0" fill="rgb(217,35,30)" rx="2" ry="2" />
<text  x="190.29" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::ClearEpoch (148,000,000 samples, 3.19%)</title><rect x="10.0" y="373" width="37.7" height="15.0" fill="rgb(246,224,48)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >bwt..</text>
</g>
<g >
<title>__vstrfmon_l_internal (143,750,000 samples, 3.10%)</title><rect x="1153.1" y="517" width="36.6" height="15.0" fill="rgb(226,47,32)" rx="2" ry="2" />
<text  x="1156.07" y="527.5" >__v..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (500,000 samples, 0.01%)</title><rect x="818.4" y="165" width="0.1" height="15.0" fill="rgb(234,105,5)" rx="2" ry="2" />
<text  x="821.36" y="175.5" ></text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, unsigned long&gt; const*, long&gt; (3,250,000 samples, 0.07%)</title><rect x="202.1" y="149" width="0.9" height="15.0" fill="rgb(240,172,26)" rx="2" ry="2" />
<text  x="205.12" y="159.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;::~unordered_set (1,500,000 samples, 0.03%)</title><rect x="1162.2" y="309" width="0.4" height="15.0" fill="rgb(247,163,45)" rx="2" ry="2" />
<text  x="1165.17" y="319.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::load (4,500,000 samples, 0.10%)</title><rect x="130.8" y="165" width="1.1" height="15.0" fill="rgb(246,6,2)" rx="2" ry="2" />
<text  x="133.80" y="175.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (500,000 samples, 0.01%)</title><rect x="818.1" y="165" width="0.1" height="15.0" fill="rgb(240,221,50)" rx="2" ry="2" />
<text  x="821.11" y="175.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (148,000,000 samples, 3.19%)</title><rect x="10.0" y="469" width="37.7" height="15.0" fill="rgb(253,135,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >voi..</text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::_Iter_comp_val (1,500,000 samples, 0.03%)</title><rect x="1090.2" y="165" width="0.4" height="15.0" fill="rgb(218,28,22)" rx="2" ry="2" />
<text  x="1093.21" y="175.5" ></text>
</g>
<g >
<title>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (143,750,000 samples, 3.10%)</title><rect x="1153.1" y="437" width="36.6" height="15.0" fill="rgb(215,11,1)" rx="2" ry="2" />
<text  x="1156.07" y="447.5" >boo..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Context::Context (750,000 samples, 0.02%)</title><rect x="50.6" y="229" width="0.2" height="15.0" fill="rgb(210,212,3)" rx="2" ry="2" />
<text  x="53.63" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (500,000 samples, 0.01%)</title><rect x="1155.2" y="181" width="0.1" height="15.0" fill="rgb(250,42,46)" rx="2" ry="2" />
<text  x="1158.17" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AdjustNodeSize (224,250,000 samples, 4.84%)</title><rect x="70.2" y="197" width="57.1" height="15.0" fill="rgb(253,163,28)" rx="2" ry="2" />
<text  x="73.18" y="207.5" >bwtree..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (687,250,000 samples, 14.84%)</title><rect x="642.1" y="197" width="175.1" height="15.0" fill="rgb(217,126,40)" rx="2" ry="2" />
<text  x="645.09" y="207.5" >bwtree::BwTree&lt;long, l..</text>
</g>
<g >
<title>std::__detail::_Adaptor&lt;std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;, double&gt;::operator (2,500,000 samples, 0.05%)</title><rect x="1186.9" y="245" width="0.6" height="15.0" fill="rgb(249,23,47)" rx="2" ry="2" />
<text  x="1189.88" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Begin (3,500,000 samples, 0.08%)</title><rect x="71.7" y="165" width="0.9" height="15.0" fill="rgb(243,212,28)" rx="2" ry="2" />
<text  x="74.71" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Traverse (4,283,000,000 samples, 92.46%)</title><rect x="59.1" y="229" width="1091.0" height="15.0" fill="rgb(254,131,18)" rx="2" ry="2" />
<text  x="62.10" y="239.5" >bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::has..</text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;long, false&gt;::_Hash_node (500,000 samples, 0.01%)</title><rect x="1156.6" y="181" width="0.1" height="15.0" fill="rgb(233,50,13)" rx="2" ry="2" />
<text  x="1159.57" y="191.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, unsigned long&gt; const*&gt;::difference_type std::distance&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (1,250,000 samples, 0.03%)</title><rect x="201.7" y="149" width="0.4" height="15.0" fill="rgb(214,103,27)" rx="2" ry="2" />
<text  x="204.74" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (1,500,000 samples, 0.03%)</title><rect x="1162.2" y="293" width="0.4" height="15.0" fill="rgb(249,208,34)" rx="2" ry="2" />
<text  x="1165.17" y="303.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, BwtreeTest_ConcurrentSkewedInsert_10_Test::TestBody (4,328,500,000 samples, 93.44%)</title><rect x="47.7" y="277" width="1102.6" height="15.0" fill="rgb(250,84,21)" rx="2" ry="2" />
<text  x="50.70" y="287.5" >void std::__invoke_impl&lt;void, BwtreeTest_ConcurrentSkewedInsert_10_Test::TestBody</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (8,750,000 samples, 0.19%)</title><rect x="190.2" y="101" width="2.2" height="15.0" fill="rgb(243,124,24)" rx="2" ry="2" />
<text  x="193.15" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (7,250,000 samples, 0.16%)</title><rect x="190.5" y="85" width="1.9" height="15.0" fill="rgb(211,205,31)" rx="2" ry="2" />
<text  x="193.53" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (2,250,000 samples, 0.05%)</title><rect x="196.6" y="197" width="0.6" height="15.0" fill="rgb(251,197,10)" rx="2" ry="2" />
<text  x="199.58" y="207.5" ></text>
</g>
<g >
<title>testing::TestSuite::Run (143,750,000 samples, 3.10%)</title><rect x="1153.1" y="405" width="36.6" height="15.0" fill="rgb(229,5,32)" rx="2" ry="2" />
<text  x="1156.07" y="415.5" >tes..</text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (500,000 samples, 0.01%)</title><rect x="1095.3" y="165" width="0.1" height="15.0" fill="rgb(231,130,44)" rx="2" ry="2" />
<text  x="1098.31" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::Destroy (1,750,000 samples, 0.04%)</title><rect x="11.0" y="325" width="0.5" height="15.0" fill="rgb(223,59,44)" rx="2" ry="2" />
<text  x="14.02" y="335.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::LeafDataNode (3,500,000 samples, 0.08%)</title><rect x="57.9" y="213" width="0.9" height="15.0" fill="rgb(209,55,40)" rx="2" ry="2" />
<text  x="60.89" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (83,750,000 samples, 1.81%)</title><rect x="103.3" y="149" width="21.3" height="15.0" fill="rgb(252,191,27)" rx="2" ry="2" />
<text  x="106.29" y="159.5" >b..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (500,000 samples, 0.01%)</title><rect x="1161.7" y="245" width="0.1" height="15.0" fill="rgb(238,71,32)" rx="2" ry="2" />
<text  x="1164.66" y="255.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt;::operator (500,000 samples, 0.01%)</title><rect x="199.5" y="165" width="0.1" height="15.0" fill="rgb(205,52,7)" rx="2" ry="2" />
<text  x="202.51" y="175.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order (2,000,000 samples, 0.04%)</title><rect x="56.6" y="197" width="0.5" height="15.0" fill="rgb(246,176,31)" rx="2" ry="2" />
<text  x="59.61" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (4,000,000 samples, 0.09%)</title><rect x="353.7" y="197" width="1.1" height="15.0" fill="rgb(210,17,26)" rx="2" ry="2" />
<text  x="356.75" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (500,000 samples, 0.01%)</title><rect x="204.9" y="181" width="0.1" height="15.0" fill="rgb(231,183,17)" rx="2" ry="2" />
<text  x="207.86" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (1,250,000 samples, 0.03%)</title><rect x="190.2" y="85" width="0.3" height="15.0" fill="rgb(213,6,16)" rx="2" ry="2" />
<text  x="193.22" y="95.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (15,750,000 samples, 0.34%)</title><rect x="199.0" y="181" width="4.0" height="15.0" fill="rgb(213,218,15)" rx="2" ry="2" />
<text  x="202.00" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::GetIndexPair (1,750,000 samples, 0.04%)</title><rect x="188.2" y="117" width="0.5" height="15.0" fill="rgb(228,91,9)" rx="2" ry="2" />
<text  x="191.24" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::FreeEpochDeltaChain (147,500,000 samples, 3.18%)</title><rect x="10.1" y="357" width="37.6" height="15.0" fill="rgb(237,20,52)" rx="2" ry="2" />
<text  x="13.13" y="367.5" >bwt..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::FinishPartialSMO (10,500,000 samples, 0.23%)</title><rect x="127.4" y="197" width="2.6" height="15.0" fill="rgb(211,219,42)" rx="2" ry="2" />
<text  x="130.36" y="207.5" ></text>
</g>
<g >
<title>testing::internal::UnitTestImpl::RunAllTests (143,750,000 samples, 3.10%)</title><rect x="1153.1" y="421" width="36.6" height="15.0" fill="rgb(233,206,33)" rx="2" ry="2" />
<text  x="1156.07" y="431.5" >tes..</text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, unsigned long&gt; const*, long&gt; (2,250,000 samples, 0.05%)</title><rect x="202.4" y="133" width="0.6" height="15.0" fill="rgb(216,61,19)" rx="2" ry="2" />
<text  x="205.38" y="143.5" ></text>
</g>
<g >
<title>bwtree_test (4,632,500,000 samples, 100.00%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(246,181,19)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >bwtree_test</text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::__ExistsScalar (2,250,000 samples, 0.05%)</title><rect x="135.4" y="101" width="0.6" height="15.0" fill="rgb(221,219,28)" rx="2" ry="2" />
<text  x="138.39" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LoadNodeID (490,250,000 samples, 10.58%)</title><rect x="69.8" y="213" width="124.9" height="15.0" fill="rgb(223,53,15)" rx="2" ry="2" />
<text  x="72.80" y="223.5" >bwtree::BwTree&lt;..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (1,000,000 samples, 0.02%)</title><rect x="194.0" y="181" width="0.3" height="15.0" fill="rgb(214,198,24)" rx="2" ry="2" />
<text  x="197.04" y="191.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::__InsertScalar (3,250,000 samples, 0.07%)</title><rect x="136.0" y="101" width="0.9" height="15.0" fill="rgb(228,186,46)" rx="2" ry="2" />
<text  x="139.02" y="111.5" ></text>
</g>
<g >
<title>std::operator&amp; (500,000 samples, 0.01%)</title><rect x="52.3" y="165" width="0.2" height="15.0" fill="rgb(211,96,34)" rx="2" ry="2" />
<text  x="55.35" y="175.5" ></text>
</g>
<g >
<title>____wcstold_l_internal (4,000,000 samples, 0.09%)</title><rect x="1152.0" y="517" width="1.0" height="15.0" fill="rgb(208,170,45)" rx="2" ry="2" />
<text  x="1154.98" y="527.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ValueCmpEqual (1,004,000,000 samples, 21.67%)</title><rect x="818.5" y="197" width="255.7" height="15.0" fill="rgb(248,214,0)" rx="2" ry="2" />
<text  x="821.49" y="207.5" >bwtree::BwTree&lt;long, long, test::B..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (2,500,000 samples, 0.05%)</title><rect x="10.3" y="341" width="0.7" height="15.0" fill="rgb(227,180,29)" rx="2" ry="2" />
<text  x="13.32" y="351.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Get (1,250,000 samples, 0.03%)</title><rect x="133.7" y="133" width="0.3" height="15.0" fill="rgb(254,223,35)" rx="2" ry="2" />
<text  x="136.73" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt;::_Val_comp_iter (750,000 samples, 0.02%)</title><rect x="199.3" y="149" width="0.1" height="15.0" fill="rgb(234,68,34)" rx="2" ry="2" />
<text  x="202.26" y="159.5" ></text>
</g>
</g>
</svg>
