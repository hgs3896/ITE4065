<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="550.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="533" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="533" > </text>
<g id="frames">
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateLeafNode (4,893,750,000 samples, 3.76%)</title><rect x="101.5" y="117" width="44.4" height="15.0" fill="rgb(219,21,38)" rx="2" ry="2" />
<text  x="104.52" y="127.5" >bwtr..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::FreeEpochDeltaChain (623,750,000 samples, 0.48%)</title><rect x="1184.1" y="213" width="5.6" height="15.0" fill="rgb(254,184,42)" rx="2" ry="2" />
<text  x="1187.05" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (5,140,250,000 samples, 3.95%)</title><rect x="33.1" y="261" width="46.6" height="15.0" fill="rgb(217,33,11)" rx="2" ry="2" />
<text  x="36.10" y="271.5" >bwtr..</text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::__upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; &gt; (13,000,000 samples, 0.01%)</title><rect x="146.1" y="117" width="0.1" height="15.0" fill="rgb(205,157,42)" rx="2" ry="2" />
<text  x="149.06" y="127.5" ></text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (58,250,000 samples, 0.04%)</title><rect x="264.0" y="69" width="0.5" height="15.0" fill="rgb(206,177,4)" rx="2" ry="2" />
<text  x="266.96" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LoadNodeID (7,234,000,000 samples, 5.56%)</title><rect x="80.3" y="165" width="65.6" height="15.0" fill="rgb(205,80,28)" rx="2" ry="2" />
<text  x="83.30" y="175.5" >bwtree:..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (671,000,000 samples, 0.52%)</title><rect x="158.9" y="165" width="6.1" height="15.0" fill="rgb(233,33,32)" rx="2" ry="2" />
<text  x="161.92" y="175.5" ></text>
</g>
<g >
<title>operator new (98,250,000 samples, 0.08%)</title><rect x="263.0" y="53" width="0.9" height="15.0" fill="rgb(239,155,52)" rx="2" ry="2" />
<text  x="265.97" y="63.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (17,500,000 samples, 0.01%)</title><rect x="264.5" y="53" width="0.2" height="15.0" fill="rgb(254,154,52)" rx="2" ry="2" />
<text  x="267.50" y="63.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Traverse (7,584,000,000 samples, 5.83%)</title><rect x="80.2" y="181" width="68.8" height="15.0" fill="rgb(206,92,33)" rx="2" ry="2" />
<text  x="83.18" y="191.5" >bwtree:..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Begin (417,000,000 samples, 0.32%)</title><rect x="173.9" y="101" width="3.8" height="15.0" fill="rgb(231,183,13)" rx="2" ry="2" />
<text  x="176.93" y="111.5" ></text>
</g>
<g >
<title>all (130,048,750,000 samples, 100%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(224,174,32)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (52,250,000 samples, 0.04%)</title><rect x="147.4" y="149" width="0.4" height="15.0" fill="rgb(224,136,34)" rx="2" ry="2" />
<text  x="150.36" y="159.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;common::WorkerPool::AddThread (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="405" width="1102.9" height="15.0" fill="rgb(231,40,1)" rx="2" ry="2" />
<text  x="82.78" y="415.5" >std::__invoke_result&lt;common::WorkerPool::AddThread</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, BwtreeTest_ConcurrentSkewedDelete_20_Test::TestBody (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="229" width="1102.9" height="15.0" fill="rgb(216,110,16)" rx="2" ry="2" />
<text  x="82.78" y="239.5" >void std::__invoke_impl&lt;void, BwtreeTest_ConcurrentSkewedDelete_20_Test::TestBody</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (7,690,000,000 samples, 5.91%)</title><rect x="10.0" y="437" width="69.8" height="15.0" fill="rgb(249,160,40)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >std::th..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::~ElasticNode (7,121,750,000 samples, 5.48%)</title><rect x="15.1" y="277" width="64.6" height="15.0" fill="rgb(224,6,3)" rx="2" ry="2" />
<text  x="18.12" y="287.5" >bwtree:..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::LeafDataNode (14,500,000 samples, 0.01%)</title><rect x="151.0" y="165" width="0.1" height="15.0" fill="rgb(220,69,33)" rx="2" ry="2" />
<text  x="153.96" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (51,000,000 samples, 0.04%)</title><rect x="81.1" y="117" width="0.4" height="15.0" fill="rgb(213,32,25)" rx="2" ry="2" />
<text  x="84.05" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::InlineAllocate (120,500,000 samples, 0.09%)</title><rect x="149.2" y="181" width="1.1" height="15.0" fill="rgb(224,81,24)" rx="2" ry="2" />
<text  x="152.25" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator::operator (14,000,000 samples, 0.01%)</title><rect x="148.6" y="101" width="0.2" height="15.0" fill="rgb(232,213,32)" rx="2" ry="2" />
<text  x="151.64" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::GrowChunk (13,750,000 samples, 0.01%)</title><rect x="149.4" y="149" width="0.1" height="15.0" fill="rgb(240,157,40)" rx="2" ry="2" />
<text  x="152.36" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::FindSplitPoint (2,105,750,000 samples, 1.62%)</title><rect x="82.2" y="117" width="19.1" height="15.0" fill="rgb(236,6,19)" rx="2" ry="2" />
<text  x="85.17" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TryConsolidateNode (6,512,000,000 samples, 5.01%)</title><rect x="205.9" y="149" width="59.1" height="15.0" fill="rgb(229,78,33)" rx="2" ry="2" />
<text  x="208.87" y="159.5" >bwtree..</text>
</g>
<g >
<title>_nss_dns_gethostbyaddr2_r (16,000,000 samples, 0.01%)</title><rect x="1189.8" y="469" width="0.2" height="15.0" fill="rgb(207,22,7)" rx="2" ry="2" />
<text  x="1192.83" y="479.5" ></text>
</g>
<g >
<title>operator new (415,000,000 samples, 0.32%)</title><rect x="259.2" y="37" width="3.8" height="15.0" fill="rgb(250,55,16)" rx="2" ry="2" />
<text  x="262.20" y="47.5" ></text>
</g>
<g >
<title>test::MultiThreadTestUtil::RunThreadsUntilFinish (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="293" width="1102.9" height="15.0" fill="rgb(206,155,32)" rx="2" ry="2" />
<text  x="82.78" y="303.5" >test::MultiThreadTestUtil::RunThreadsUntilFinish</text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (13,500,000 samples, 0.01%)</title><rect x="145.7" y="53" width="0.1" height="15.0" fill="rgb(241,211,20)" rx="2" ry="2" />
<text  x="148.67" y="63.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, BwtreeTest_ConcurrentSkewedDelete_20_Test::TestBody (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="245" width="1102.9" height="15.0" fill="rgb(222,153,8)" rx="2" ry="2" />
<text  x="82.78" y="255.5" >std::enable_if&lt;is_invocable_r_v&lt;void, BwtreeTest_ConcurrentSkewedDelete_20_Test::TestBody</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (7,690,000,000 samples, 5.91%)</title><rect x="10.0" y="453" width="69.8" height="15.0" fill="rgb(208,20,41)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >std::th..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (23,000,000 samples, 0.02%)</title><rect x="145.4" y="53" width="0.3" height="15.0" fill="rgb(243,152,41)" rx="2" ry="2" />
<text  x="148.45" y="63.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (4,526,000,000 samples, 3.48%)</title><rect x="221.9" y="53" width="41.1" height="15.0" fill="rgb(232,206,10)" rx="2" ry="2" />
<text  x="224.90" y="63.5" >bwt..</text>
</g>
<g >
<title>std::equal_to&lt;long&gt;::operator (12,820,000,000 samples, 9.86%)</title><rect x="995.9" y="133" width="116.3" height="15.0" fill="rgb(220,118,5)" rx="2" ry="2" />
<text  x="998.92" y="143.5" >std::equal_to&lt;..</text>
</g>
<g >
<title>std::_Function_handler&lt;void  (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="341" width="1102.9" height="15.0" fill="rgb(250,213,51)" rx="2" ry="2" />
<text  x="82.78" y="351.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::Destroy (17,000,000 samples, 0.01%)</title><rect x="10.4" y="277" width="0.2" height="15.0" fill="rgb(234,40,16)" rx="2" ry="2" />
<text  x="13.40" y="287.5" ></text>
</g>
<g >
<title>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (637,750,000 samples, 0.49%)</title><rect x="1184.0" y="389" width="5.8" height="15.0" fill="rgb(207,179,51)" rx="2" ry="2" />
<text  x="1187.04" y="399.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateLeafNode (6,486,250,000 samples, 4.99%)</title><rect x="206.0" y="117" width="58.9" height="15.0" fill="rgb(235,45,52)" rx="2" ry="2" />
<text  x="209.02" y="127.5" >bwtree..</text>
</g>
<g >
<title>operator new (78,500,000 samples, 0.06%)</title><rect x="144.5" y="53" width="0.7" height="15.0" fill="rgb(237,109,44)" rx="2" ry="2" />
<text  x="147.53" y="63.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::~LeafNode (617,500,000 samples, 0.47%)</title><rect x="1184.1" y="197" width="5.6" height="15.0" fill="rgb(248,155,41)" rx="2" ry="2" />
<text  x="1187.11" y="207.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (4,843,250,000 samples, 3.72%)</title><rect x="101.9" y="85" width="43.9" height="15.0" fill="rgb(239,67,18)" rx="2" ry="2" />
<text  x="104.86" y="95.5" >void..</text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (40,000,000 samples, 0.03%)</title><rect x="145.3" y="69" width="0.4" height="15.0" fill="rgb(232,211,18)" rx="2" ry="2" />
<text  x="148.30" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (24,000,000 samples, 0.02%)</title><rect x="10.2" y="293" width="0.2" height="15.0" fill="rgb(244,201,51)" rx="2" ry="2" />
<text  x="13.17" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Begin (193,250,000 samples, 0.15%)</title><rect x="85.1" y="101" width="1.8" height="15.0" fill="rgb(253,4,37)" rx="2" ry="2" />
<text  x="88.11" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::FinishPartialSMO (15,000,000 samples, 0.01%)</title><rect x="101.3" y="149" width="0.1" height="15.0" fill="rgb(250,42,15)" rx="2" ry="2" />
<text  x="104.29" y="159.5" ></text>
</g>
<g >
<title>std::function&lt;void  (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="277" width="1102.9" height="15.0" fill="rgb(205,181,9)" rx="2" ry="2" />
<text  x="82.78" y="287.5" >std::function&lt;void </text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (7,690,000,000 samples, 5.91%)</title><rect x="10.0" y="421" width="69.8" height="15.0" fill="rgb(215,65,53)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >void st..</text>
</g>
<g >
<title>main (637,750,000 samples, 0.49%)</title><rect x="1184.0" y="453" width="5.8" height="15.0" fill="rgb(226,54,34)" rx="2" ry="2" />
<text  x="1187.04" y="463.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ValueCmpEqual (2,804,250,000 samples, 2.16%)</title><rect x="1157.2" y="165" width="25.4" height="15.0" fill="rgb(215,101,12)" rx="2" ry="2" />
<text  x="1160.17" y="175.5" >b..</text>
</g>
<g >
<title>RUN_ALL_TESTS (637,750,000 samples, 0.49%)</title><rect x="1184.0" y="437" width="5.8" height="15.0" fill="rgb(249,222,51)" rx="2" ry="2" />
<text  x="1187.04" y="447.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LocateSeparatorByKey (20,500,000 samples, 0.02%)</title><rect x="146.0" y="149" width="0.2" height="15.0" fill="rgb(218,179,9)" rx="2" ry="2" />
<text  x="149.02" y="159.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (29,000,000 samples, 0.02%)</title><rect x="147.6" y="133" width="0.2" height="15.0" fill="rgb(251,59,8)" rx="2" ry="2" />
<text  x="150.57" y="143.5" ></text>
</g>
<g >
<title>____wcstold_l_internal (50,750,000 samples, 0.04%)</title><rect x="1183.6" y="469" width="0.4" height="15.0" fill="rgb(227,103,17)" rx="2" ry="2" />
<text  x="1186.58" y="479.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (556,750,000 samples, 0.43%)</title><rect x="95.4" y="85" width="5.0" height="15.0" fill="rgb(242,74,26)" rx="2" ry="2" />
<text  x="98.35" y="95.5" ></text>
</g>
<g >
<title>std::equal_to&lt;long&gt;::operator (1,839,750,000 samples, 1.41%)</title><rect x="1112.2" y="149" width="16.7" height="15.0" fill="rgb(211,91,26)" rx="2" ry="2" />
<text  x="1115.25" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (3,653,500,000 samples, 2.81%)</title><rect x="111.4" y="53" width="33.1" height="15.0" fill="rgb(242,115,43)" rx="2" ry="2" />
<text  x="114.38" y="63.5" >bw..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (499,750,000 samples, 0.38%)</title><rect x="10.6" y="277" width="4.5" height="15.0" fill="rgb(225,111,3)" rx="2" ry="2" />
<text  x="13.59" y="287.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (6,414,250,000 samples, 4.93%)</title><rect x="206.5" y="85" width="58.2" height="15.0" fill="rgb(253,149,50)" rx="2" ry="2" />
<text  x="209.47" y="95.5" >void b..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ValueCmpEqual (28,023,000,000 samples, 21.55%)</title><rect x="858.0" y="149" width="254.2" height="15.0" fill="rgb(219,34,29)" rx="2" ry="2" />
<text  x="860.98" y="159.5" >bwtree::BwTree&lt;long, long, test::..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, common::WorkerPool::AddThread (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="389" width="1102.9" height="15.0" fill="rgb(252,161,27)" rx="2" ry="2" />
<text  x="82.78" y="399.5" >void std::__invoke_impl&lt;void, common::WorkerPool::AddThread</text>
</g>
<g >
<title>[unknown] (47,500,000 samples, 0.04%)</title><rect x="1182.7" y="469" width="0.4" height="15.0" fill="rgb(220,140,13)" rx="2" ry="2" />
<text  x="1185.69" y="479.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::GetSplitSibling (2,304,000,000 samples, 1.77%)</title><rect x="80.4" y="133" width="20.9" height="15.0" fill="rgb(212,187,19)" rx="2" ry="2" />
<text  x="83.38" y="143.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::compare_exchange_strong (43,750,000 samples, 0.03%)</title><rect x="150.5" y="165" width="0.4" height="15.0" fill="rgb(245,96,36)" rx="2" ry="2" />
<text  x="153.46" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (72,750,000 samples, 0.06%)</title><rect x="146.7" y="149" width="0.7" height="15.0" fill="rgb(245,13,40)" rx="2" ry="2" />
<text  x="149.70" y="159.5" ></text>
</g>
<g >
<title>bwtree_test (130,048,750,000 samples, 100.00%)</title><rect x="10.0" y="485" width="1180.0" height="15.0" fill="rgb(224,203,17)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >bwtree_test</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (476,500,000 samples, 0.37%)</title><rect x="86.9" y="101" width="4.3" height="15.0" fill="rgb(237,81,1)" rx="2" ry="2" />
<text  x="89.86" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateNode (6,488,750,000 samples, 4.99%)</title><rect x="206.0" y="133" width="58.9" height="15.0" fill="rgb(249,4,47)" rx="2" ry="2" />
<text  x="209.00" y="143.5" >bwtree..</text>
</g>
<g >
<title>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (637,750,000 samples, 0.49%)</title><rect x="1184.0" y="309" width="5.8" height="15.0" fill="rgb(243,127,29)" rx="2" ry="2" />
<text  x="1187.04" y="319.5" ></text>
</g>
<g >
<title>common::WorkerPool::AddThread (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="373" width="1102.9" height="15.0" fill="rgb(253,60,45)" rx="2" ry="2" />
<text  x="82.78" y="383.5" >common::WorkerPool::AddThread</text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (11,097,750,000 samples, 8.53%)</title><rect x="757.1" y="133" width="100.7" height="15.0" fill="rgb(218,153,37)" rx="2" ry="2" />
<text  x="760.11" y="143.5" >test::BwTree..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::GetIndexPair (11,250,000 samples, 0.01%)</title><rect x="263.9" y="69" width="0.1" height="15.0" fill="rgb(219,124,30)" rx="2" ry="2" />
<text  x="266.86" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Traverse (113,678,750,000 samples, 87.41%)</title><rect x="151.2" y="181" width="1031.4" height="15.0" fill="rgb(251,78,6)" rx="2" ry="2" />
<text  x="154.17" y="191.5" >bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;,..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (6,456,000,000 samples, 4.96%)</title><rect x="206.1" y="101" width="58.6" height="15.0" fill="rgb(230,198,21)" rx="2" ry="2" />
<text  x="209.09" y="111.5" >bwtree..</text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (132,000,000 samples, 0.10%)</title><rect x="1129.0" y="133" width="1.2" height="15.0" fill="rgb(217,35,21)" rx="2" ry="2" />
<text  x="1132.03" y="143.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (72,750,000 samples, 0.06%)</title><rect x="1129.2" y="117" width="0.7" height="15.0" fill="rgb(222,59,52)" rx="2" ry="2" />
<text  x="1132.24" y="127.5" ></text>
</g>
<g >
<title>__vstrfmon_l_internal (637,750,000 samples, 0.49%)</title><rect x="1184.0" y="469" width="5.8" height="15.0" fill="rgb(245,27,44)" rx="2" ry="2" />
<text  x="1187.04" y="479.5" ></text>
</g>
<g >
<title>testing::internal::UnitTestImpl::RunAllTests (637,750,000 samples, 0.49%)</title><rect x="1184.0" y="373" width="5.8" height="15.0" fill="rgb(208,60,9)" rx="2" ry="2" />
<text  x="1187.04" y="383.5" ></text>
</g>
<g >
<title>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (637,750,000 samples, 0.49%)</title><rect x="1184.0" y="405" width="5.8" height="15.0" fill="rgb(212,119,49)" rx="2" ry="2" />
<text  x="1187.04" y="415.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (6,280,500,000 samples, 4.83%)</title><rect x="206.9" y="69" width="57.0" height="15.0" fill="rgb(217,89,2)" rx="2" ry="2" />
<text  x="209.87" y="79.5" >bwtree..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::FreeEpochDeltaChain (7,673,500,000 samples, 5.90%)</title><rect x="10.1" y="309" width="69.6" height="15.0" fill="rgb(211,164,27)" rx="2" ry="2" />
<text  x="13.12" y="319.5" >bwtree:..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::~EpochManager (625,250,000 samples, 0.48%)</title><rect x="1184.0" y="245" width="5.7" height="15.0" fill="rgb(247,119,40)" rx="2" ry="2" />
<text  x="1187.04" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TryConsolidateNode (4,898,500,000 samples, 3.77%)</title><rect x="101.5" y="149" width="44.4" height="15.0" fill="rgb(226,3,37)" rx="2" ry="2" />
<text  x="104.49" y="159.5" >bwtr..</text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (20,500,000 samples, 0.02%)</title><rect x="1130.0" y="101" width="0.2" height="15.0" fill="rgb(225,86,3)" rx="2" ry="2" />
<text  x="1133.04" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TakeNodeSnapshot (16,250,000 samples, 0.01%)</title><rect x="205.7" y="149" width="0.2" height="15.0" fill="rgb(219,93,30)" rx="2" ry="2" />
<text  x="208.73" y="159.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta*&gt;::load (13,000,000 samples, 0.01%)</title><rect x="10.4" y="261" width="0.1" height="15.0" fill="rgb(254,180,9)" rx="2" ry="2" />
<text  x="13.43" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (29,909,000,000 samples, 23.00%)</title><rect x="414.1" y="149" width="271.4" height="15.0" fill="rgb(218,50,4)" rx="2" ry="2" />
<text  x="417.08" y="159.5" >bwtree::BwTree&lt;long, long, test::BwT..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AdjustNodeSize (2,311,000,000 samples, 1.78%)</title><rect x="80.3" y="149" width="21.0" height="15.0" fill="rgb(249,7,40)" rx="2" ry="2" />
<text  x="83.32" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Delete (7,621,000,000 samples, 5.86%)</title><rect x="79.8" y="197" width="69.2" height="15.0" fill="rgb(213,175,46)" rx="2" ry="2" />
<text  x="82.84" y="207.5" >bwtree:..</text>
</g>
<g >
<title>operator new (305,500,000 samples, 0.23%)</title><rect x="141.8" y="37" width="2.7" height="15.0" fill="rgb(225,10,50)" rx="2" ry="2" />
<text  x="144.76" y="47.5" ></text>
</g>
<g >
<title>testing::TestSuite::Run (637,750,000 samples, 0.49%)</title><rect x="1184.0" y="357" width="5.8" height="15.0" fill="rgb(254,10,10)" rx="2" ry="2" />
<text  x="1187.04" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (141,250,000 samples, 0.11%)</title><rect x="1128.9" y="149" width="1.3" height="15.0" fill="rgb(210,114,49)" rx="2" ry="2" />
<text  x="1131.95" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::FinishPartialSMO (38,000,000 samples, 0.03%)</title><rect x="205.3" y="149" width="0.4" height="15.0" fill="rgb(206,40,10)" rx="2" ry="2" />
<text  x="208.34" y="159.5" ></text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, unsigned long&gt; const*, long&gt; (14,250,000 samples, 0.01%)</title><rect x="266.0" y="101" width="0.1" height="15.0" fill="rgb(222,220,39)" rx="2" ry="2" />
<text  x="269.01" y="111.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="261" width="1102.9" height="15.0" fill="rgb(222,6,4)" rx="2" ry="2" />
<text  x="82.78" y="271.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>____wcstold_l_internal (24,250,000 samples, 0.02%)</title><rect x="1182.8" y="453" width="0.3" height="15.0" fill="rgb(241,134,7)" rx="2" ry="2" />
<text  x="1185.84" y="463.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Begin (101,000,000 samples, 0.08%)</title><rect x="165.3" y="117" width="0.9" height="15.0" fill="rgb(216,60,49)" rx="2" ry="2" />
<text  x="168.28" y="127.5" ></text>
</g>
<g >
<title>std::function&lt;void  (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="357" width="1102.9" height="15.0" fill="rgb(242,5,18)" rx="2" ry="2" />
<text  x="82.78" y="367.5" >std::function&lt;void </text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (25,250,000 samples, 0.02%)</title><rect x="264.2" y="37" width="0.3" height="15.0" fill="rgb(214,156,9)" rx="2" ry="2" />
<text  x="267.24" y="47.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateSiblingChain (15,250,000 samples, 0.01%)</title><rect x="857.8" y="149" width="0.2" height="15.0" fill="rgb(209,187,48)" rx="2" ry="2" />
<text  x="860.81" y="159.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, test::MultiThreadTestUtil::RunThreadsUntilFinish (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="325" width="1102.9" height="15.0" fill="rgb(212,67,47)" rx="2" ry="2" />
<text  x="82.78" y="335.5" >std::enable_if&lt;is_invocable_r_v&lt;void, test::MultiThreadTestUtil::RunThreadsUntilFinish</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (71,500,000 samples, 0.05%)</title><rect x="81.5" y="117" width="0.7" height="15.0" fill="rgb(215,205,17)" rx="2" ry="2" />
<text  x="84.52" y="127.5" ></text>
</g>
<g >
<title>____wcstod_l_internal (16,750,000 samples, 0.01%)</title><rect x="1183.1" y="469" width="0.2" height="15.0" fill="rgb(218,34,13)" rx="2" ry="2" />
<text  x="1186.12" y="479.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetNode (12,000,000 samples, 0.01%)</title><rect x="205.8" y="133" width="0.1" height="15.0" fill="rgb(247,196,18)" rx="2" ry="2" />
<text  x="208.76" y="143.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="437" width="1102.9" height="15.0" fill="rgb(230,51,10)" rx="2" ry="2" />
<text  x="82.78" y="447.5" >std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (24,750,000 samples, 0.02%)</title><rect x="205.4" y="133" width="0.3" height="15.0" fill="rgb(210,134,3)" rx="2" ry="2" />
<text  x="208.45" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::InlineAllocate (12,250,000 samples, 0.01%)</title><rect x="79.9" y="181" width="0.1" height="15.0" fill="rgb(225,107,8)" rx="2" ry="2" />
<text  x="82.91" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (31,750,000 samples, 0.02%)</title><rect x="148.6" y="149" width="0.3" height="15.0" fill="rgb(227,182,19)" rx="2" ry="2" />
<text  x="151.57" y="159.5" ></text>
</g>
<g >
<title>testing::TestInfo::Run (637,750,000 samples, 0.49%)</title><rect x="1184.0" y="341" width="5.8" height="15.0" fill="rgb(236,1,37)" rx="2" ry="2" />
<text  x="1187.04" y="351.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InstallNodeToReplace (53,000,000 samples, 0.04%)</title><rect x="150.4" y="181" width="0.5" height="15.0" fill="rgb(228,53,44)" rx="2" ry="2" />
<text  x="153.39" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Destroy (19,750,000 samples, 0.02%)</title><rect x="10.4" y="293" width="0.2" height="15.0" fill="rgb(239,182,51)" rx="2" ry="2" />
<text  x="13.39" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::ThreadFunc (7,690,000,000 samples, 5.91%)</title><rect x="10.0" y="357" width="69.8" height="15.0" fill="rgb(252,209,7)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >bwtree:..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (4,754,000,000 samples, 3.66%)</title><rect x="102.1" y="69" width="43.1" height="15.0" fill="rgb(234,31,0)" rx="2" ry="2" />
<text  x="105.11" y="79.5" >bwtr..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ValueCmpEqual (74,000,000 samples, 0.06%)</title><rect x="147.9" y="149" width="0.6" height="15.0" fill="rgb(253,98,1)" rx="2" ry="2" />
<text  x="150.87" y="159.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, test::MultiThreadTestUtil::RunThreadsUntilFinish (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="309" width="1102.9" height="15.0" fill="rgb(241,76,42)" rx="2" ry="2" />
<text  x="82.78" y="319.5" >void std::__invoke_impl&lt;void, test::MultiThreadTestUtil::RunThreadsUntilFinish</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (76,500,000 samples, 0.06%)</title><rect x="166.2" y="117" width="0.7" height="15.0" fill="rgb(218,33,7)" rx="2" ry="2" />
<text  x="169.20" y="127.5" ></text>
</g>
<g >
<title>____wcstof_l_internal (33,000,000 samples, 0.03%)</title><rect x="1183.3" y="469" width="0.3" height="15.0" fill="rgb(245,212,42)" rx="2" ry="2" />
<text  x="1186.28" y="479.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (17,500,000 samples, 0.01%)</title><rect x="145.5" y="37" width="0.2" height="15.0" fill="rgb(246,144,1)" rx="2" ry="2" />
<text  x="148.49" y="47.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (129,243,250,000 samples, 99.38%)</title><rect x="10.0" y="469" width="1172.7" height="15.0" fill="rgb(224,62,47)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >[libstdc++.so.6.0.30]</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (388,500,000 samples, 0.30%)</title><rect x="1186.2" y="165" width="3.5" height="15.0" fill="rgb(251,130,4)" rx="2" ry="2" />
<text  x="1189.19" y="175.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (2,951,500,000 samples, 2.27%)</title><rect x="1130.3" y="149" width="26.8" height="15.0" fill="rgb(216,119,29)" rx="2" ry="2" />
<text  x="1133.32" y="159.5" >t..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="453" width="1102.9" height="15.0" fill="rgb(252,53,11)" rx="2" ry="2" />
<text  x="82.78" y="463.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::copy_backward&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (15,750,000 samples, 0.01%)</title><rect x="264.0" y="53" width="0.2" height="15.0" fill="rgb(207,116,21)" rx="2" ry="2" />
<text  x="267.03" y="63.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::DeltaNode::DeltaNode (12,250,000 samples, 0.01%)</title><rect x="151.0" y="149" width="0.1" height="15.0" fill="rgb(240,201,52)" rx="2" ry="2" />
<text  x="153.98" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::ClearEpoch (7,684,000,000 samples, 5.91%)</title><rect x="10.0" y="325" width="69.8" height="15.0" fill="rgb(214,26,18)" rx="2" ry="2" />
<text  x="13.03" y="335.5" >bwtree:..</text>
</g>
<g >
<title>std::equal_to&lt;long&gt;::operator (37,250,000 samples, 0.03%)</title><rect x="148.2" y="133" width="0.3" height="15.0" fill="rgb(251,146,12)" rx="2" ry="2" />
<text  x="151.20" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (34,500,000 samples, 0.03%)</title><rect x="264.2" y="53" width="0.3" height="15.0" fill="rgb(207,63,8)" rx="2" ry="2" />
<text  x="267.18" y="63.5" ></text>
</g>
<g >
<title>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (637,750,000 samples, 0.49%)</title><rect x="1184.0" y="293" width="5.8" height="15.0" fill="rgb(230,116,41)" rx="2" ry="2" />
<text  x="1187.04" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::ClearEpoch (625,250,000 samples, 0.48%)</title><rect x="1184.0" y="229" width="5.7" height="15.0" fill="rgb(210,93,7)" rx="2" ry="2" />
<text  x="1187.04" y="239.5" ></text>
</g>
<g >
<title>testing::Test::Run (637,750,000 samples, 0.49%)</title><rect x="1184.0" y="325" width="5.8" height="15.0" fill="rgb(248,194,7)" rx="2" ry="2" />
<text  x="1187.04" y="335.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::~BwTree (625,250,000 samples, 0.48%)</title><rect x="1184.0" y="261" width="5.7" height="15.0" fill="rgb(224,187,36)" rx="2" ry="2" />
<text  x="1187.04" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (33,750,000 samples, 0.03%)</title><rect x="1184.1" y="181" width="0.3" height="15.0" fill="rgb(237,116,49)" rx="2" ry="2" />
<text  x="1187.11" y="191.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (1,032,250,000 samples, 0.79%)</title><rect x="194.2" y="85" width="9.4" height="15.0" fill="rgb(220,229,44)" rx="2" ry="2" />
<text  x="197.22" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafInsertNode::LeafInsertNode (30,250,000 samples, 0.02%)</title><rect x="150.9" y="181" width="0.2" height="15.0" fill="rgb(218,100,31)" rx="2" ry="2" />
<text  x="153.87" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (1,025,000,000 samples, 0.79%)</title><rect x="177.7" y="101" width="9.3" height="15.0" fill="rgb(232,55,25)" rx="2" ry="2" />
<text  x="180.71" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (12,250,000 samples, 0.01%)</title><rect x="414.0" y="149" width="0.1" height="15.0" fill="rgb(244,9,1)" rx="2" ry="2" />
<text  x="416.96" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator::operator (65,000,000 samples, 0.05%)</title><rect x="1129.3" y="101" width="0.6" height="15.0" fill="rgb(214,101,26)" rx="2" ry="2" />
<text  x="1132.30" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::Allocate (112,250,000 samples, 0.09%)</title><rect x="149.3" y="165" width="1.0" height="15.0" fill="rgb(250,203,23)" rx="2" ry="2" />
<text  x="152.29" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (833,250,000 samples, 0.64%)</title><rect x="151.3" y="165" width="7.6" height="15.0" fill="rgb(231,193,21)" rx="2" ry="2" />
<text  x="154.33" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AdjustNodeSize (4,436,250,000 samples, 3.41%)</title><rect x="165.1" y="149" width="40.2" height="15.0" fill="rgb(206,31,20)" rx="2" ry="2" />
<text  x="168.08" y="159.5" >bwt..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateNode (4,894,000,000 samples, 3.76%)</title><rect x="101.5" y="133" width="44.4" height="15.0" fill="rgb(206,31,39)" rx="2" ry="2" />
<text  x="104.52" y="143.5" >bwtr..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::PerformGarbageCollection (7,689,750,000 samples, 5.91%)</title><rect x="10.0" y="341" width="69.8" height="15.0" fill="rgb(250,121,35)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >bwtree:..</text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (58,000,000 samples, 0.04%)</title><rect x="265.6" y="133" width="0.6" height="15.0" fill="rgb(238,150,46)" rx="2" ry="2" />
<text  x="268.64" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::FindSplitPoint (4,127,750,000 samples, 3.17%)</title><rect x="167.9" y="117" width="37.4" height="15.0" fill="rgb(241,73,43)" rx="2" ry="2" />
<text  x="170.87" y="127.5" >bwt..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreaterEqual (12,750,000 samples, 0.01%)</title><rect x="265.5" y="149" width="0.1" height="15.0" fill="rgb(212,173,3)" rx="2" ry="2" />
<text  x="268.46" y="159.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (15,250,000 samples, 0.01%)</title><rect x="148.6" y="117" width="0.2" height="15.0" fill="rgb(246,205,1)" rx="2" ry="2" />
<text  x="151.63" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (18,993,250,000 samples, 14.60%)</title><rect x="685.5" y="149" width="172.3" height="15.0" fill="rgb(251,107,31)" rx="2" ry="2" />
<text  x="688.47" y="159.5" >bwtree::BwTree&lt;long, l..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (106,250,000 samples, 0.08%)</title><rect x="166.9" y="117" width="1.0" height="15.0" fill="rgb(234,222,2)" rx="2" ry="2" />
<text  x="169.90" y="127.5" ></text>
</g>
<g >
<title>BwtreeTest_ConcurrentSkewedDelete_20_Test::TestBody (121,553,000,000 samples, 93.47%)</title><rect x="79.8" y="213" width="1102.9" height="15.0" fill="rgb(238,68,7)" rx="2" ry="2" />
<text  x="82.78" y="223.5" >BwtreeTest_ConcurrentSkewedDelete_20_Test::TestBody</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::TryAllocate (85,000,000 samples, 0.07%)</title><rect x="149.5" y="149" width="0.8" height="15.0" fill="rgb(254,43,10)" rx="2" ry="2" />
<text  x="152.49" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::GetSplitSibling (4,415,250,000 samples, 3.40%)</title><rect x="165.3" y="133" width="40.0" height="15.0" fill="rgb(217,110,3)" rx="2" ry="2" />
<text  x="168.27" y="143.5" >bwt..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (1,826,250,000 samples, 1.40%)</title><rect x="187.0" y="101" width="16.6" height="15.0" fill="rgb(226,108,10)" rx="2" ry="2" />
<text  x="190.01" y="111.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (95,000,000 samples, 0.07%)</title><rect x="100.4" y="101" width="0.9" height="15.0" fill="rgb(221,120,51)" rx="2" ry="2" />
<text  x="103.42" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (1,016,000,000 samples, 0.78%)</title><rect x="91.2" y="101" width="9.2" height="15.0" fill="rgb(239,45,22)" rx="2" ry="2" />
<text  x="94.19" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (4,874,000,000 samples, 3.75%)</title><rect x="101.6" y="101" width="44.2" height="15.0" fill="rgb(227,100,30)" rx="2" ry="2" />
<text  x="104.58" y="111.5" >bwtr..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LoadNodeID (11,015,500,000 samples, 8.47%)</title><rect x="165.0" y="165" width="100.0" height="15.0" fill="rgb(227,139,10)" rx="2" ry="2" />
<text  x="168.02" y="175.5" >bwtree::BwTr..</text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (16,250,000 samples, 0.01%)</title><rect x="146.0" y="133" width="0.2" height="15.0" fill="rgb(227,120,13)" rx="2" ry="2" />
<text  x="149.03" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateInnerNode (159,500,000 samples, 0.12%)</title><rect x="265.0" y="165" width="1.4" height="15.0" fill="rgb(206,217,9)" rx="2" ry="2" />
<text  x="267.97" y="175.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (13,750,000 samples, 0.01%)</title><rect x="1129.8" y="85" width="0.1" height="15.0" fill="rgb(230,55,43)" rx="2" ry="2" />
<text  x="1132.77" y="95.5" ></text>
</g>
<g >
<title>BwtreeTest_ConcurrentSkewedDelete_20_Test::TestBody (637,750,000 samples, 0.49%)</title><rect x="1184.0" y="277" width="5.8" height="15.0" fill="rgb(237,213,29)" rx="2" ry="2" />
<text  x="1187.04" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (7,690,000,000 samples, 5.91%)</title><rect x="10.0" y="373" width="69.8" height="15.0" fill="rgb(212,200,40)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >bwtree:..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateLeafNode (98,162,500,000 samples, 75.48%)</title><rect x="266.4" y="165" width="890.7" height="15.0" fill="rgb(239,178,21)" rx="2" ry="2" />
<text  x="269.42" y="175.5" >bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, ..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LocateSeparatorByKey (75,000,000 samples, 0.06%)</title><rect x="265.6" y="149" width="0.7" height="15.0" fill="rgb(218,30,25)" rx="2" ry="2" />
<text  x="268.58" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::~ElasticNode (583,750,000 samples, 0.45%)</title><rect x="1184.4" y="181" width="5.3" height="15.0" fill="rgb(208,173,10)" rx="2" ry="2" />
<text  x="1187.42" y="191.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (7,690,000,000 samples, 5.91%)</title><rect x="10.0" y="405" width="69.8" height="15.0" fill="rgb(252,21,18)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >std::__..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateInnerNode (33,000,000 samples, 0.03%)</title><rect x="145.9" y="165" width="0.3" height="15.0" fill="rgb(207,130,15)" rx="2" ry="2" />
<text  x="148.93" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (19,000,000 samples, 0.01%)</title><rect x="264.5" y="69" width="0.2" height="15.0" fill="rgb(237,5,49)" rx="2" ry="2" />
<text  x="267.49" y="79.5" ></text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (29,000,000 samples, 0.02%)</title><rect x="1130.0" y="117" width="0.2" height="15.0" fill="rgb(250,49,20)" rx="2" ry="2" />
<text  x="1132.96" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateLeafNode (294,750,000 samples, 0.23%)</title><rect x="146.2" y="165" width="2.7" height="15.0" fill="rgb(232,57,22)" rx="2" ry="2" />
<text  x="149.23" y="175.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (7,690,000,000 samples, 5.91%)</title><rect x="10.0" y="389" width="69.8" height="15.0" fill="rgb(214,9,7)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >void st..</text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::__upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; &gt; (46,500,000 samples, 0.04%)</title><rect x="265.7" y="117" width="0.4" height="15.0" fill="rgb(231,64,26)" rx="2" ry="2" />
<text  x="268.71" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Begin (74,250,000 samples, 0.06%)</title><rect x="80.4" y="117" width="0.7" height="15.0" fill="rgb(216,136,16)" rx="2" ry="2" />
<text  x="83.38" y="127.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (189,250,000 samples, 0.15%)</title><rect x="203.6" y="101" width="1.7" height="15.0" fill="rgb(253,162,36)" rx="2" ry="2" />
<text  x="206.60" y="111.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (28,750,000 samples, 0.02%)</title><rect x="148.6" y="133" width="0.2" height="15.0" fill="rgb(215,60,3)" rx="2" ry="2" />
<text  x="151.59" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::~LeafNode (7,622,750,000 samples, 5.86%)</title><rect x="10.6" y="293" width="69.1" height="15.0" fill="rgb(210,100,53)" rx="2" ry="2" />
<text  x="13.58" y="303.5" >bwtree:..</text>
</g>
<g >
<title>testing::UnitTest::Run (637,750,000 samples, 0.49%)</title><rect x="1184.0" y="421" width="5.8" height="15.0" fill="rgb(232,79,34)" rx="2" ry="2" />
<text  x="1187.04" y="431.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread (121,553,250,000 samples, 93.47%)</title><rect x="79.8" y="421" width="1102.9" height="15.0" fill="rgb(231,24,42)" rx="2" ry="2" />
<text  x="82.78" y="431.5" >void std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Insert (113,918,000,000 samples, 87.60%)</title><rect x="149.0" y="197" width="1033.6" height="15.0" fill="rgb(245,108,12)" rx="2" ry="2" />
<text  x="152.00" y="207.5" >bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;,..</text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (15,000,000 samples, 0.01%)</title><rect x="145.7" y="69" width="0.1" height="15.0" fill="rgb(234,54,47)" rx="2" ry="2" />
<text  x="148.66" y="79.5" ></text>
</g>
<g >
<title>std::atomic&lt;char*&gt;::load (70,000,000 samples, 0.05%)</title><rect x="149.6" y="133" width="0.6" height="15.0" fill="rgb(243,182,34)" rx="2" ry="2" />
<text  x="152.60" y="143.5" ></text>
</g>
</g>
</svg>
