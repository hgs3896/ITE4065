<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="630.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="613" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="613" > </text>
<g id="frames">
<g >
<title>std::_Function_handler&lt;void  (237,500,000 samples, 34.10%)</title><rect x="10.0" y="341" width="402.4" height="15.0" fill="rgb(240,193,13)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetNode (4,500,000 samples, 0.65%)</title><rect x="63.8" y="213" width="7.6" height="15.0" fill="rgb(210,214,28)" rx="2" ry="2" />
<text  x="66.79" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreaterEqual (250,000 samples, 0.04%)</title><rect x="352.6" y="213" width="0.5" height="15.0" fill="rgb(243,205,22)" rx="2" ry="2" />
<text  x="355.65" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateInnerNode (27,750,000 samples, 3.98%)</title><rect x="308.6" y="245" width="47.0" height="15.0" fill="rgb(226,189,33)" rx="2" ry="2" />
<text  x="311.60" y="255.5" >bwtr..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateInnerNode (750,000 samples, 0.11%)</title><rect x="257.8" y="197" width="1.2" height="15.0" fill="rgb(253,201,35)" rx="2" ry="2" />
<text  x="260.77" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::~LeafNode (4,500,000 samples, 0.65%)</title><rect x="434.0" y="277" width="7.6" height="15.0" fill="rgb(221,204,45)" rx="2" ry="2" />
<text  x="436.97" y="287.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (500,000 samples, 0.07%)</title><rect x="101.9" y="69" width="0.9" height="15.0" fill="rgb(249,179,24)" rx="2" ry="2" />
<text  x="104.91" y="79.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (9,250,000 samples, 1.33%)</title><rect x="173.9" y="229" width="15.7" height="15.0" fill="rgb(250,80,31)" rx="2" ry="2" />
<text  x="176.91" y="239.5" ></text>
</g>
<g >
<title>int&amp; std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (1,500,000 samples, 0.22%)</title><rect x="448.8" y="325" width="2.5" height="15.0" fill="rgb(224,37,50)" rx="2" ry="2" />
<text  x="451.79" y="335.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetNextNodeID (250,000 samples, 0.04%)</title><rect x="425.1" y="277" width="0.4" height="15.0" fill="rgb(248,129,19)" rx="2" ry="2" />
<text  x="428.08" y="287.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (5,750,000 samples, 0.83%)</title><rect x="387.4" y="197" width="9.7" height="15.0" fill="rgb(229,112,15)" rx="2" ry="2" />
<text  x="390.38" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetLowKeyPair (750,000 samples, 0.11%)</title><rect x="17.2" y="261" width="1.3" height="15.0" fill="rgb(232,72,12)" rx="2" ry="2" />
<text  x="20.20" y="271.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order2 (250,000 samples, 0.04%)</title><rect x="110.4" y="133" width="0.4" height="15.0" fill="rgb(238,47,15)" rx="2" ry="2" />
<text  x="113.38" y="143.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, test::MultiThreadTestUtil::RunThreadsUntilFinish (237,500,000 samples, 34.10%)</title><rect x="10.0" y="389" width="402.4" height="15.0" fill="rgb(247,201,13)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >void std::__invoke_impl&lt;void, test::MultiThreadTestUti..</text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (2,000,000 samples, 0.29%)</title><rect x="181.1" y="197" width="3.4" height="15.0" fill="rgb(207,56,28)" rx="2" ry="2" />
<text  x="184.11" y="207.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order (250,000 samples, 0.04%)</title><rect x="62.9" y="165" width="0.5" height="15.0" fill="rgb(245,126,7)" rx="2" ry="2" />
<text  x="65.94" y="175.5" ></text>
</g>
<g >
<title>int&amp;&amp; std::forward&lt;int&gt; (250,000 samples, 0.04%)</title><rect x="448.8" y="309" width="0.4" height="15.0" fill="rgb(243,215,44)" rx="2" ry="2" />
<text  x="451.79" y="319.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::LeaveEpoch (2,250,000 samples, 0.32%)</title><rect x="211.2" y="261" width="3.8" height="15.0" fill="rgb(245,102,46)" rx="2" ry="2" />
<text  x="214.18" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (250,000 samples, 0.04%)</title><rect x="60.8" y="53" width="0.4" height="15.0" fill="rgb(205,37,40)" rx="2" ry="2" />
<text  x="63.83" y="63.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInnerRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInner (250,000 samples, 0.04%)</title><rect x="62.1" y="133" width="0.4" height="15.0" fill="rgb(213,20,41)" rx="2" ry="2" />
<text  x="65.10" y="143.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* const&amp; std::min&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (500,000 samples, 0.07%)</title><rect x="354.8" y="229" width="0.8" height="15.0" fill="rgb(225,110,31)" rx="2" ry="2" />
<text  x="357.77" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (250,000 samples, 0.04%)</title><rect x="259.9" y="165" width="0.4" height="15.0" fill="rgb(254,13,18)" rx="2" ry="2" />
<text  x="262.89" y="175.5" ></text>
</g>
<g >
<title>testing::UnitTest::Run (452,250,000 samples, 64.93%)</title><rect x="422.5" y="501" width="766.2" height="15.0" fill="rgb(208,222,18)" rx="2" ry="2" />
<text  x="425.53" y="511.5" >testing::UnitTest::Run</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (500,000 samples, 0.07%)</title><rect x="261.2" y="165" width="0.8" height="15.0" fill="rgb(210,165,7)" rx="2" ry="2" />
<text  x="264.16" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::DeltaNode::DeltaNode (250,000 samples, 0.04%)</title><rect x="42.6" y="229" width="0.4" height="15.0" fill="rgb(219,130,33)" rx="2" ry="2" />
<text  x="45.61" y="239.5" ></text>
</g>
<g >
<title>_dl_make_tlsdesc_dynamic (250,000 samples, 0.04%)</title><rect x="415.8" y="533" width="0.4" height="15.0" fill="rgb(211,51,44)" rx="2" ry="2" />
<text  x="418.76" y="543.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (1,750,000 samples, 0.25%)</title><rect x="85.8" y="133" width="3.0" height="15.0" fill="rgb(213,188,1)" rx="2" ry="2" />
<text  x="88.81" y="143.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (250,000 samples, 0.04%)</title><rect x="59.6" y="133" width="0.4" height="15.0" fill="rgb(219,10,23)" rx="2" ry="2" />
<text  x="62.55" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Adaptor&lt;std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;, double&gt;::_Adaptor (250,000 samples, 0.04%)</title><rect x="1138.8" y="277" width="0.4" height="15.0" fill="rgb(250,42,3)" rx="2" ry="2" />
<text  x="1141.75" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InstallNodeToReplace (3,750,000 samples, 0.54%)</title><rect x="215.0" y="261" width="6.3" height="15.0" fill="rgb(206,16,21)" rx="2" ry="2" />
<text  x="218.00" y="271.5" ></text>
</g>
<g >
<title>std::equal_to&lt;long&gt;::operator (500,000 samples, 0.07%)</title><rect x="173.1" y="213" width="0.8" height="15.0" fill="rgb(250,195,5)" rx="2" ry="2" />
<text  x="176.07" y="223.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (750,000 samples, 0.11%)</title><rect x="140.5" y="149" width="1.2" height="15.0" fill="rgb(253,122,14)" rx="2" ry="2" />
<text  x="143.45" y="159.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, unsigned long&gt; const*&gt;::iterator_category std::__iterator_category&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (250,000 samples, 0.04%)</title><rect x="143.0" y="165" width="0.4" height="15.0" fill="rgb(252,100,16)" rx="2" ry="2" />
<text  x="145.99" y="175.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, BwtreeTest_ConcurrentSkewedDelete_00_Test::TestBody (237,500,000 samples, 34.10%)</title><rect x="10.0" y="325" width="402.4" height="15.0" fill="rgb(229,206,15)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >std::enable_if&lt;is_invocable_r_v&lt;void, BwtreeTest_Concu..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetItemCount (250,000 samples, 0.04%)</title><rect x="198.9" y="261" width="0.4" height="15.0" fill="rgb(228,143,51)" rx="2" ry="2" />
<text  x="201.90" y="271.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order2 (500,000 samples, 0.07%)</title><rect x="38.8" y="213" width="0.8" height="15.0" fill="rgb(226,68,33)" rx="2" ry="2" />
<text  x="41.80" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::AddGarbageNode (500,000 samples, 0.07%)</title><rect x="304.4" y="181" width="0.8" height="15.0" fill="rgb(222,76,50)" rx="2" ry="2" />
<text  x="307.36" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::DeltaNode::DeltaNode (1,000,000 samples, 0.14%)</title><rect x="223.0" y="229" width="1.7" height="15.0" fill="rgb(232,217,44)" rx="2" ry="2" />
<text  x="226.04" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTreeBase::GetInnerNodeSizeUpperThreshold (250,000 samples, 0.04%)</title><rect x="237.0" y="213" width="0.4" height="15.0" fill="rgb(242,203,39)" rx="2" ry="2" />
<text  x="240.02" y="223.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order (1,000,000 samples, 0.14%)</title><rect x="38.4" y="229" width="1.7" height="15.0" fill="rgb(211,117,43)" rx="2" ry="2" />
<text  x="41.38" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::LeafDataNode (250,000 samples, 0.04%)</title><rect x="42.6" y="245" width="0.4" height="15.0" fill="rgb(215,26,49)" rx="2" ry="2" />
<text  x="45.61" y="255.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order (250,000 samples, 0.04%)</title><rect x="215.4" y="245" width="0.4" height="15.0" fill="rgb(245,192,2)" rx="2" ry="2" />
<text  x="218.42" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; __gnu_cxx::__ops::__val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (1,000,000 samples, 0.14%)</title><rect x="131.6" y="197" width="1.7" height="15.0" fill="rgb(234,23,38)" rx="2" ry="2" />
<text  x="134.56" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator::operator (250,000 samples, 0.04%)</title><rect x="61.7" y="53" width="0.4" height="15.0" fill="rgb(224,191,40)" rx="2" ry="2" />
<text  x="64.67" y="63.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LocateSeparatorByKey (12,000,000 samples, 1.72%)</title><rect x="328.9" y="229" width="20.4" height="15.0" fill="rgb(227,121,37)" rx="2" ry="2" />
<text  x="331.93" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateLeafNode (250,000 samples, 0.04%)</title><rect x="62.5" y="181" width="0.4" height="15.0" fill="rgb(231,133,25)" rx="2" ry="2" />
<text  x="65.52" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTreeBase::GetLeafDeltaChainLengthThreshold (250,000 samples, 0.04%)</title><rect x="308.2" y="213" width="0.4" height="15.0" fill="rgb(224,36,31)" rx="2" ry="2" />
<text  x="311.18" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator::operator (1,250,000 samples, 0.18%)</title><rect x="301.0" y="101" width="2.1" height="15.0" fill="rgb(230,161,25)" rx="2" ry="2" />
<text  x="303.98" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LocateSeparatorByKey (10,500,000 samples, 1.51%)</title><rect x="130.3" y="229" width="17.8" height="15.0" fill="rgb(235,174,15)" rx="2" ry="2" />
<text  x="133.29" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::Begin (500,000 samples, 0.07%)</title><rect x="130.3" y="213" width="0.8" height="15.0" fill="rgb(246,205,38)" rx="2" ry="2" />
<text  x="133.29" y="223.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (250,000 samples, 0.04%)</title><rect x="184.1" y="165" width="0.4" height="15.0" fill="rgb(211,116,44)" rx="2" ry="2" />
<text  x="187.08" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (500,000 samples, 0.07%)</title><rect x="445.0" y="309" width="0.8" height="15.0" fill="rgb(206,158,1)" rx="2" ry="2" />
<text  x="447.98" y="319.5" ></text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (10,000,000 samples, 1.44%)</title><rect x="90.1" y="149" width="16.9" height="15.0" fill="rgb(246,181,40)" rx="2" ry="2" />
<text  x="93.05" y="159.5" ></text>
</g>
<g >
<title>long&amp;&amp; std::forward&lt;long&gt; (250,000 samples, 0.04%)</title><rect x="303.9" y="133" width="0.5" height="15.0" fill="rgb(254,60,10)" rx="2" ry="2" />
<text  x="306.94" y="143.5" ></text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (250,000 samples, 0.04%)</title><rect x="60.8" y="69" width="0.4" height="15.0" fill="rgb(215,223,26)" rx="2" ry="2" />
<text  x="63.83" y="79.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order (500,000 samples, 0.07%)</title><rect x="110.4" y="149" width="0.8" height="15.0" fill="rgb(226,168,18)" rx="2" ry="2" />
<text  x="113.38" y="159.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, unsigned long&gt; const*&gt;::difference_type std::distance&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (500,000 samples, 0.07%)</title><rect x="341.2" y="181" width="0.9" height="15.0" fill="rgb(210,70,24)" rx="2" ry="2" />
<text  x="344.21" y="191.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (2,750,000 samples, 0.39%)</title><rect x="100.2" y="101" width="4.7" height="15.0" fill="rgb(228,49,12)" rx="2" ry="2" />
<text  x="103.22" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::GetSize (250,000 samples, 0.04%)</title><rect x="131.1" y="213" width="0.5" height="15.0" fill="rgb(215,137,30)" rx="2" ry="2" />
<text  x="134.13" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::Begin (250,000 samples, 0.04%)</title><rect x="423.0" y="309" width="0.4" height="15.0" fill="rgb(252,50,5)" rx="2" ry="2" />
<text  x="425.96" y="319.5" ></text>
</g>
<g >
<title>double std::uniform_real_distribution&lt;double&gt;::operator (2,000,000 samples, 0.29%)</title><rect x="1138.3" y="293" width="3.4" height="15.0" fill="rgb(207,169,14)" rx="2" ry="2" />
<text  x="1141.33" y="303.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::compare_exchange_strong (500,000 samples, 0.07%)</title><rect x="235.8" y="197" width="0.8" height="15.0" fill="rgb(227,202,20)" rx="2" ry="2" />
<text  x="238.75" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::ClearEpoch (9,750,000 samples, 1.40%)</title><rect x="425.9" y="309" width="16.5" height="15.0" fill="rgb(223,178,41)" rx="2" ry="2" />
<text  x="428.92" y="319.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (250,000 samples, 0.04%)</title><rect x="76.5" y="149" width="0.4" height="15.0" fill="rgb(251,52,51)" rx="2" ry="2" />
<text  x="79.50" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::~BwTree (9,750,000 samples, 1.40%)</title><rect x="425.9" y="341" width="16.5" height="15.0" fill="rgb(245,219,53)" rx="2" ry="2" />
<text  x="428.92" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; __gnu_cxx::__ops::__val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (1,250,000 samples, 0.18%)</title><rect x="331.9" y="197" width="2.1" height="15.0" fill="rgb(236,151,34)" rx="2" ry="2" />
<text  x="334.90" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (1,000,000 samples, 0.14%)</title><rect x="165.9" y="229" width="1.7" height="15.0" fill="rgb(249,141,34)" rx="2" ry="2" />
<text  x="168.87" y="239.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (750,000 samples, 0.11%)</title><rect x="108.3" y="149" width="1.2" height="15.0" fill="rgb(205,2,38)" rx="2" ry="2" />
<text  x="111.26" y="159.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (1,000,000 samples, 0.14%)</title><rect x="395.0" y="165" width="1.7" height="15.0" fill="rgb(243,2,17)" rx="2" ry="2" />
<text  x="398.00" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator- (250,000 samples, 0.04%)</title><rect x="449.6" y="293" width="0.5" height="15.0" fill="rgb(207,68,4)" rx="2" ry="2" />
<text  x="452.64" y="303.5" ></text>
</g>
<g >
<title>testing::Test::Run (452,250,000 samples, 64.93%)</title><rect x="422.5" y="405" width="766.2" height="15.0" fill="rgb(251,145,8)" rx="2" ry="2" />
<text  x="425.53" y="415.5" >testing::Test::Run</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::GetNodeHeader (750,000 samples, 0.11%)</title><rect x="123.9" y="229" width="1.3" height="15.0" fill="rgb(211,22,5)" rx="2" ry="2" />
<text  x="126.93" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ValueCmpEqual (2,000,000 samples, 0.29%)</title><rect x="376.8" y="229" width="3.4" height="15.0" fill="rgb(238,73,36)" rx="2" ry="2" />
<text  x="379.79" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator* (250,000 samples, 0.04%)</title><rect x="449.2" y="293" width="0.4" height="15.0" fill="rgb(228,73,4)" rx="2" ry="2" />
<text  x="452.22" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (25,750,000 samples, 3.70%)</title><rect x="451.3" y="325" width="43.7" height="15.0" fill="rgb(249,163,16)" rx="2" ry="2" />
<text  x="454.34" y="335.5" >std:..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::JoinEpoch (2,000,000 samples, 0.29%)</title><rect x="207.8" y="261" width="3.4" height="15.0" fill="rgb(223,32,28)" rx="2" ry="2" />
<text  x="210.80" y="271.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (250,000 samples, 0.04%)</title><rect x="446.7" y="293" width="0.4" height="15.0" fill="rgb(229,161,39)" rx="2" ry="2" />
<text  x="449.68" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator::operator (1,500,000 samples, 0.22%)</title><rect x="182.0" y="181" width="2.5" height="15.0" fill="rgb(237,22,4)" rx="2" ry="2" />
<text  x="184.96" y="191.5" ></text>
</g>
<g >
<title>std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;::operator (750,000 samples, 0.11%)</title><rect x="1140.4" y="245" width="1.3" height="15.0" fill="rgb(229,183,28)" rx="2" ry="2" />
<text  x="1143.45" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (500,000 samples, 0.07%)</title><rect x="446.3" y="309" width="0.8" height="15.0" fill="rgb(212,224,50)" rx="2" ry="2" />
<text  x="449.25" y="319.5" ></text>
</g>
<g >
<title>std::operator&amp; (250,000 samples, 0.04%)</title><rect x="220.9" y="245" width="0.4" height="15.0" fill="rgb(228,10,19)" rx="2" ry="2" />
<text  x="223.93" y="255.5" ></text>
</g>
<g >
<title>__vstrfmon_l_internal (452,250,000 samples, 64.93%)</title><rect x="422.5" y="549" width="766.2" height="15.0" fill="rgb(238,4,3)" rx="2" ry="2" />
<text  x="425.53" y="559.5" >__vstrfmon_l_internal</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeMetaData::NodeMetaData (250,000 samples, 0.04%)</title><rect x="260.7" y="117" width="0.5" height="15.0" fill="rgb(239,191,13)" rx="2" ry="2" />
<text  x="263.74" y="127.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, long&gt; const*&gt;::difference_type std::distance&lt;std::pair&lt;long, long&gt; const*&gt; (250,000 samples, 0.04%)</title><rect x="303.1" y="117" width="0.4" height="15.0" fill="rgb(216,74,6)" rx="2" ry="2" />
<text  x="306.09" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Insert (126,250,000 samples, 18.13%)</title><rect x="196.4" y="277" width="213.9" height="15.0" fill="rgb(233,119,25)" rx="2" ry="2" />
<text  x="199.36" y="287.5" >bwtree::BwTree&lt;long, long, t..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (6,750,000 samples, 0.97%)</title><rect x="95.6" y="133" width="11.4" height="15.0" fill="rgb(223,17,3)" rx="2" ry="2" />
<text  x="98.56" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetLowKeyNodeID (250,000 samples, 0.04%)</title><rect x="424.7" y="293" width="0.4" height="15.0" fill="rgb(247,4,16)" rx="2" ry="2" />
<text  x="427.65" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateInnerNode (750,000 samples, 0.11%)</title><rect x="424.2" y="309" width="1.3" height="15.0" fill="rgb(219,59,49)" rx="2" ry="2" />
<text  x="427.23" y="319.5" ></text>
</g>
<g >
<title>void __gnu_cxx::new_allocator&lt;int&gt;::construct&lt;int, int&gt; (750,000 samples, 0.11%)</title><rect x="450.1" y="293" width="1.2" height="15.0" fill="rgb(207,214,0)" rx="2" ry="2" />
<text  x="453.06" y="303.5" ></text>
</g>
<g >
<title>____wcstof_l_internal (750,000 samples, 0.11%)</title><rect x="417.0" y="549" width="1.3" height="15.0" fill="rgb(225,118,24)" rx="2" ry="2" />
<text  x="420.03" y="559.5" ></text>
</g>
<g >
<title>void std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int&gt; (750,000 samples, 0.11%)</title><rect x="450.1" y="309" width="1.2" height="15.0" fill="rgb(237,120,33)" rx="2" ry="2" />
<text  x="453.06" y="319.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;long&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, long&gt; (2,000,000 samples, 0.29%)</title><rect x="190.0" y="229" width="3.4" height="15.0" fill="rgb(210,29,12)" rx="2" ry="2" />
<text  x="193.01" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (2,250,000 samples, 0.32%)</title><rect x="300.1" y="149" width="3.8" height="15.0" fill="rgb(226,138,41)" rx="2" ry="2" />
<text  x="303.13" y="159.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (250,000 samples, 0.04%)</title><rect x="61.7" y="69" width="0.4" height="15.0" fill="rgb(224,180,39)" rx="2" ry="2" />
<text  x="64.67" y="79.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::__InsertScalar (250,000 samples, 0.04%)</title><rect x="82.0" y="133" width="0.4" height="15.0" fill="rgb(244,13,52)" rx="2" ry="2" />
<text  x="85.00" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (6,500,000 samples, 0.93%)</title><rect x="272.2" y="149" width="11.0" height="15.0" fill="rgb(212,166,41)" rx="2" ry="2" />
<text  x="275.18" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator::operator (500,000 samples, 0.07%)</title><rect x="107.0" y="101" width="0.8" height="15.0" fill="rgb(238,120,38)" rx="2" ry="2" />
<text  x="109.99" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AdjustNodeSize (3,500,000 samples, 0.50%)</title><rect x="231.5" y="229" width="5.9" height="15.0" fill="rgb(233,141,26)" rx="2" ry="2" />
<text  x="234.51" y="239.5" ></text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (250,000 samples, 0.04%)</title><rect x="403.9" y="213" width="0.4" height="15.0" fill="rgb(240,128,23)" rx="2" ry="2" />
<text  x="406.90" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::PostInnerDeleteNode (500,000 samples, 0.07%)</title><rect x="62.1" y="213" width="0.8" height="15.0" fill="rgb(213,21,43)" rx="2" ry="2" />
<text  x="65.10" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetNextNodeID (1,000,000 samples, 0.14%)</title><rect x="168.0" y="213" width="1.7" height="15.0" fill="rgb(213,50,52)" rx="2" ry="2" />
<text  x="170.98" y="223.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (500,000 samples, 0.07%)</title><rect x="328.1" y="213" width="0.8" height="15.0" fill="rgb(242,147,48)" rx="2" ry="2" />
<text  x="331.08" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Traverse (89,750,000 samples, 12.89%)</title><rect x="43.9" y="261" width="152.0" height="15.0" fill="rgb(218,160,36)" rx="2" ry="2" />
<text  x="46.88" y="271.5" >bwtree::BwTree&lt;long..</text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (1,500,000 samples, 0.22%)</title><rect x="300.6" y="117" width="2.5" height="15.0" fill="rgb(235,121,11)" rx="2" ry="2" />
<text  x="303.55" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (250,000 samples, 0.04%)</title><rect x="448.4" y="309" width="0.4" height="15.0" fill="rgb(215,176,52)" rx="2" ry="2" />
<text  x="451.37" y="319.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (250,000 samples, 0.04%)</title><rect x="245.9" y="101" width="0.4" height="15.0" fill="rgb(206,141,4)" rx="2" ry="2" />
<text  x="248.92" y="111.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::compare_exchange_strong (3,000,000 samples, 0.43%)</title><rect x="215.8" y="245" width="5.1" height="15.0" fill="rgb(214,225,18)" rx="2" ry="2" />
<text  x="218.84" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (5,000,000 samples, 0.72%)</title><rect x="291.7" y="133" width="8.4" height="15.0" fill="rgb(223,189,43)" rx="2" ry="2" />
<text  x="294.66" y="143.5" ></text>
</g>
<g >
<title>std::operator&amp; (250,000 samples, 0.04%)</title><rect x="195.9" y="261" width="0.5" height="15.0" fill="rgb(229,98,3)" rx="2" ry="2" />
<text  x="198.94" y="271.5" ></text>
</g>
<g >
<title>std::operator&amp; (250,000 samples, 0.04%)</title><rect x="112.1" y="149" width="0.4" height="15.0" fill="rgb(232,102,23)" rx="2" ry="2" />
<text  x="115.07" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Context::Context (750,000 samples, 0.11%)</title><rect x="18.5" y="261" width="1.2" height="15.0" fill="rgb(208,127,35)" rx="2" ry="2" />
<text  x="21.47" y="271.5" ></text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInner (250,000 samples, 0.04%)</title><rect x="258.6" y="149" width="0.4" height="15.0" fill="rgb(249,130,4)" rx="2" ry="2" />
<text  x="261.62" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::FreeEpochDeltaChain (9,000,000 samples, 1.29%)</title><rect x="426.3" y="293" width="15.3" height="15.0" fill="rgb(245,161,9)" rx="2" ry="2" />
<text  x="429.35" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (26,500,000 samples, 3.80%)</title><rect x="259.5" y="181" width="44.9" height="15.0" fill="rgb(244,222,3)" rx="2" ry="2" />
<text  x="262.47" y="191.5" >bwtr..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TryConsolidateNode (31,250,000 samples, 4.49%)</title><rect x="255.7" y="229" width="52.9" height="15.0" fill="rgb(219,77,31)" rx="2" ry="2" />
<text  x="258.66" y="239.5" >bwtre..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::FindSplitPoint (250,000 samples, 0.04%)</title><rect x="236.6" y="197" width="0.4" height="15.0" fill="rgb(235,132,16)" rx="2" ry="2" />
<text  x="239.60" y="207.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::compare_exchange_strong (250,000 samples, 0.04%)</title><rect x="62.5" y="149" width="0.4" height="15.0" fill="rgb(244,83,13)" rx="2" ry="2" />
<text  x="65.52" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (500,000 samples, 0.07%)</title><rect x="353.1" y="213" width="0.8" height="15.0" fill="rgb(208,71,44)" rx="2" ry="2" />
<text  x="356.07" y="223.5" ></text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (2,500,000 samples, 0.36%)</title><rect x="399.7" y="181" width="4.2" height="15.0" fill="rgb(210,137,40)" rx="2" ry="2" />
<text  x="402.66" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerNode::~InnerNode (250,000 samples, 0.04%)</title><rect x="433.5" y="277" width="0.5" height="15.0" fill="rgb(225,155,45)" rx="2" ry="2" />
<text  x="436.55" y="287.5" ></text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, unsigned long&gt; const*, long&gt; (500,000 samples, 0.07%)</title><rect x="244.6" y="165" width="0.9" height="15.0" fill="rgb(222,55,19)" rx="2" ry="2" />
<text  x="247.64" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (5,000,000 samples, 0.72%)</title><rect x="98.5" y="117" width="8.5" height="15.0" fill="rgb(233,122,35)" rx="2" ry="2" />
<text  x="101.52" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (250,000 samples, 0.04%)</title><rect x="171.8" y="213" width="0.4" height="15.0" fill="rgb(219,127,27)" rx="2" ry="2" />
<text  x="174.79" y="223.5" ></text>
</g>
<g >
<title>long&amp;&amp; std::forward&lt;long&gt; (250,000 samples, 0.04%)</title><rect x="190.4" y="213" width="0.5" height="15.0" fill="rgb(233,167,4)" rx="2" ry="2" />
<text  x="193.43" y="223.5" ></text>
</g>
<g >
<title>std::operator&amp; (250,000 samples, 0.04%)</title><rect x="246.3" y="133" width="0.5" height="15.0" fill="rgb(212,27,43)" rx="2" ry="2" />
<text  x="249.34" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const** std::__copy_move_backward_a1&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const**&gt; (250,000 samples, 0.04%)</title><rect x="60.0" y="133" width="0.4" height="15.0" fill="rgb(230,172,9)" rx="2" ry="2" />
<text  x="62.98" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (1,250,000 samples, 0.18%)</title><rect x="295.0" y="85" width="2.2" height="15.0" fill="rgb(222,42,8)" rx="2" ry="2" />
<text  x="298.05" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__miter_base&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (250,000 samples, 0.04%)</title><rect x="95.1" y="117" width="0.5" height="15.0" fill="rgb(223,44,32)" rx="2" ry="2" />
<text  x="98.13" y="127.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, unsigned long&gt; const*&gt;::difference_type std::distance&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (500,000 samples, 0.07%)</title><rect x="141.7" y="181" width="0.9" height="15.0" fill="rgb(249,200,10)" rx="2" ry="2" />
<text  x="144.72" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::__upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; &gt; (250,000 samples, 0.04%)</title><rect x="60.4" y="165" width="0.4" height="15.0" fill="rgb(220,113,36)" rx="2" ry="2" />
<text  x="63.40" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (750,000 samples, 0.11%)</title><rect x="326.8" y="213" width="1.3" height="15.0" fill="rgb(214,20,39)" rx="2" ry="2" />
<text  x="329.81" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::__upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; &gt; (7,250,000 samples, 1.04%)</title><rect x="334.0" y="197" width="12.3" height="15.0" fill="rgb(248,128,27)" rx="2" ry="2" />
<text  x="337.01" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TryConsolidateNode (500,000 samples, 0.07%)</title><rect x="61.2" y="181" width="0.9" height="15.0" fill="rgb(232,62,31)" rx="2" ry="2" />
<text  x="64.25" y="191.5" ></text>
</g>
<g >
<title>testing::internal::UnitTestImpl::RunAllTests (452,250,000 samples, 64.93%)</title><rect x="422.5" y="453" width="766.2" height="15.0" fill="rgb(207,201,2)" rx="2" ry="2" />
<text  x="425.53" y="463.5" >testing::internal::UnitTestImpl::RunAllTests</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (250,000 samples, 0.04%)</title><rect x="47.3" y="245" width="0.4" height="15.0" fill="rgb(248,37,10)" rx="2" ry="2" />
<text  x="50.27" y="255.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, unsigned long&gt; const*&gt;::iterator_category std::__iterator_category&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (250,000 samples, 0.04%)</title><rect x="142.1" y="165" width="0.5" height="15.0" fill="rgb(239,79,12)" rx="2" ry="2" />
<text  x="145.15" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::FinishPartialSMO (5,000,000 samples, 0.72%)</title><rect x="54.9" y="229" width="8.5" height="15.0" fill="rgb(247,161,4)" rx="2" ry="2" />
<text  x="57.90" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker::operator (250,000 samples, 0.04%)</title><rect x="269.6" y="117" width="0.5" height="15.0" fill="rgb(236,148,30)" rx="2" ry="2" />
<text  x="272.63" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (250,000 samples, 0.04%)</title><rect x="123.5" y="229" width="0.4" height="15.0" fill="rgb(234,114,18)" rx="2" ry="2" />
<text  x="126.51" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetLowKeyPair (750,000 samples, 0.11%)</title><rect x="119.7" y="229" width="1.3" height="15.0" fill="rgb(224,122,0)" rx="2" ry="2" />
<text  x="122.70" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::GetNodeHeader (250,000 samples, 0.04%)</title><rect x="27.4" y="245" width="0.4" height="15.0" fill="rgb(238,186,38)" rx="2" ry="2" />
<text  x="30.37" y="255.5" ></text>
</g>
<g >
<title>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (452,250,000 samples, 64.93%)</title><rect x="422.5" y="389" width="766.2" height="15.0" fill="rgb(229,135,49)" rx="2" ry="2" />
<text  x="425.53" y="399.5" >void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeMetaData::NodeMetaData (250,000 samples, 0.04%)</title><rect x="42.6" y="197" width="0.4" height="15.0" fill="rgb(220,56,49)" rx="2" ry="2" />
<text  x="45.61" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetNextNodeID (500,000 samples, 0.07%)</title><rect x="149.8" y="213" width="0.8" height="15.0" fill="rgb(249,177,7)" rx="2" ry="2" />
<text  x="152.77" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (250,000 samples, 0.04%)</title><rect x="445.0" y="293" width="0.4" height="15.0" fill="rgb(247,88,33)" rx="2" ry="2" />
<text  x="447.98" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (750,000 samples, 0.11%)</title><rect x="152.7" y="213" width="1.3" height="15.0" fill="rgb(235,136,53)" rx="2" ry="2" />
<text  x="155.74" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (9,000,000 samples, 1.29%)</title><rect x="174.3" y="213" width="15.3" height="15.0" fill="rgb(229,168,24)" rx="2" ry="2" />
<text  x="177.34" y="223.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (500,000 samples, 0.07%)</title><rect x="444.1" y="261" width="0.9" height="15.0" fill="rgb(208,194,27)" rx="2" ry="2" />
<text  x="447.13" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (500,000 samples, 0.07%)</title><rect x="165.0" y="229" width="0.9" height="15.0" fill="rgb(248,168,10)" rx="2" ry="2" />
<text  x="168.02" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (3,250,000 samples, 0.47%)</title><rect x="442.4" y="325" width="5.5" height="15.0" fill="rgb(208,33,44)" rx="2" ry="2" />
<text  x="445.44" y="335.5" ></text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (1,750,000 samples, 0.25%)</title><rect x="186.6" y="181" width="3.0" height="15.0" fill="rgb(233,139,35)" rx="2" ry="2" />
<text  x="189.62" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Get (250,000 samples, 0.04%)</title><rect x="245.5" y="149" width="0.4" height="15.0" fill="rgb(233,42,47)" rx="2" ry="2" />
<text  x="248.49" y="159.5" ></text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (3,500,000 samples, 0.50%)</title><rect x="398.0" y="197" width="5.9" height="15.0" fill="rgb(254,137,0)" rx="2" ry="2" />
<text  x="400.97" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInner (750,000 samples, 0.11%)</title><rect x="257.8" y="181" width="1.2" height="15.0" fill="rgb(233,65,16)" rx="2" ry="2" />
<text  x="260.77" y="191.5" ></text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, unsigned long&gt; const*, long&gt; (1,750,000 samples, 0.25%)</title><rect x="343.3" y="165" width="3.0" height="15.0" fill="rgb(220,3,3)" rx="2" ry="2" />
<text  x="346.33" y="175.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::Exists (750,000 samples, 0.11%)</title><rect x="269.2" y="149" width="1.3" height="15.0" fill="rgb(252,107,16)" rx="2" ry="2" />
<text  x="272.21" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const** std::__copy_move_backward_a2&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const**&gt; (250,000 samples, 0.04%)</title><rect x="60.0" y="117" width="0.4" height="15.0" fill="rgb(246,167,53)" rx="2" ry="2" />
<text  x="62.98" y="127.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt;::operator (250,000 samples, 0.04%)</title><rect x="133.3" y="197" width="0.4" height="15.0" fill="rgb(208,101,15)" rx="2" ry="2" />
<text  x="136.25" y="207.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (250,000 samples, 0.04%)</title><rect x="245.9" y="117" width="0.4" height="15.0" fill="rgb(222,67,11)" rx="2" ry="2" />
<text  x="248.92" y="127.5" ></text>
</g>
<g >
<title>round_and_return (250,000 samples, 0.04%)</title><rect x="1189.6" y="549" width="0.4" height="15.0" fill="rgb(246,130,29)" rx="2" ry="2" />
<text  x="1192.58" y="559.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateLeafNode (500,000 samples, 0.07%)</title><rect x="61.2" y="149" width="0.9" height="15.0" fill="rgb(244,42,48)" rx="2" ry="2" />
<text  x="64.25" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Destroy (500,000 samples, 0.07%)</title><rect x="432.7" y="277" width="0.8" height="15.0" fill="rgb(253,85,43)" rx="2" ry="2" />
<text  x="435.70" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (500,000 samples, 0.07%)</title><rect x="292.9" y="101" width="0.9" height="15.0" fill="rgb(211,12,9)" rx="2" ry="2" />
<text  x="295.93" y="111.5" ></text>
</g>
<g >
<title>std::atomic&lt;char*&gt;::load (1,000,000 samples, 0.14%)</title><rect x="205.7" y="213" width="1.7" height="15.0" fill="rgb(220,45,16)" rx="2" ry="2" />
<text  x="208.68" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::~LeafNode (500,000 samples, 0.07%)</title><rect x="441.6" y="293" width="0.8" height="15.0" fill="rgb(250,81,30)" rx="2" ry="2" />
<text  x="444.59" y="303.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&amp;&gt;::type&amp;&amp; std::move&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&amp;&gt; (250,000 samples, 0.04%)</title><rect x="146.4" y="197" width="0.4" height="15.0" fill="rgb(229,59,37)" rx="2" ry="2" />
<text  x="149.38" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; __gnu_cxx::__ops::__iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (750,000 samples, 0.11%)</title><rect x="380.2" y="213" width="1.3" height="15.0" fill="rgb(214,141,18)" rx="2" ry="2" />
<text  x="383.18" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator::operator (1,250,000 samples, 0.18%)</title><rect x="139.6" y="165" width="2.1" height="15.0" fill="rgb(216,183,18)" rx="2" ry="2" />
<text  x="142.61" y="175.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (750,000 samples, 0.11%)</title><rect x="166.3" y="213" width="1.3" height="15.0" fill="rgb(223,175,45)" rx="2" ry="2" />
<text  x="169.29" y="223.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::compare_exchange_strong (250,000 samples, 0.04%)</title><rect x="62.9" y="181" width="0.5" height="15.0" fill="rgb(233,195,24)" rx="2" ry="2" />
<text  x="65.94" y="191.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (18,750,000 samples, 2.69%)</title><rect x="77.8" y="165" width="31.7" height="15.0" fill="rgb(253,220,53)" rx="2" ry="2" />
<text  x="80.77" y="175.5" >vo..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::AddGarbageNode (1,250,000 samples, 0.18%)</title><rect x="109.5" y="181" width="2.2" height="15.0" fill="rgb(216,107,53)" rx="2" ry="2" />
<text  x="112.53" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Adaptor&lt;std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;, double&gt;::operator (1,500,000 samples, 0.22%)</title><rect x="1139.2" y="277" width="2.5" height="15.0" fill="rgb(231,144,14)" rx="2" ry="2" />
<text  x="1142.17" y="287.5" ></text>
</g>
<g >
<title>std::operator&amp; (250,000 samples, 0.04%)</title><rect x="110.8" y="133" width="0.4" height="15.0" fill="rgb(213,143,16)" rx="2" ry="2" />
<text  x="113.80" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::ElasticNode (250,000 samples, 0.04%)</title><rect x="260.7" y="149" width="0.5" height="15.0" fill="rgb(212,77,20)" rx="2" ry="2" />
<text  x="263.74" y="159.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (1,250,000 samples, 0.18%)</title><rect x="295.0" y="101" width="2.2" height="15.0" fill="rgb(220,138,5)" rx="2" ry="2" />
<text  x="298.05" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (500,000 samples, 0.07%)</title><rect x="46.0" y="245" width="0.8" height="15.0" fill="rgb(235,91,48)" rx="2" ry="2" />
<text  x="49.00" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (250,000 samples, 0.04%)</title><rect x="230.2" y="245" width="0.5" height="15.0" fill="rgb(212,160,34)" rx="2" ry="2" />
<text  x="233.24" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;int const, int&gt; &gt;::_M_v (500,000 samples, 0.07%)</title><rect x="447.1" y="309" width="0.8" height="15.0" fill="rgb(206,34,5)" rx="2" ry="2" />
<text  x="450.10" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (250,000 samples, 0.04%)</title><rect x="445.8" y="309" width="0.5" height="15.0" fill="rgb(242,110,21)" rx="2" ry="2" />
<text  x="448.83" y="319.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateSiblingChain (1,750,000 samples, 0.25%)</title><rect x="167.6" y="229" width="2.9" height="15.0" fill="rgb(247,93,22)" rx="2" ry="2" />
<text  x="170.56" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateLeafNode (250,000 samples, 0.04%)</title><rect x="60.8" y="133" width="0.4" height="15.0" fill="rgb(225,152,14)" rx="2" ry="2" />
<text  x="63.83" y="143.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order (500,000 samples, 0.07%)</title><rect x="306.1" y="149" width="0.8" height="15.0" fill="rgb(235,5,47)" rx="2" ry="2" />
<text  x="309.06" y="159.5" ></text>
</g>
<g >
<title>std::operator&amp; (250,000 samples, 0.04%)</title><rect x="255.2" y="181" width="0.5" height="15.0" fill="rgb(237,226,19)" rx="2" ry="2" />
<text  x="258.23" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::InlineAllocate (4,750,000 samples, 0.68%)</title><rect x="19.7" y="261" width="8.1" height="15.0" fill="rgb(220,14,15)" rx="2" ry="2" />
<text  x="22.74" y="271.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (250,000 samples, 0.04%)</title><rect x="269.6" y="101" width="0.5" height="15.0" fill="rgb(236,121,10)" rx="2" ry="2" />
<text  x="272.63" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (2,750,000 samples, 0.39%)</title><rect x="367.9" y="229" width="4.7" height="15.0" fill="rgb(211,195,4)" rx="2" ry="2" />
<text  x="370.90" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateInnerNode (25,000,000 samples, 3.59%)</title><rect x="112.5" y="245" width="42.4" height="15.0" fill="rgb(249,43,6)" rx="2" ry="2" />
<text  x="115.50" y="255.5" >bwt..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (500,000 samples, 0.07%)</title><rect x="307.3" y="197" width="0.9" height="15.0" fill="rgb(220,215,23)" rx="2" ry="2" />
<text  x="310.33" y="207.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::__lower_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; &gt; (250,000 samples, 0.04%)</title><rect x="62.1" y="101" width="0.4" height="15.0" fill="rgb(246,103,15)" rx="2" ry="2" />
<text  x="65.10" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TakeNodeSnapshotReadOptimized (250,000 samples, 0.04%)</title><rect x="423.8" y="293" width="0.4" height="15.0" fill="rgb(224,97,42)" rx="2" ry="2" />
<text  x="426.80" y="303.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (250,000 samples, 0.04%)</title><rect x="327.7" y="197" width="0.4" height="15.0" fill="rgb(249,210,43)" rx="2" ry="2" />
<text  x="330.66" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;::__normal_iterator (250,000 samples, 0.04%)</title><rect x="425.5" y="309" width="0.4" height="15.0" fill="rgb(222,215,53)" rx="2" ry="2" />
<text  x="428.50" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (500,000 samples, 0.07%)</title><rect x="96.8" y="101" width="0.9" height="15.0" fill="rgb(216,126,48)" rx="2" ry="2" />
<text  x="99.83" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (500,000 samples, 0.07%)</title><rect x="353.1" y="229" width="0.8" height="15.0" fill="rgb(218,194,19)" rx="2" ry="2" />
<text  x="356.07" y="239.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, unsigned long&gt; const*&gt;::difference_type std::__distance&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (250,000 samples, 0.04%)</title><rect x="341.6" y="165" width="0.5" height="15.0" fill="rgb(217,72,18)" rx="2" ry="2" />
<text  x="344.64" y="175.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (750,000 samples, 0.11%)</title><rect x="126.9" y="197" width="1.3" height="15.0" fill="rgb(246,186,15)" rx="2" ry="2" />
<text  x="129.90" y="207.5" ></text>
</g>
<g >
<title>RUN_ALL_TESTS (452,250,000 samples, 64.93%)</title><rect x="422.5" y="517" width="766.2" height="15.0" fill="rgb(232,159,4)" rx="2" ry="2" />
<text  x="425.53" y="527.5" >RUN_ALL_TESTS</text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (500,000 samples, 0.07%)</title><rect x="107.0" y="117" width="0.8" height="15.0" fill="rgb(215,51,10)" rx="2" ry="2" />
<text  x="109.99" y="127.5" ></text>
</g>
<g >
<title>void std::__advance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, long&gt; (250,000 samples, 0.04%)</title><rect x="106.6" y="85" width="0.4" height="15.0" fill="rgb(212,0,33)" rx="2" ry="2" />
<text  x="109.57" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreaterEqual (1,000,000 samples, 0.14%)</title><rect x="326.4" y="229" width="1.7" height="15.0" fill="rgb(223,2,31)" rx="2" ry="2" />
<text  x="329.39" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateNode (250,000 samples, 0.04%)</title><rect x="60.8" y="149" width="0.4" height="15.0" fill="rgb(252,145,25)" rx="2" ry="2" />
<text  x="63.83" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::BaseNode (250,000 samples, 0.04%)</title><rect x="42.6" y="213" width="0.4" height="15.0" fill="rgb(244,82,23)" rx="2" ry="2" />
<text  x="45.61" y="223.5" ></text>
</g>
<g >
<title>testing::TestSuite::Run (452,250,000 samples, 64.93%)</title><rect x="422.5" y="437" width="766.2" height="15.0" fill="rgb(246,13,6)" rx="2" ry="2" />
<text  x="425.53" y="447.5" >testing::TestSuite::Run</text>
</g>
<g >
<title>std::pair&lt;long, long&gt;::pair&lt;long, true&gt; (1,500,000 samples, 0.22%)</title><rect x="190.9" y="213" width="2.5" height="15.0" fill="rgb(220,207,17)" rx="2" ry="2" />
<text  x="193.85" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LoadNodeID (38,250,000 samples, 5.49%)</title><rect x="47.7" y="245" width="64.8" height="15.0" fill="rgb(222,90,7)" rx="2" ry="2" />
<text  x="50.70" y="255.5" >bwtree:..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Delete (108,500,000 samples, 15.58%)</title><rect x="12.5" y="277" width="183.9" height="15.0" fill="rgb(220,25,17)" rx="2" ry="2" />
<text  x="15.54" y="287.5" >bwtree::BwTree&lt;long, lo..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const** std::__miter_base&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const**&gt; (250,000 samples, 0.04%)</title><rect x="74.8" y="117" width="0.4" height="15.0" fill="rgb(250,65,26)" rx="2" ry="2" />
<text  x="77.80" y="127.5" ></text>
</g>
<g >
<title>std::function&lt;void  (237,500,000 samples, 34.10%)</title><rect x="10.0" y="437" width="402.4" height="15.0" fill="rgb(217,78,28)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >std::function&lt;void </text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, unsigned long&gt; const*&gt;::difference_type std::distance&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (250,000 samples, 0.04%)</title><rect x="60.4" y="149" width="0.4" height="15.0" fill="rgb(239,214,13)" rx="2" ry="2" />
<text  x="63.40" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::FindLeftSibling (750,000 samples, 0.11%)</title><rect x="59.6" y="197" width="1.2" height="15.0" fill="rgb(230,186,31)" rx="2" ry="2" />
<text  x="62.55" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const** std::__copy_move_backward&lt;false, true, std::random_access_iterator_tag&gt;::__copy_move_b&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const*&gt; (250,000 samples, 0.04%)</title><rect x="60.0" y="101" width="0.4" height="15.0" fill="rgb(245,113,33)" rx="2" ry="2" />
<text  x="62.98" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafRemoveNode::LeafRemoveNode (250,000 samples, 0.04%)</title><rect x="54.0" y="213" width="0.5" height="15.0" fill="rgb(216,84,40)" rx="2" ry="2" />
<text  x="57.05" y="223.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, test::MultiThreadTestUtil::RunThreadsUntilFinish (237,500,000 samples, 34.10%)</title><rect x="10.0" y="405" width="402.4" height="15.0" fill="rgb(205,44,31)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >std::enable_if&lt;is_invocable_r_v&lt;void, test::MultiThrea..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LoadNodeID (46,000,000 samples, 6.60%)</title><rect x="230.7" y="245" width="77.9" height="15.0" fill="rgb(220,74,12)" rx="2" ry="2" />
<text  x="233.67" y="255.5" >bwtree::B..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (3,000,000 samples, 0.43%)</title><rect x="238.3" y="213" width="5.1" height="15.0" fill="rgb(248,172,8)" rx="2" ry="2" />
<text  x="241.29" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetLowKeyPair (750,000 samples, 0.11%)</title><rect x="320.9" y="229" width="1.3" height="15.0" fill="rgb(212,34,23)" rx="2" ry="2" />
<text  x="323.88" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::_Iter_comp_val (750,000 samples, 0.11%)</title><rect x="380.2" y="197" width="1.3" height="15.0" fill="rgb(245,214,44)" rx="2" ry="2" />
<text  x="383.18" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::~ElasticNode (4,500,000 samples, 0.65%)</title><rect x="434.0" y="261" width="7.6" height="15.0" fill="rgb(207,129,41)" rx="2" ry="2" />
<text  x="436.97" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (250,000 samples, 0.04%)</title><rect x="449.6" y="277" width="0.5" height="15.0" fill="rgb(234,225,34)" rx="2" ry="2" />
<text  x="452.64" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (1,000,000 samples, 0.14%)</title><rect x="193.4" y="245" width="1.7" height="15.0" fill="rgb(234,91,19)" rx="2" ry="2" />
<text  x="196.40" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TakeNodeSnapshot (4,750,000 samples, 0.68%)</title><rect x="63.4" y="229" width="8.0" height="15.0" fill="rgb(249,158,47)" rx="2" ry="2" />
<text  x="66.37" y="239.5" ></text>
</g>
<g >
<title>____wcstof_l_internal (250,000 samples, 0.04%)</title><rect x="432.7" y="261" width="0.4" height="15.0" fill="rgb(214,98,8)" rx="2" ry="2" />
<text  x="435.70" y="271.5" ></text>
</g>
<g >
<title>std::operator&amp; (250,000 samples, 0.04%)</title><rect x="220.5" y="229" width="0.4" height="15.0" fill="rgb(209,102,41)" rx="2" ry="2" />
<text  x="223.50" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (2,750,000 samples, 0.39%)</title><rect x="428.0" y="277" width="4.7" height="15.0" fill="rgb(218,47,46)" rx="2" ry="2" />
<text  x="431.04" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateLeafNode (22,750,000 samples, 3.27%)</title><rect x="154.9" y="245" width="38.5" height="15.0" fill="rgb(234,187,17)" rx="2" ry="2" />
<text  x="157.85" y="255.5" >bwt..</text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, long&gt; const*&gt;::difference_type std::__distance&lt;std::pair&lt;long, long&gt; const*&gt; (250,000 samples, 0.04%)</title><rect x="303.1" y="101" width="0.4" height="15.0" fill="rgb(254,80,42)" rx="2" ry="2" />
<text  x="306.09" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (750,000 samples, 0.11%)</title><rect x="152.7" y="197" width="1.3" height="15.0" fill="rgb(249,190,49)" rx="2" ry="2" />
<text  x="155.74" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (750,000 samples, 0.11%)</title><rect x="256.5" y="197" width="1.3" height="15.0" fill="rgb(225,88,23)" rx="2" ry="2" />
<text  x="259.50" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, std::allocator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt;::operator[] (250,000 samples, 0.04%)</title><rect x="410.7" y="277" width="0.4" height="15.0" fill="rgb(244,122,16)" rx="2" ry="2" />
<text  x="413.67" y="287.5" ></text>
</g>
<g >
<title>std::operator&amp; (250,000 samples, 0.04%)</title><rect x="39.6" y="213" width="0.5" height="15.0" fill="rgb(214,86,51)" rx="2" ry="2" />
<text  x="42.65" y="223.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::Insert (1,000,000 samples, 0.14%)</title><rect x="270.5" y="149" width="1.7" height="15.0" fill="rgb(241,25,47)" rx="2" ry="2" />
<text  x="273.48" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreaterEqual (250,000 samples, 0.04%)</title><rect x="46.8" y="245" width="0.5" height="15.0" fill="rgb(223,60,43)" rx="2" ry="2" />
<text  x="49.85" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (500,000 samples, 0.07%)</title><rect x="164.2" y="229" width="0.8" height="15.0" fill="rgb(236,142,26)" rx="2" ry="2" />
<text  x="167.17" y="239.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, long&gt; const*&gt;::difference_type std::__distance&lt;std::pair&lt;long, long&gt; const*&gt; (500,000 samples, 0.07%)</title><rect x="184.5" y="181" width="0.8" height="15.0" fill="rgb(247,130,15)" rx="2" ry="2" />
<text  x="187.50" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Delete (750,000 samples, 0.11%)</title><rect x="411.1" y="293" width="1.3" height="15.0" fill="rgb(212,83,35)" rx="2" ry="2" />
<text  x="414.10" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a1&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (750,000 samples, 0.11%)</title><rect x="288.3" y="101" width="1.2" height="15.0" fill="rgb(221,67,42)" rx="2" ry="2" />
<text  x="291.27" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::FinishPartialSMOReadOptimized (250,000 samples, 0.04%)</title><rect x="423.4" y="293" width="0.4" height="15.0" fill="rgb(223,16,36)" rx="2" ry="2" />
<text  x="426.38" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreaterEqual (250,000 samples, 0.04%)</title><rect x="169.7" y="213" width="0.4" height="15.0" fill="rgb(247,48,1)" rx="2" ry="2" />
<text  x="172.68" y="223.5" ></text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInner (250,000 samples, 0.04%)</title><rect x="74.8" y="149" width="0.4" height="15.0" fill="rgb(243,39,23)" rx="2" ry="2" />
<text  x="77.80" y="159.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (500,000 samples, 0.07%)</title><rect x="129.4" y="213" width="0.9" height="15.0" fill="rgb(235,227,25)" rx="2" ry="2" />
<text  x="132.44" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (9,000,000 samples, 1.29%)</title><rect x="131.6" y="213" width="15.2" height="15.0" fill="rgb(252,185,17)" rx="2" ry="2" />
<text  x="134.56" y="223.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, long&gt; const*&gt;::iterator_category std::__iterator_category&lt;std::pair&lt;long, long&gt; const*&gt; (250,000 samples, 0.04%)</title><rect x="303.5" y="117" width="0.4" height="15.0" fill="rgb(242,14,3)" rx="2" ry="2" />
<text  x="306.52" y="127.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* const&amp; std::min&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (500,000 samples, 0.07%)</title><rect x="154.0" y="229" width="0.9" height="15.0" fill="rgb(238,90,32)" rx="2" ry="2" />
<text  x="157.01" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::_Iter_comp_val (250,000 samples, 0.04%)</title><rect x="300.1" y="117" width="0.5" height="15.0" fill="rgb(237,67,52)" rx="2" ry="2" />
<text  x="303.13" y="127.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (1,500,000 samples, 0.22%)</title><rect x="370.0" y="213" width="2.6" height="15.0" fill="rgb(233,229,3)" rx="2" ry="2" />
<text  x="373.01" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (750,000 samples, 0.11%)</title><rect x="107.0" y="133" width="1.3" height="15.0" fill="rgb(242,35,47)" rx="2" ry="2" />
<text  x="109.99" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward&lt;false, true, std::random_access_iterator_tag&gt;::__copy_move_b&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*&gt; (500,000 samples, 0.07%)</title><rect x="93.4" y="69" width="0.9" height="15.0" fill="rgb(220,202,5)" rx="2" ry="2" />
<text  x="96.44" y="79.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::Insert (250,000 samples, 0.04%)</title><rect x="82.0" y="149" width="0.4" height="15.0" fill="rgb(248,157,5)" rx="2" ry="2" />
<text  x="85.00" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::LeafDataNode (1,500,000 samples, 0.22%)</title><rect x="222.2" y="245" width="2.5" height="15.0" fill="rgb(205,164,38)" rx="2" ry="2" />
<text  x="225.20" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (750,000 samples, 0.11%)</title><rect x="375.5" y="213" width="1.3" height="15.0" fill="rgb(209,83,35)" rx="2" ry="2" />
<text  x="378.52" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (250,000 samples, 0.04%)</title><rect x="448.4" y="325" width="0.4" height="15.0" fill="rgb(242,119,38)" rx="2" ry="2" />
<text  x="451.37" y="335.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (1,000,000 samples, 0.14%)</title><rect x="170.5" y="229" width="1.7" height="15.0" fill="rgb(238,104,44)" rx="2" ry="2" />
<text  x="173.52" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (1,250,000 samples, 0.18%)</title><rect x="322.2" y="229" width="2.1" height="15.0" fill="rgb(219,118,14)" rx="2" ry="2" />
<text  x="325.15" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetDepth (250,000 samples, 0.04%)</title><rect x="256.1" y="213" width="0.4" height="15.0" fill="rgb(244,8,48)" rx="2" ry="2" />
<text  x="259.08" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InstallNodeToReplace (250,000 samples, 0.04%)</title><rect x="62.5" y="165" width="0.4" height="15.0" fill="rgb(243,165,18)" rx="2" ry="2" />
<text  x="65.52" y="175.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (500,000 samples, 0.07%)</title><rect x="61.2" y="117" width="0.9" height="15.0" fill="rgb(238,1,3)" rx="2" ry="2" />
<text  x="64.25" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TraverseReadOptimized (1,500,000 samples, 0.22%)</title><rect x="423.0" y="325" width="2.5" height="15.0" fill="rgb(248,137,31)" rx="2" ry="2" />
<text  x="425.96" y="335.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, unsigned long&gt; const*&gt;::difference_type std::__distance&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (250,000 samples, 0.04%)</title><rect x="141.7" y="165" width="0.4" height="15.0" fill="rgb(230,208,53)" rx="2" ry="2" />
<text  x="144.72" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (1,250,000 samples, 0.18%)</title><rect x="291.7" y="117" width="2.1" height="15.0" fill="rgb(235,41,24)" rx="2" ry="2" />
<text  x="294.66" y="127.5" ></text>
</g>
<g >
<title>void std::advance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, long&gt; (500,000 samples, 0.07%)</title><rect x="106.1" y="101" width="0.9" height="15.0" fill="rgb(244,200,35)" rx="2" ry="2" />
<text  x="109.15" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (500,000 samples, 0.07%)</title><rect x="61.2" y="133" width="0.9" height="15.0" fill="rgb(254,109,5)" rx="2" ry="2" />
<text  x="64.25" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Get (500,000 samples, 0.07%)</title><rect x="260.3" y="165" width="0.9" height="15.0" fill="rgb(225,69,16)" rx="2" ry="2" />
<text  x="263.32" y="175.5" ></text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (250,000 samples, 0.04%)</title><rect x="76.9" y="165" width="0.4" height="15.0" fill="rgb(248,0,35)" rx="2" ry="2" />
<text  x="79.92" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateLeafNode (22,000,000 samples, 3.16%)</title><rect x="75.2" y="197" width="37.3" height="15.0" fill="rgb(237,79,47)" rx="2" ry="2" />
<text  x="78.23" y="207.5" >bwt..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::GetSplitSibling (250,000 samples, 0.04%)</title><rect x="236.6" y="213" width="0.4" height="15.0" fill="rgb(245,19,37)" rx="2" ry="2" />
<text  x="239.60" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;long&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, long&gt; (250,000 samples, 0.04%)</title><rect x="303.9" y="149" width="0.5" height="15.0" fill="rgb(237,215,5)" rx="2" ry="2" />
<text  x="306.94" y="159.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (250,000 samples, 0.04%)</title><rect x="245.9" y="133" width="0.4" height="15.0" fill="rgb(242,164,49)" rx="2" ry="2" />
<text  x="248.92" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (250,000 samples, 0.04%)</title><rect x="60.8" y="117" width="0.4" height="15.0" fill="rgb(210,176,12)" rx="2" ry="2" />
<text  x="63.83" y="127.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::load (3,000,000 samples, 0.43%)</title><rect x="250.6" y="197" width="5.1" height="15.0" fill="rgb(206,43,0)" rx="2" ry="2" />
<text  x="253.57" y="207.5" ></text>
</g>
<g >
<title>main (452,250,000 samples, 64.93%)</title><rect x="422.5" y="533" width="766.2" height="15.0" fill="rgb(237,15,26)" rx="2" ry="2" />
<text  x="425.53" y="543.5" >main</text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::compare_exchange_strong (1,000,000 samples, 0.14%)</title><rect x="305.2" y="165" width="1.7" height="15.0" fill="rgb(231,133,16)" rx="2" ry="2" />
<text  x="308.21" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt;::pair&lt;long, true&gt; (250,000 samples, 0.04%)</title><rect x="189.6" y="229" width="0.4" height="15.0" fill="rgb(211,210,24)" rx="2" ry="2" />
<text  x="192.58" y="239.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::__ExistsScalar (1,000,000 samples, 0.14%)</title><rect x="80.3" y="133" width="1.7" height="15.0" fill="rgb(217,77,4)" rx="2" ry="2" />
<text  x="83.31" y="143.5" ></text>
</g>
<g >
<title>long const&amp; std::forward&lt;long const&amp;&gt; (250,000 samples, 0.04%)</title><rect x="224.7" y="245" width="0.5" height="15.0" fill="rgb(245,54,0)" rx="2" ry="2" />
<text  x="227.74" y="255.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::compare_exchange_strong (2,000,000 samples, 0.29%)</title><rect x="36.7" y="245" width="3.4" height="15.0" fill="rgb(247,143,25)" rx="2" ry="2" />
<text  x="39.68" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (750,000 samples, 0.11%)</title><rect x="375.5" y="229" width="1.3" height="15.0" fill="rgb(215,54,15)" rx="2" ry="2" />
<text  x="378.52" y="239.5" ></text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::FindLeftSibling (250,000 samples, 0.04%)</title><rect x="60.0" y="181" width="0.4" height="15.0" fill="rgb(222,172,50)" rx="2" ry="2" />
<text  x="62.98" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateNode (500,000 samples, 0.07%)</title><rect x="61.2" y="165" width="0.9" height="15.0" fill="rgb(217,187,26)" rx="2" ry="2" />
<text  x="64.25" y="175.5" ></text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (2,500,000 samples, 0.36%)</title><rect x="185.3" y="197" width="4.3" height="15.0" fill="rgb(222,8,27)" rx="2" ry="2" />
<text  x="188.35" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (250,000 samples, 0.04%)</title><rect x="367.5" y="229" width="0.4" height="15.0" fill="rgb(242,63,39)" rx="2" ry="2" />
<text  x="370.47" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (250,000 samples, 0.04%)</title><rect x="60.8" y="37" width="0.4" height="15.0" fill="rgb(230,74,13)" rx="2" ry="2" />
<text  x="63.83" y="47.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::__ExistsScalar (750,000 samples, 0.11%)</title><rect x="269.2" y="133" width="1.3" height="15.0" fill="rgb(241,13,50)" rx="2" ry="2" />
<text  x="272.21" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::Begin (500,000 samples, 0.07%)</title><rect x="330.2" y="197" width="0.8" height="15.0" fill="rgb(247,81,33)" rx="2" ry="2" />
<text  x="333.20" y="207.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (2,000,000 samples, 0.29%)</title><rect x="300.6" y="133" width="3.3" height="15.0" fill="rgb(239,188,51)" rx="2" ry="2" />
<text  x="303.55" y="143.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (1,250,000 samples, 0.18%)</title><rect x="102.8" y="69" width="2.1" height="15.0" fill="rgb(232,7,14)" rx="2" ry="2" />
<text  x="105.76" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::GetSize (750,000 samples, 0.11%)</title><rect x="330.2" y="213" width="1.3" height="15.0" fill="rgb(211,123,26)" rx="2" ry="2" />
<text  x="333.20" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetItemCount (500,000 samples, 0.07%)</title><rect x="221.3" y="245" width="0.9" height="15.0" fill="rgb(220,108,22)" rx="2" ry="2" />
<text  x="224.35" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (250,000 samples, 0.04%)</title><rect x="247.2" y="229" width="0.4" height="15.0" fill="rgb(217,13,35)" rx="2" ry="2" />
<text  x="250.19" y="239.5" ></text>
</g>
<g >
<title>util::Distribution&lt; (435,250,000 samples, 62.49%)</title><rect x="451.3" y="341" width="737.4" height="15.0" fill="rgb(230,110,16)" rx="2" ry="2" />
<text  x="454.34" y="351.5" >util::Distribution&lt;</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateLeafNode (30,750,000 samples, 4.41%)</title><rect x="355.6" y="245" width="52.1" height="15.0" fill="rgb(216,218,54)" rx="2" ry="2" />
<text  x="358.61" y="255.5" >bwtre..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::FinishPartialSMO (250,000 samples, 0.04%)</title><rect x="60.8" y="181" width="0.4" height="15.0" fill="rgb(224,148,24)" rx="2" ry="2" />
<text  x="63.83" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInner (750,000 samples, 0.11%)</title><rect x="74.0" y="181" width="1.2" height="15.0" fill="rgb(249,155,6)" rx="2" ry="2" />
<text  x="76.96" y="191.5" ></text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (8,500,000 samples, 1.22%)</title><rect x="285.7" y="149" width="14.4" height="15.0" fill="rgb(244,5,27)" rx="2" ry="2" />
<text  x="288.73" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::Begin (250,000 samples, 0.04%)</title><rect x="324.3" y="229" width="0.4" height="15.0" fill="rgb(229,53,47)" rx="2" ry="2" />
<text  x="327.27" y="239.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (250,000 samples, 0.04%)</title><rect x="151.5" y="197" width="0.4" height="15.0" fill="rgb(210,13,10)" rx="2" ry="2" />
<text  x="154.46" y="207.5" ></text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, unsigned long&gt; const*, long&gt; (1,750,000 samples, 0.25%)</title><rect x="143.4" y="165" width="3.0" height="15.0" fill="rgb(205,157,20)" rx="2" ry="2" />
<text  x="146.42" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (1,500,000 samples, 0.22%)</title><rect x="121.0" y="229" width="2.5" height="15.0" fill="rgb(240,50,45)" rx="2" ry="2" />
<text  x="123.97" y="239.5" ></text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, unsigned long&gt; const*, long&gt; (2,500,000 samples, 0.36%)</title><rect x="342.1" y="181" width="4.2" height="15.0" fill="rgb(240,69,24)" rx="2" ry="2" />
<text  x="345.06" y="191.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, BwtreeTest_ConcurrentSkewedDelete_00_Test::TestBody (237,500,000 samples, 34.10%)</title><rect x="10.0" y="309" width="402.4" height="15.0" fill="rgb(206,15,25)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >void std::__invoke_impl&lt;void, BwtreeTest_ConcurrentSke..</text>
</g>
<g >
<title>xfg.12 (250,000 samples, 0.04%)</title><rect x="1188.3" y="325" width="0.4" height="15.0" fill="rgb(227,18,29)" rx="2" ry="2" />
<text  x="1191.31" y="335.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::JumpToNodeID (750,000 samples, 0.11%)</title><rect x="60.8" y="197" width="1.3" height="15.0" fill="rgb(225,134,44)" rx="2" ry="2" />
<text  x="63.83" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (250,000 samples, 0.04%)</title><rect x="76.5" y="165" width="0.4" height="15.0" fill="rgb(217,169,40)" rx="2" ry="2" />
<text  x="79.50" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AdjustNodeSize (2,750,000 samples, 0.39%)</title><rect x="49.8" y="229" width="4.7" height="15.0" fill="rgb(237,4,43)" rx="2" ry="2" />
<text  x="52.81" y="239.5" ></text>
</g>
<g >
<title>double std::uniform_real_distribution&lt;double&gt;::operator (2,250,000 samples, 0.32%)</title><rect x="1137.9" y="309" width="3.8" height="15.0" fill="rgb(247,77,30)" rx="2" ry="2" />
<text  x="1140.90" y="319.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, long const&amp;&gt; (250,000 samples, 0.04%)</title><rect x="225.2" y="245" width="0.4" height="15.0" fill="rgb(223,186,2)" rx="2" ry="2" />
<text  x="228.16" y="255.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta*&gt;::load (250,000 samples, 0.04%)</title><rect x="433.1" y="245" width="0.4" height="15.0" fill="rgb(234,191,16)" rx="2" ry="2" />
<text  x="436.12" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (500,000 samples, 0.07%)</title><rect x="408.1" y="213" width="0.9" height="15.0" fill="rgb(211,10,44)" rx="2" ry="2" />
<text  x="411.13" y="223.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::compare_exchange_strong (500,000 samples, 0.07%)</title><rect x="111.7" y="165" width="0.8" height="15.0" fill="rgb(236,222,29)" rx="2" ry="2" />
<text  x="114.65" y="175.5" ></text>
</g>
<g >
<title>std::tuple&lt;int const&amp;&gt;&amp;&amp; std::forward&lt;std::tuple&lt;int const&amp;&gt; &gt; (250,000 samples, 0.04%)</title><rect x="445.8" y="277" width="0.5" height="15.0" fill="rgb(207,75,21)" rx="2" ry="2" />
<text  x="448.83" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsDeltaNode (750,000 samples, 0.11%)</title><rect x="233.2" y="213" width="1.3" height="15.0" fill="rgb(236,221,52)" rx="2" ry="2" />
<text  x="236.21" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (8,750,000 samples, 1.26%)</title><rect x="331.5" y="213" width="14.8" height="15.0" fill="rgb(238,109,23)" rx="2" ry="2" />
<text  x="334.47" y="223.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order (1,000,000 samples, 0.14%)</title><rect x="218.8" y="229" width="1.7" height="15.0" fill="rgb(218,208,4)" rx="2" ry="2" />
<text  x="221.81" y="239.5" ></text>
</g>
<g >
<title>operator new (250,000 samples, 0.04%)</title><rect x="282.8" y="117" width="0.4" height="15.0" fill="rgb(215,134,19)" rx="2" ry="2" />
<text  x="285.76" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (250,000 samples, 0.04%)</title><rect x="170.1" y="213" width="0.4" height="15.0" fill="rgb(233,22,50)" rx="2" ry="2" />
<text  x="173.10" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InstallNodeToReplace (500,000 samples, 0.07%)</title><rect x="111.7" y="181" width="0.8" height="15.0" fill="rgb(252,165,29)" rx="2" ry="2" />
<text  x="114.65" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::copy_backward&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (2,250,000 samples, 0.32%)</title><rect x="287.8" y="133" width="3.9" height="15.0" fill="rgb(246,170,10)" rx="2" ry="2" />
<text  x="290.85" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (2,000,000 samples, 0.29%)</title><rect x="160.8" y="229" width="3.4" height="15.0" fill="rgb(253,14,26)" rx="2" ry="2" />
<text  x="163.78" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (250,000 samples, 0.04%)</title><rect x="76.5" y="133" width="0.4" height="15.0" fill="rgb(207,147,5)" rx="2" ry="2" />
<text  x="79.50" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreaterEqual (1,500,000 samples, 0.22%)</title><rect x="125.6" y="229" width="2.6" height="15.0" fill="rgb(252,143,34)" rx="2" ry="2" />
<text  x="128.63" y="239.5" ></text>
</g>
<g >
<title>[unknown] (2,500,000 samples, 0.36%)</title><rect x="412.4" y="549" width="4.2" height="15.0" fill="rgb(205,139,8)" rx="2" ry="2" />
<text  x="415.37" y="559.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (500,000 samples, 0.07%)</title><rect x="307.3" y="181" width="0.9" height="15.0" fill="rgb(212,138,6)" rx="2" ry="2" />
<text  x="310.33" y="191.5" ></text>
</g>
<g >
<title>std::operator| (500,000 samples, 0.07%)</title><rect x="306.1" y="133" width="0.8" height="15.0" fill="rgb(241,145,42)" rx="2" ry="2" />
<text  x="309.06" y="143.5" ></text>
</g>
<g >
<title>long const&amp; std::forward&lt;long const&amp;&gt; (500,000 samples, 0.07%)</title><rect x="43.0" y="229" width="0.9" height="15.0" fill="rgb(207,102,38)" rx="2" ry="2" />
<text  x="46.04" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Mod&lt;unsigned long, 2147483647ul, 16807ul, 0ul, true, true&gt;::__calc (750,000 samples, 0.11%)</title><rect x="1140.4" y="213" width="1.3" height="15.0" fill="rgb(250,189,36)" rx="2" ry="2" />
<text  x="1143.45" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (1,250,000 samples, 0.18%)</title><rect x="151.9" y="229" width="2.1" height="15.0" fill="rgb(223,0,35)" rx="2" ry="2" />
<text  x="154.89" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (250,000 samples, 0.04%)</title><rect x="59.6" y="149" width="0.4" height="15.0" fill="rgb(246,134,23)" rx="2" ry="2" />
<text  x="62.55" y="159.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInnerRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInner (250,000 samples, 0.04%)</title><rect x="62.1" y="149" width="0.4" height="15.0" fill="rgb(248,94,37)" rx="2" ry="2" />
<text  x="65.10" y="159.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInnerRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInner (750,000 samples, 0.11%)</title><rect x="257.8" y="165" width="1.2" height="15.0" fill="rgb(228,174,27)" rx="2" ry="2" />
<text  x="260.77" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (750,000 samples, 0.11%)</title><rect x="243.4" y="213" width="1.2" height="15.0" fill="rgb(206,133,12)" rx="2" ry="2" />
<text  x="246.37" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetNextNodeID (1,250,000 samples, 0.18%)</title><rect x="350.5" y="213" width="2.1" height="15.0" fill="rgb(220,228,26)" rx="2" ry="2" />
<text  x="353.53" y="223.5" ></text>
</g>
<g >
<title>unsigned long&amp;&amp; std::forward&lt;unsigned long&gt; (250,000 samples, 0.04%)</title><rect x="348.8" y="181" width="0.5" height="15.0" fill="rgb(253,133,33)" rx="2" ry="2" />
<text  x="351.84" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::__upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; &gt; (7,500,000 samples, 1.08%)</title><rect x="133.7" y="197" width="12.7" height="15.0" fill="rgb(210,125,3)" rx="2" ry="2" />
<text  x="136.68" y="207.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;unsigned long&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, unsigned long&gt; (750,000 samples, 0.11%)</title><rect x="146.8" y="213" width="1.3" height="15.0" fill="rgb(247,180,5)" rx="2" ry="2" />
<text  x="149.81" y="223.5" ></text>
</g>
<g >
<title>bwtree_test (696,500,000 samples, 100.00%)</title><rect x="10.0" y="565" width="1180.0" height="15.0" fill="rgb(240,146,53)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >bwtree_test</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (250,000 samples, 0.04%)</title><rect x="108.7" y="69" width="0.4" height="15.0" fill="rgb(222,81,13)" rx="2" ry="2" />
<text  x="111.69" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const** std::copy_backward&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const**&gt; (250,000 samples, 0.04%)</title><rect x="74.8" y="133" width="0.4" height="15.0" fill="rgb(253,165,3)" rx="2" ry="2" />
<text  x="77.80" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetNode (3,750,000 samples, 0.54%)</title><rect x="249.3" y="213" width="6.4" height="15.0" fill="rgb(218,46,0)" rx="2" ry="2" />
<text  x="252.30" y="223.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::load (4,000,000 samples, 0.57%)</title><rect x="64.6" y="197" width="6.8" height="15.0" fill="rgb(254,125,16)" rx="2" ry="2" />
<text  x="67.64" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::ElasticNode (250,000 samples, 0.04%)</title><rect x="76.1" y="149" width="0.4" height="15.0" fill="rgb(224,20,20)" rx="2" ry="2" />
<text  x="79.07" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (750,000 samples, 0.11%)</title><rect x="306.9" y="213" width="1.3" height="15.0" fill="rgb(247,118,18)" rx="2" ry="2" />
<text  x="309.91" y="223.5" ></text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (500,000 samples, 0.07%)</title><rect x="262.4" y="165" width="0.9" height="15.0" fill="rgb(229,100,4)" rx="2" ry="2" />
<text  x="265.43" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* const&amp; std::max&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (500,000 samples, 0.07%)</title><rect x="353.9" y="229" width="0.9" height="15.0" fill="rgb(231,31,41)" rx="2" ry="2" />
<text  x="356.92" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Begin (250,000 samples, 0.04%)</title><rect x="229.8" y="245" width="0.4" height="15.0" fill="rgb(209,149,41)" rx="2" ry="2" />
<text  x="232.82" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::back (500,000 samples, 0.07%)</title><rect x="449.2" y="309" width="0.9" height="15.0" fill="rgb(246,32,54)" rx="2" ry="2" />
<text  x="452.22" y="319.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetLowKeyPair (250,000 samples, 0.04%)</title><rect x="42.2" y="245" width="0.4" height="15.0" fill="rgb(233,203,28)" rx="2" ry="2" />
<text  x="45.19" y="255.5" ></text>
</g>
<g >
<title>operator new (500,000 samples, 0.07%)</title><rect x="450.5" y="277" width="0.8" height="15.0" fill="rgb(210,84,48)" rx="2" ry="2" />
<text  x="453.49" y="287.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::__ExistsScalar (250,000 samples, 0.04%)</title><rect x="108.3" y="117" width="0.4" height="15.0" fill="rgb(235,55,45)" rx="2" ry="2" />
<text  x="111.26" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__niter_wrap&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (250,000 samples, 0.04%)</title><rect x="290.4" y="101" width="0.4" height="15.0" fill="rgb(241,59,8)" rx="2" ry="2" />
<text  x="293.39" y="111.5" ></text>
</g>
<g >
<title>operator new (750,000 samples, 0.11%)</title><rect x="87.5" y="117" width="1.3" height="15.0" fill="rgb(251,82,32)" rx="2" ry="2" />
<text  x="90.51" y="127.5" ></text>
</g>
<g >
<title>handle_preload_list (250,000 samples, 0.04%)</title><rect x="1189.2" y="549" width="0.4" height="15.0" fill="rgb(248,216,12)" rx="2" ry="2" />
<text  x="1192.15" y="559.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (500,000 samples, 0.07%)</title><rect x="245.5" y="165" width="0.8" height="15.0" fill="rgb(206,222,9)" rx="2" ry="2" />
<text  x="248.49" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::ElasticNode (250,000 samples, 0.04%)</title><rect x="245.5" y="133" width="0.4" height="15.0" fill="rgb(225,156,45)" rx="2" ry="2" />
<text  x="248.49" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (250,000 samples, 0.04%)</title><rect x="410.3" y="277" width="0.4" height="15.0" fill="rgb(254,102,44)" rx="2" ry="2" />
<text  x="413.25" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (500,000 samples, 0.07%)</title><rect x="375.9" y="197" width="0.9" height="15.0" fill="rgb(243,23,1)" rx="2" ry="2" />
<text  x="378.94" y="207.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::GarbageNode*&gt;::compare_exchange_strong (750,000 samples, 0.11%)</title><rect x="110.0" y="165" width="1.2" height="15.0" fill="rgb(213,54,23)" rx="2" ry="2" />
<text  x="112.96" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateNode (29,000,000 samples, 4.16%)</title><rect x="257.8" y="213" width="49.1" height="15.0" fill="rgb(207,206,30)" rx="2" ry="2" />
<text  x="260.77" y="223.5" >bwtr..</text>
</g>
<g >
<title>std::remove_reference&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&amp;&gt;::type&amp;&amp; std::move&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&amp;&gt; (250,000 samples, 0.04%)</title><rect x="132.8" y="181" width="0.5" height="15.0" fill="rgb(225,151,24)" rx="2" ry="2" />
<text  x="135.83" y="191.5" ></text>
</g>
<g >
<title>long&amp;&amp; std::forward&lt;long&gt; (500,000 samples, 0.07%)</title><rect x="404.7" y="213" width="0.9" height="15.0" fill="rgb(225,148,53)" rx="2" ry="2" />
<text  x="407.75" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::back (500,000 samples, 0.07%)</title><rect x="447.9" y="341" width="0.9" height="15.0" fill="rgb(224,66,15)" rx="2" ry="2" />
<text  x="450.95" y="351.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a2&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (250,000 samples, 0.04%)</title><rect x="289.5" y="101" width="0.5" height="15.0" fill="rgb(250,212,3)" rx="2" ry="2" />
<text  x="292.54" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (250,000 samples, 0.04%)</title><rect x="445.8" y="293" width="0.5" height="15.0" fill="rgb(229,77,49)" rx="2" ry="2" />
<text  x="448.83" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (2,000,000 samples, 0.29%)</title><rect x="364.1" y="229" width="3.4" height="15.0" fill="rgb(216,60,18)" rx="2" ry="2" />
<text  x="367.08" y="239.5" ></text>
</g>
<g >
<title>void std::__advance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, long&gt; (500,000 samples, 0.07%)</title><rect x="299.3" y="85" width="0.8" height="15.0" fill="rgb(235,208,23)" rx="2" ry="2" />
<text  x="302.28" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateSiblingChain (2,250,000 samples, 0.32%)</title><rect x="349.3" y="229" width="3.8" height="15.0" fill="rgb(235,145,23)" rx="2" ry="2" />
<text  x="352.26" y="239.5" ></text>
</g>
<g >
<title>test::MultiThreadTestUtil::RunThreadsUntilFinish (237,500,000 samples, 34.10%)</title><rect x="10.0" y="373" width="402.4" height="15.0" fill="rgb(249,86,41)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >test::MultiThreadTestUtil::RunThreadsUntilFinish</text>
</g>
<g >
<title>std::operator&amp; (250,000 samples, 0.04%)</title><rect x="236.2" y="181" width="0.4" height="15.0" fill="rgb(244,150,24)" rx="2" ry="2" />
<text  x="239.17" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a2&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (750,000 samples, 0.11%)</title><rect x="93.0" y="85" width="1.3" height="15.0" fill="rgb(232,78,45)" rx="2" ry="2" />
<text  x="96.02" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (250,000 samples, 0.04%)</title><rect x="108.7" y="101" width="0.4" height="15.0" fill="rgb(221,138,20)" rx="2" ry="2" />
<text  x="111.69" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::end (250,000 samples, 0.04%)</title><rect x="425.5" y="325" width="0.4" height="15.0" fill="rgb(226,161,11)" rx="2" ry="2" />
<text  x="428.50" y="335.5" ></text>
</g>
<g >
<title>add_to_global_resize (250,000 samples, 0.04%)</title><rect x="412.4" y="517" width="0.4" height="15.0" fill="rgb(240,145,51)" rx="2" ry="2" />
<text  x="415.37" y="527.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (250,000 samples, 0.04%)</title><rect x="287.4" y="133" width="0.4" height="15.0" fill="rgb(248,217,23)" rx="2" ry="2" />
<text  x="290.42" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::GetIndexPair (500,000 samples, 0.07%)</title><rect x="101.1" y="69" width="0.8" height="15.0" fill="rgb(238,80,4)" rx="2" ry="2" />
<text  x="104.06" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (3,750,000 samples, 0.54%)</title><rect x="293.8" y="117" width="6.3" height="15.0" fill="rgb(228,127,39)" rx="2" ry="2" />
<text  x="296.78" y="127.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt;::operator (1,250,000 samples, 0.18%)</title><rect x="339.1" y="181" width="2.1" height="15.0" fill="rgb(249,113,49)" rx="2" ry="2" />
<text  x="342.10" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ValueCmpEqual (250,000 samples, 0.04%)</title><rect x="195.1" y="245" width="0.4" height="15.0" fill="rgb(250,141,5)" rx="2" ry="2" />
<text  x="198.09" y="255.5" ></text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, unsigned long&gt; const*, long&gt; (500,000 samples, 0.07%)</title><rect x="244.6" y="149" width="0.9" height="15.0" fill="rgb(221,98,3)" rx="2" ry="2" />
<text  x="247.64" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetHighKey (250,000 samples, 0.04%)</title><rect x="320.5" y="229" width="0.4" height="15.0" fill="rgb(214,194,54)" rx="2" ry="2" />
<text  x="323.46" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (1,000,000 samples, 0.14%)</title><rect x="362.0" y="229" width="1.7" height="15.0" fill="rgb(226,35,17)" rx="2" ry="2" />
<text  x="364.97" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt;::pair&lt;unsigned long, true&gt; (1,500,000 samples, 0.22%)</title><rect x="346.7" y="197" width="2.6" height="15.0" fill="rgb(227,47,50)" rx="2" ry="2" />
<text  x="349.72" y="207.5" ></text>
</g>
<g >
<title>operator new (250,000 samples, 0.04%)</title><rect x="77.3" y="165" width="0.5" height="15.0" fill="rgb(228,229,24)" rx="2" ry="2" />
<text  x="80.34" y="175.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&amp;&gt;::type&amp;&amp; std::move&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&amp;&gt; (250,000 samples, 0.04%)</title><rect x="333.6" y="165" width="0.4" height="15.0" fill="rgb(240,101,51)" rx="2" ry="2" />
<text  x="336.59" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (2,750,000 samples, 0.39%)</title><rect x="100.2" y="85" width="4.7" height="15.0" fill="rgb(212,131,18)" rx="2" ry="2" />
<text  x="103.22" y="95.5" ></text>
</g>
<g >
<title>util::Zipf::Generate (408,750,000 samples, 58.69%)</title><rect x="495.0" y="325" width="692.5" height="15.0" fill="rgb(207,218,3)" rx="2" ry="2" />
<text  x="497.96" y="335.5" >util::Zipf::Generate</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::End (750,000 samples, 0.11%)</title><rect x="324.7" y="229" width="1.3" height="15.0" fill="rgb(212,83,29)" rx="2" ry="2" />
<text  x="327.69" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TryConsolidateNode (24,250,000 samples, 3.48%)</title><rect x="71.4" y="229" width="41.1" height="15.0" fill="rgb(230,111,12)" rx="2" ry="2" />
<text  x="74.41" y="239.5" >bwt..</text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (1,500,000 samples, 0.22%)</title><rect x="448.8" y="341" width="2.5" height="15.0" fill="rgb(208,191,3)" rx="2" ry="2" />
<text  x="451.79" y="351.5" ></text>
</g>
<g >
<title>std::hash&lt;long&gt;::operator (250,000 samples, 0.04%)</title><rect x="270.1" y="101" width="0.4" height="15.0" fill="rgb(249,100,46)" rx="2" ry="2" />
<text  x="273.06" y="111.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (250,000 samples, 0.04%)</title><rect x="61.7" y="85" width="0.4" height="15.0" fill="rgb(243,85,51)" rx="2" ry="2" />
<text  x="64.67" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (1,500,000 samples, 0.22%)</title><rect x="288.3" y="117" width="2.5" height="15.0" fill="rgb(212,182,16)" rx="2" ry="2" />
<text  x="291.27" y="127.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, common::WorkerPool::AddThread (237,500,000 samples, 34.10%)</title><rect x="10.0" y="469" width="402.4" height="15.0" fill="rgb(252,66,41)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >void std::__invoke_impl&lt;void, common::WorkerPool::AddT..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Context::IsOnRootNode (250,000 samples, 0.04%)</title><rect x="234.5" y="213" width="0.4" height="15.0" fill="rgb(243,192,33)" rx="2" ry="2" />
<text  x="237.48" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (250,000 samples, 0.04%)</title><rect x="108.7" y="117" width="0.4" height="15.0" fill="rgb(226,18,34)" rx="2" ry="2" />
<text  x="111.69" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::JoinEpoch (4,000,000 samples, 0.57%)</title><rect x="27.8" y="261" width="6.8" height="15.0" fill="rgb(251,175,21)" rx="2" ry="2" />
<text  x="30.79" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetValue (1,750,000 samples, 0.25%)</title><rect x="423.0" y="341" width="2.9" height="15.0" fill="rgb(209,159,36)" rx="2" ry="2" />
<text  x="425.96" y="351.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (500,000 samples, 0.07%)</title><rect x="328.1" y="229" width="0.8" height="15.0" fill="rgb(211,165,18)" rx="2" ry="2" />
<text  x="331.08" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker::operator (250,000 samples, 0.04%)</title><rect x="81.2" y="117" width="0.4" height="15.0" fill="rgb(236,192,49)" rx="2" ry="2" />
<text  x="84.16" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (250,000 samples, 0.04%)</title><rect x="423.4" y="277" width="0.4" height="15.0" fill="rgb(235,175,54)" rx="2" ry="2" />
<text  x="426.38" y="287.5" ></text>
</g>
<g >
<title>std::atomic&lt;char*&gt;::load (2,750,000 samples, 0.39%)</title><rect x="22.7" y="213" width="4.7" height="15.0" fill="rgb(212,41,4)" rx="2" ry="2" />
<text  x="25.71" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::End (250,000 samples, 0.04%)</title><rect x="433.5" y="245" width="0.5" height="15.0" fill="rgb(220,25,42)" rx="2" ry="2" />
<text  x="436.55" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (3,250,000 samples, 0.47%)</title><rect x="83.3" y="149" width="5.5" height="15.0" fill="rgb(231,41,21)" rx="2" ry="2" />
<text  x="86.27" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateInnerNode (250,000 samples, 0.04%)</title><rect x="62.1" y="181" width="0.4" height="15.0" fill="rgb(217,201,52)" rx="2" ry="2" />
<text  x="65.10" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::Destroy (250,000 samples, 0.04%)</title><rect x="433.1" y="261" width="0.4" height="15.0" fill="rgb(243,18,33)" rx="2" ry="2" />
<text  x="436.12" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (250,000 samples, 0.04%)</title><rect x="125.2" y="229" width="0.4" height="15.0" fill="rgb(205,90,24)" rx="2" ry="2" />
<text  x="128.20" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (750,000 samples, 0.11%)</title><rect x="407.7" y="229" width="1.3" height="15.0" fill="rgb(243,181,2)" rx="2" ry="2" />
<text  x="410.71" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (500,000 samples, 0.07%)</title><rect x="444.1" y="277" width="0.9" height="15.0" fill="rgb(222,154,51)" rx="2" ry="2" />
<text  x="447.13" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (500,000 samples, 0.07%)</title><rect x="234.9" y="213" width="0.9" height="15.0" fill="rgb(215,87,37)" rx="2" ry="2" />
<text  x="237.90" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a1&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (750,000 samples, 0.11%)</title><rect x="93.0" y="101" width="1.3" height="15.0" fill="rgb(215,158,38)" rx="2" ry="2" />
<text  x="96.02" y="111.5" ></text>
</g>
<g >
<title>all (696,500,000 samples, 100%)</title><rect x="10.0" y="581" width="1180.0" height="15.0" fill="rgb(211,6,25)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::__lower_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; &gt; (500,000 samples, 0.07%)</title><rect x="244.6" y="181" width="0.9" height="15.0" fill="rgb(252,227,7)" rx="2" ry="2" />
<text  x="247.64" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetDepth (250,000 samples, 0.04%)</title><rect x="54.5" y="229" width="0.4" height="15.0" fill="rgb(250,199,19)" rx="2" ry="2" />
<text  x="57.47" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a2&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (750,000 samples, 0.11%)</title><rect x="288.3" y="85" width="1.2" height="15.0" fill="rgb(249,166,10)" rx="2" ry="2" />
<text  x="291.27" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateSiblingChain (2,250,000 samples, 0.32%)</title><rect x="148.1" y="229" width="3.8" height="15.0" fill="rgb(214,1,52)" rx="2" ry="2" />
<text  x="151.08" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::InlineAllocate (3,500,000 samples, 0.50%)</title><rect x="201.9" y="261" width="5.9" height="15.0" fill="rgb(237,159,46)" rx="2" ry="2" />
<text  x="204.87" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDeleteNode::LeafDeleteNode (2,250,000 samples, 0.32%)</title><rect x="40.1" y="261" width="3.8" height="15.0" fill="rgb(207,107,39)" rx="2" ry="2" />
<text  x="43.07" y="271.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::operator[] (3,250,000 samples, 0.47%)</title><rect x="442.4" y="341" width="5.5" height="15.0" fill="rgb(254,46,17)" rx="2" ry="2" />
<text  x="445.44" y="351.5" ></text>
</g>
<g >
<title>unsigned long std::__detail::__mod&lt;unsigned long, 2147483647ul, 16807ul, 0ul&gt; (750,000 samples, 0.11%)</title><rect x="1140.4" y="229" width="1.3" height="15.0" fill="rgb(224,123,0)" rx="2" ry="2" />
<text  x="1143.45" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (4,750,000 samples, 0.68%)</title><rect x="275.1" y="133" width="8.1" height="15.0" fill="rgb(246,53,32)" rx="2" ry="2" />
<text  x="278.14" y="143.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order (250,000 samples, 0.04%)</title><rect x="235.8" y="181" width="0.4" height="15.0" fill="rgb(206,120,53)" rx="2" ry="2" />
<text  x="238.75" y="191.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::GarbageNode*&gt;::load (250,000 samples, 0.04%)</title><rect x="304.8" y="165" width="0.4" height="15.0" fill="rgb(217,202,34)" rx="2" ry="2" />
<text  x="307.79" y="175.5" ></text>
</g>
<g >
<title>std::operator&amp; (250,000 samples, 0.04%)</title><rect x="62.9" y="149" width="0.5" height="15.0" fill="rgb(233,209,1)" rx="2" ry="2" />
<text  x="65.94" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateSiblingChain (1,750,000 samples, 0.25%)</title><rect x="372.6" y="229" width="2.9" height="15.0" fill="rgb(207,117,40)" rx="2" ry="2" />
<text  x="375.56" y="239.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (237,500,000 samples, 34.10%)</title><rect x="10.0" y="549" width="402.4" height="15.0" fill="rgb(215,49,7)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >[libstdc++.so.6.0.30]</text>
</g>
<g >
<title>util::Zipf::Zipf (500,000 samples, 0.07%)</title><rect x="1187.5" y="325" width="0.8" height="15.0" fill="rgb(248,5,50)" rx="2" ry="2" />
<text  x="1190.46" y="335.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, long&gt; const*&gt;::iterator_category std::__iterator_category&lt;std::pair&lt;long, long&gt; const*&gt; (250,000 samples, 0.04%)</title><rect x="107.8" y="117" width="0.5" height="15.0" fill="rgb(246,174,12)" rx="2" ry="2" />
<text  x="110.84" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (250,000 samples, 0.04%)</title><rect x="445.4" y="293" width="0.4" height="15.0" fill="rgb(250,107,39)" rx="2" ry="2" />
<text  x="448.41" y="303.5" ></text>
</g>
<g >
<title>operator new (250,000 samples, 0.04%)</title><rect x="263.3" y="165" width="0.4" height="15.0" fill="rgb(235,12,7)" rx="2" ry="2" />
<text  x="266.28" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Begin (250,000 samples, 0.04%)</title><rect x="363.7" y="229" width="0.4" height="15.0" fill="rgb(236,221,13)" rx="2" ry="2" />
<text  x="366.66" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetLowKeyPair (1,000,000 samples, 0.14%)</title><rect x="199.3" y="261" width="1.7" height="15.0" fill="rgb(222,86,0)" rx="2" ry="2" />
<text  x="202.33" y="271.5" ></text>
</g>
<g >
<title>common::WorkerPool::AddThread (237,500,000 samples, 34.10%)</title><rect x="10.0" y="453" width="402.4" height="15.0" fill="rgb(240,206,35)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >common::WorkerPool::AddThread</text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread (237,500,000 samples, 34.10%)</title><rect x="10.0" y="501" width="402.4" height="15.0" fill="rgb(253,113,51)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >void std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPo..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LoadNodeIDReadOptimized (500,000 samples, 0.07%)</title><rect x="423.4" y="309" width="0.8" height="15.0" fill="rgb(229,10,21)" rx="2" ry="2" />
<text  x="426.38" y="319.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (1,000,000 samples, 0.14%)</title><rect x="193.4" y="229" width="1.7" height="15.0" fill="rgb(250,24,46)" rx="2" ry="2" />
<text  x="196.40" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__niter_wrap&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (500,000 samples, 0.07%)</title><rect x="94.3" y="101" width="0.8" height="15.0" fill="rgb(249,216,20)" rx="2" ry="2" />
<text  x="97.29" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInner (250,000 samples, 0.04%)</title><rect x="62.1" y="165" width="0.4" height="15.0" fill="rgb(227,29,4)" rx="2" ry="2" />
<text  x="65.10" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (250,000 samples, 0.04%)</title><rect x="289.1" y="69" width="0.4" height="15.0" fill="rgb(233,161,12)" rx="2" ry="2" />
<text  x="292.12" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (250,000 samples, 0.04%)</title><rect x="259.0" y="181" width="0.5" height="15.0" fill="rgb(243,5,7)" rx="2" ry="2" />
<text  x="262.05" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::PostInnerInsertNode (750,000 samples, 0.11%)</title><rect x="245.5" y="213" width="1.3" height="15.0" fill="rgb(250,81,27)" rx="2" ry="2" />
<text  x="248.49" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetNode (250,000 samples, 0.04%)</title><rect x="423.8" y="277" width="0.4" height="15.0" fill="rgb(219,25,41)" rx="2" ry="2" />
<text  x="426.80" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (750,000 samples, 0.11%)</title><rect x="107.0" y="149" width="1.3" height="15.0" fill="rgb(228,215,43)" rx="2" ry="2" />
<text  x="109.99" y="159.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt;::difference_type std::__distance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (250,000 samples, 0.04%)</title><rect x="105.7" y="85" width="0.4" height="15.0" fill="rgb(252,17,54)" rx="2" ry="2" />
<text  x="108.72" y="95.5" ></text>
</g>
<g >
<title>std::hash&lt;long&gt;::operator (500,000 samples, 0.07%)</title><rect x="271.3" y="101" width="0.9" height="15.0" fill="rgb(207,212,45)" rx="2" ry="2" />
<text  x="274.33" y="111.5" ></text>
</g>
<g >
<title>[unknown] (250,000 samples, 0.04%)</title><rect x="412.4" y="533" width="0.4" height="15.0" fill="rgb(245,210,31)" rx="2" ry="2" />
<text  x="415.37" y="543.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order2 (500,000 samples, 0.07%)</title><rect x="218.8" y="213" width="0.9" height="15.0" fill="rgb(230,94,22)" rx="2" ry="2" />
<text  x="221.81" y="223.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt;::difference_type std::__distance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (500,000 samples, 0.07%)</title><rect x="298.4" y="85" width="0.9" height="15.0" fill="rgb(217,35,20)" rx="2" ry="2" />
<text  x="301.44" y="95.5" ></text>
</g>
<g >
<title>double std::generate_canonical&lt;double, 53ul, std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt; &gt; (1,500,000 samples, 0.22%)</title><rect x="1139.2" y="261" width="2.5" height="15.0" fill="rgb(236,21,29)" rx="2" ry="2" />
<text  x="1142.17" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeMetaData::NodeMetaData (750,000 samples, 0.11%)</title><rect x="223.5" y="197" width="1.2" height="15.0" fill="rgb(208,182,53)" rx="2" ry="2" />
<text  x="226.47" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateInnerNode (500,000 samples, 0.07%)</title><rect x="244.6" y="213" width="0.9" height="15.0" fill="rgb(231,35,35)" rx="2" ry="2" />
<text  x="247.64" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc::operator (500,000 samples, 0.07%)</title><rect x="271.3" y="117" width="0.9" height="15.0" fill="rgb(232,147,38)" rx="2" ry="2" />
<text  x="274.33" y="127.5" ></text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, unsigned long&gt; const*, long&gt; (2,250,000 samples, 0.32%)</title><rect x="142.6" y="181" width="3.8" height="15.0" fill="rgb(227,33,25)" rx="2" ry="2" />
<text  x="145.57" y="191.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt;::difference_type std::distance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (1,250,000 samples, 0.18%)</title><rect x="297.2" y="101" width="2.1" height="15.0" fill="rgb(212,29,46)" rx="2" ry="2" />
<text  x="300.16" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (27,000,000 samples, 3.88%)</title><rect x="1141.7" y="309" width="45.8" height="15.0" fill="rgb(231,86,40)" rx="2" ry="2" />
<text  x="1144.72" y="319.5" >std:..</text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, long&gt; const*&gt;::iterator_category std::__iterator_category&lt;std::pair&lt;long, long&gt; const*&gt; (500,000 samples, 0.07%)</title><rect x="397.1" y="197" width="0.9" height="15.0" fill="rgb(210,14,41)" rx="2" ry="2" />
<text  x="400.12" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__niter_base&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (250,000 samples, 0.04%)</title><rect x="290.0" y="101" width="0.4" height="15.0" fill="rgb(208,227,11)" rx="2" ry="2" />
<text  x="292.96" y="111.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::Exists (1,250,000 samples, 0.18%)</title><rect x="79.9" y="149" width="2.1" height="15.0" fill="rgb(246,45,20)" rx="2" ry="2" />
<text  x="82.89" y="159.5" ></text>
</g>
<g >
<title>std::atomic&lt;char*&gt;::fetch_sub (1,000,000 samples, 0.14%)</title><rect x="204.0" y="213" width="1.7" height="15.0" fill="rgb(211,10,36)" rx="2" ry="2" />
<text  x="206.98" y="223.5" ></text>
</g>
<g >
<title>std::atomic&lt;char*&gt;::fetch_sub (250,000 samples, 0.04%)</title><rect x="22.3" y="213" width="0.4" height="15.0" fill="rgb(242,225,7)" rx="2" ry="2" />
<text  x="25.28" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::GetAllocationHeader (250,000 samples, 0.04%)</title><rect x="207.4" y="245" width="0.4" height="15.0" fill="rgb(228,208,8)" rx="2" ry="2" />
<text  x="210.37" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (750,000 samples, 0.11%)</title><rect x="233.2" y="197" width="1.3" height="15.0" fill="rgb(215,26,13)" rx="2" ry="2" />
<text  x="236.21" y="207.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (14,250,000 samples, 2.05%)</title><rect x="380.2" y="229" width="24.1" height="15.0" fill="rgb(217,73,5)" rx="2" ry="2" />
<text  x="383.18" y="239.5" >s..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::~EpochManager (9,750,000 samples, 1.40%)</title><rect x="425.9" y="325" width="16.5" height="15.0" fill="rgb(233,33,8)" rx="2" ry="2" />
<text  x="428.92" y="335.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__niter_base&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (250,000 samples, 0.04%)</title><rect x="291.2" y="117" width="0.5" height="15.0" fill="rgb(251,103,19)" rx="2" ry="2" />
<text  x="294.23" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc::operator (250,000 samples, 0.04%)</title><rect x="270.1" y="117" width="0.4" height="15.0" fill="rgb(222,23,11)" rx="2" ry="2" />
<text  x="273.06" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InstallNodeToReplace (2,500,000 samples, 0.36%)</title><rect x="35.8" y="261" width="4.3" height="15.0" fill="rgb(249,129,14)" rx="2" ry="2" />
<text  x="38.84" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateSiblingChain (250,000 samples, 0.04%)</title><rect x="425.1" y="293" width="0.4" height="15.0" fill="rgb(217,7,8)" rx="2" ry="2" />
<text  x="428.08" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (250,000 samples, 0.04%)</title><rect x="445.0" y="277" width="0.4" height="15.0" fill="rgb(215,163,33)" rx="2" ry="2" />
<text  x="447.98" y="287.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&amp;&gt;::type&amp;&amp; std::move&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&amp;&gt; (250,000 samples, 0.04%)</title><rect x="381.0" y="181" width="0.5" height="15.0" fill="rgb(206,147,19)" rx="2" ry="2" />
<text  x="384.03" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::BaseNode (250,000 samples, 0.04%)</title><rect x="260.7" y="133" width="0.5" height="15.0" fill="rgb(237,30,13)" rx="2" ry="2" />
<text  x="263.74" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::Allocate (2,750,000 samples, 0.39%)</title><rect x="202.7" y="245" width="4.7" height="15.0" fill="rgb(237,85,46)" rx="2" ry="2" />
<text  x="205.71" y="255.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::__InsertScalar (1,000,000 samples, 0.14%)</title><rect x="270.5" y="133" width="1.7" height="15.0" fill="rgb(248,148,29)" rx="2" ry="2" />
<text  x="273.48" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1,500,000 samples, 0.22%)</title><rect x="442.4" y="293" width="2.6" height="15.0" fill="rgb(232,128,8)" rx="2" ry="2" />
<text  x="445.44" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InstallNodeToReplace (500,000 samples, 0.07%)</title><rect x="235.8" y="213" width="0.8" height="15.0" fill="rgb(217,210,15)" rx="2" ry="2" />
<text  x="238.75" y="223.5" ></text>
</g>
<g >
<title>std::operator&amp; (500,000 samples, 0.07%)</title><rect x="409.0" y="245" width="0.8" height="15.0" fill="rgb(211,48,54)" rx="2" ry="2" />
<text  x="411.98" y="255.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInnerRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInner (750,000 samples, 0.11%)</title><rect x="74.0" y="165" width="1.2" height="15.0" fill="rgb(225,124,21)" rx="2" ry="2" />
<text  x="76.96" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (500,000 samples, 0.07%)</title><rect x="53.2" y="213" width="0.8" height="15.0" fill="rgb(209,72,9)" rx="2" ry="2" />
<text  x="56.20" y="223.5" ></text>
</g>
<g >
<title>round_and_return (250,000 samples, 0.04%)</title><rect x="416.2" y="533" width="0.4" height="15.0" fill="rgb(227,7,9)" rx="2" ry="2" />
<text  x="419.18" y="543.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLessEqual (250,000 samples, 0.04%)</title><rect x="59.6" y="181" width="0.4" height="15.0" fill="rgb(252,135,5)" rx="2" ry="2" />
<text  x="62.55" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TakeNodeSnapshot (4,750,000 samples, 0.68%)</title><rect x="247.6" y="229" width="8.1" height="15.0" fill="rgb(249,41,38)" rx="2" ry="2" />
<text  x="250.61" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (250,000 samples, 0.04%)</title><rect x="104.9" y="101" width="0.4" height="15.0" fill="rgb(218,0,51)" rx="2" ry="2" />
<text  x="107.87" y="111.5" ></text>
</g>
<g >
<title>std::operator&amp; (250,000 samples, 0.04%)</title><rect x="26.9" y="197" width="0.5" height="15.0" fill="rgb(229,84,3)" rx="2" ry="2" />
<text  x="29.94" y="207.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (500,000 samples, 0.07%)</title><rect x="97.7" y="117" width="0.8" height="15.0" fill="rgb(233,204,47)" rx="2" ry="2" />
<text  x="100.67" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (250,000 samples, 0.04%)</title><rect x="171.8" y="197" width="0.4" height="15.0" fill="rgb(248,214,11)" rx="2" ry="2" />
<text  x="174.79" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (20,250,000 samples, 2.91%)</title><rect x="75.2" y="181" width="34.3" height="15.0" fill="rgb(235,91,22)" rx="2" ry="2" />
<text  x="78.23" y="191.5" >bw..</text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::lower_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (250,000 samples, 0.04%)</title><rect x="62.1" y="117" width="0.4" height="15.0" fill="rgb(214,121,8)" rx="2" ry="2" />
<text  x="65.10" y="127.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (250,000 samples, 0.04%)</title><rect x="396.7" y="181" width="0.4" height="15.0" fill="rgb(245,203,20)" rx="2" ry="2" />
<text  x="399.70" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::JumpToLeftSibling (1,500,000 samples, 0.22%)</title><rect x="59.6" y="213" width="2.5" height="15.0" fill="rgb(245,193,32)" rx="2" ry="2" />
<text  x="62.55" y="223.5" ></text>
</g>
<g >
<title>BwtreeTest_ConcurrentSkewedDelete_00_Test::TestBody (236,750,000 samples, 33.99%)</title><rect x="10.0" y="293" width="401.1" height="15.0" fill="rgb(214,198,8)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >BwtreeTest_ConcurrentSkewedDelete_00_Test::TestBody</text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;long&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, long&gt; (2,000,000 samples, 0.29%)</title><rect x="404.3" y="229" width="3.4" height="15.0" fill="rgb(226,184,0)" rx="2" ry="2" />
<text  x="407.32" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (750,000 samples, 0.11%)</title><rect x="407.7" y="245" width="1.3" height="15.0" fill="rgb(252,132,18)" rx="2" ry="2" />
<text  x="410.71" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsDeltaNode (750,000 samples, 0.11%)</title><rect x="256.5" y="213" width="1.3" height="15.0" fill="rgb(233,139,52)" rx="2" ry="2" />
<text  x="259.50" y="223.5" ></text>
</g>
<g >
<title>BwtreeTest_ConcurrentSkewedDelete_00_Test::TestBody (452,250,000 samples, 64.93%)</title><rect x="422.5" y="357" width="766.2" height="15.0" fill="rgb(249,211,47)" rx="2" ry="2" />
<text  x="425.53" y="367.5" >BwtreeTest_ConcurrentSkewedDelete_00_Test::TestBody</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::LeaveEpoch (750,000 samples, 0.11%)</title><rect x="34.6" y="261" width="1.2" height="15.0" fill="rgb(225,89,3)" rx="2" ry="2" />
<text  x="37.57" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::Allocate (3,250,000 samples, 0.47%)</title><rect x="21.9" y="245" width="5.5" height="15.0" fill="rgb(244,121,18)" rx="2" ry="2" />
<text  x="24.86" y="255.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (237,500,000 samples, 34.10%)</title><rect x="10.0" y="421" width="402.4" height="15.0" fill="rgb(229,206,26)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateNode (500,000 samples, 0.07%)</title><rect x="62.1" y="197" width="0.8" height="15.0" fill="rgb(224,93,16)" rx="2" ry="2" />
<text  x="65.10" y="207.5" ></text>
</g>
<g >
<title>____wcstold_l_internal (1,750,000 samples, 0.25%)</title><rect x="412.8" y="533" width="3.0" height="15.0" fill="rgb(222,72,8)" rx="2" ry="2" />
<text  x="415.79" y="543.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateInnerNode (750,000 samples, 0.11%)</title><rect x="74.0" y="197" width="1.2" height="15.0" fill="rgb(219,95,7)" rx="2" ry="2" />
<text  x="76.96" y="207.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (250,000 samples, 0.04%)</title><rect x="61.7" y="101" width="0.4" height="15.0" fill="rgb(219,143,13)" rx="2" ry="2" />
<text  x="64.67" y="111.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt;::pair&lt;long, true&gt; (1,250,000 samples, 0.18%)</title><rect x="405.6" y="213" width="2.1" height="15.0" fill="rgb(253,174,23)" rx="2" ry="2" />
<text  x="408.59" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateLeafNode (28,250,000 samples, 4.06%)</title><rect x="259.0" y="197" width="47.9" height="15.0" fill="rgb(242,130,38)" rx="2" ry="2" />
<text  x="262.05" y="207.5" >bwtr..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetItemCount (250,000 samples, 0.04%)</title><rect x="75.6" y="165" width="0.5" height="15.0" fill="rgb(212,36,40)" rx="2" ry="2" />
<text  x="78.65" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ValueCmpEqual (1,000,000 samples, 0.14%)</title><rect x="172.2" y="229" width="1.7" height="15.0" fill="rgb(237,56,15)" rx="2" ry="2" />
<text  x="175.22" y="239.5" ></text>
</g>
<g >
<title>std::equal_to&lt;long&gt;::operator (1,500,000 samples, 0.22%)</title><rect x="377.6" y="213" width="2.6" height="15.0" fill="rgb(241,228,36)" rx="2" ry="2" />
<text  x="380.64" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; __gnu_cxx::__ops::__iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (250,000 samples, 0.04%)</title><rect x="300.1" y="133" width="0.5" height="15.0" fill="rgb(220,46,41)" rx="2" ry="2" />
<text  x="303.13" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (250,000 samples, 0.04%)</title><rect x="1187.9" y="309" width="0.4" height="15.0" fill="rgb(245,81,35)" rx="2" ry="2" />
<text  x="1190.88" y="319.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt;::pair&lt;unsigned long, true&gt; (750,000 samples, 0.11%)</title><rect x="146.8" y="197" width="1.3" height="15.0" fill="rgb(254,159,10)" rx="2" ry="2" />
<text  x="149.81" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsDeltaNode (500,000 samples, 0.07%)</title><rect x="52.4" y="213" width="0.8" height="15.0" fill="rgb(253,117,20)" rx="2" ry="2" />
<text  x="55.35" y="223.5" ></text>
</g>
<g >
<title>____wcstold_l_internal (2,500,000 samples, 0.36%)</title><rect x="418.3" y="549" width="4.2" height="15.0" fill="rgb(229,141,45)" rx="2" ry="2" />
<text  x="421.30" y="559.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InstallNodeToReplace (250,000 samples, 0.04%)</title><rect x="62.9" y="197" width="0.5" height="15.0" fill="rgb(253,163,11)" rx="2" ry="2" />
<text  x="65.94" y="207.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (250,000 samples, 0.04%)</title><rect x="352.6" y="181" width="0.5" height="15.0" fill="rgb(215,157,29)" rx="2" ry="2" />
<text  x="355.65" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::_Iter_comp_val (250,000 samples, 0.04%)</title><rect x="173.9" y="213" width="0.4" height="15.0" fill="rgb(239,11,13)" rx="2" ry="2" />
<text  x="176.91" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator- (250,000 samples, 0.04%)</title><rect x="447.9" y="325" width="0.5" height="15.0" fill="rgb(213,223,52)" rx="2" ry="2" />
<text  x="450.95" y="335.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::End (250,000 samples, 0.04%)</title><rect x="331.0" y="197" width="0.5" height="15.0" fill="rgb(243,110,26)" rx="2" ry="2" />
<text  x="334.05" y="207.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::GarbageNode*&gt;::load (250,000 samples, 0.04%)</title><rect x="111.2" y="165" width="0.5" height="15.0" fill="rgb(215,165,2)" rx="2" ry="2" />
<text  x="114.23" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::GetIndexPair (1,500,000 samples, 0.22%)</title><rect x="283.2" y="149" width="2.5" height="15.0" fill="rgb(223,129,31)" rx="2" ry="2" />
<text  x="286.19" y="159.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::Exists (250,000 samples, 0.04%)</title><rect x="108.3" y="133" width="0.4" height="15.0" fill="rgb(235,115,54)" rx="2" ry="2" />
<text  x="111.26" y="143.5" ></text>
</g>
<g >
<title>testing::TestInfo::Run (452,250,000 samples, 64.93%)</title><rect x="422.5" y="421" width="766.2" height="15.0" fill="rgb(210,4,19)" rx="2" ry="2" />
<text  x="425.53" y="431.5" >testing::TestInfo::Run</text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (250,000 samples, 0.04%)</title><rect x="245.9" y="149" width="0.4" height="15.0" fill="rgb(224,122,0)" rx="2" ry="2" />
<text  x="248.92" y="159.5" ></text>
</g>
<g >
<title>void std::advance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, long&gt; (500,000 samples, 0.07%)</title><rect x="299.3" y="101" width="0.8" height="15.0" fill="rgb(246,110,12)" rx="2" ry="2" />
<text  x="302.28" y="111.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (250,000 samples, 0.04%)</title><rect x="60.8" y="101" width="0.4" height="15.0" fill="rgb(247,198,24)" rx="2" ry="2" />
<text  x="63.83" y="111.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, long const&amp;&gt; (500,000 samples, 0.07%)</title><rect x="43.0" y="245" width="0.9" height="15.0" fill="rgb(219,67,50)" rx="2" ry="2" />
<text  x="46.04" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator::operator (5,000,000 samples, 0.72%)</title><rect x="388.2" y="181" width="8.5" height="15.0" fill="rgb(244,160,52)" rx="2" ry="2" />
<text  x="391.23" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;unsigned long&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, unsigned long&gt; (1,750,000 samples, 0.25%)</title><rect x="346.3" y="213" width="3.0" height="15.0" fill="rgb(222,1,11)" rx="2" ry="2" />
<text  x="349.30" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Context::Context (500,000 samples, 0.07%)</title><rect x="201.0" y="261" width="0.9" height="15.0" fill="rgb(214,25,6)" rx="2" ry="2" />
<text  x="204.02" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const** std::__copy_move_backward_a&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const**&gt; (250,000 samples, 0.04%)</title><rect x="60.0" y="149" width="0.4" height="15.0" fill="rgb(247,109,36)" rx="2" ry="2" />
<text  x="62.98" y="159.5" ></text>
</g>
<g >
<title>_dl_debug_vdprintf (250,000 samples, 0.04%)</title><rect x="1189.2" y="533" width="0.4" height="15.0" fill="rgb(236,20,8)" rx="2" ry="2" />
<text  x="1192.15" y="543.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::GetIndexPair (750,000 samples, 0.11%)</title><rect x="88.8" y="149" width="1.3" height="15.0" fill="rgb(252,75,15)" rx="2" ry="2" />
<text  x="91.78" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsDeltaNode (250,000 samples, 0.04%)</title><rect x="73.5" y="213" width="0.5" height="15.0" fill="rgb(240,70,7)" rx="2" ry="2" />
<text  x="76.53" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Traverse (109,000,000 samples, 15.65%)</title><rect x="225.6" y="261" width="184.7" height="15.0" fill="rgb(252,6,20)" rx="2" ry="2" />
<text  x="228.59" y="271.5" >bwtree::BwTree&lt;long, lon..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (250,000 samples, 0.04%)</title><rect x="352.6" y="197" width="0.5" height="15.0" fill="rgb(248,98,1)" rx="2" ry="2" />
<text  x="355.65" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (1,250,000 samples, 0.18%)</title><rect x="128.2" y="229" width="2.1" height="15.0" fill="rgb(250,100,0)" rx="2" ry="2" />
<text  x="131.17" y="239.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order2 (250,000 samples, 0.04%)</title><rect x="235.8" y="165" width="0.4" height="15.0" fill="rgb(244,155,34)" rx="2" ry="2" />
<text  x="238.75" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Begin (500,000 samples, 0.07%)</title><rect x="82.4" y="149" width="0.9" height="15.0" fill="rgb(242,191,15)" rx="2" ry="2" />
<text  x="85.43" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::GetNodeHeader (250,000 samples, 0.04%)</title><rect x="326.0" y="229" width="0.4" height="15.0" fill="rgb(247,126,40)" rx="2" ry="2" />
<text  x="328.97" y="239.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (250,000 samples, 0.04%)</title><rect x="60.8" y="85" width="0.4" height="15.0" fill="rgb(230,163,7)" rx="2" ry="2" />
<text  x="63.83" y="95.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (24,000,000 samples, 3.45%)</title><rect x="263.7" y="165" width="40.7" height="15.0" fill="rgb(234,52,46)" rx="2" ry="2" />
<text  x="266.70" y="175.5" >voi..</text>
</g>
<g >
<title>std::iterator_traits&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt;::difference_type std::distance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (500,000 samples, 0.07%)</title><rect x="105.3" y="101" width="0.8" height="15.0" fill="rgb(227,20,1)" rx="2" ry="2" />
<text  x="108.30" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (2,500,000 samples, 0.36%)</title><rect x="437.4" y="245" width="4.2" height="15.0" fill="rgb(235,201,51)" rx="2" ry="2" />
<text  x="440.36" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (1,000,000 samples, 0.14%)</title><rect x="126.5" y="213" width="1.7" height="15.0" fill="rgb(235,205,9)" rx="2" ry="2" />
<text  x="129.48" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (250,000 samples, 0.04%)</title><rect x="246.8" y="229" width="0.4" height="15.0" fill="rgb(222,118,24)" rx="2" ry="2" />
<text  x="249.76" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::FinishPartialSMO (5,500,000 samples, 0.79%)</title><rect x="237.4" y="229" width="9.4" height="15.0" fill="rgb(212,53,51)" rx="2" ry="2" />
<text  x="240.44" y="239.5" ></text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (250,000 samples, 0.04%)</title><rect x="108.7" y="133" width="0.4" height="15.0" fill="rgb(226,82,34)" rx="2" ry="2" />
<text  x="111.69" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (250,000 samples, 0.04%)</title><rect x="169.7" y="197" width="0.4" height="15.0" fill="rgb(235,56,4)" rx="2" ry="2" />
<text  x="172.68" y="207.5" ></text>
</g>
<g >
<title>std::operator| (500,000 samples, 0.07%)</title><rect x="219.7" y="213" width="0.8" height="15.0" fill="rgb(254,186,4)" rx="2" ry="2" />
<text  x="222.66" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::lower_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (500,000 samples, 0.07%)</title><rect x="244.6" y="197" width="0.9" height="15.0" fill="rgb(208,76,12)" rx="2" ry="2" />
<text  x="247.64" y="207.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (250,000 samples, 0.04%)</title><rect x="340.8" y="149" width="0.4" height="15.0" fill="rgb(251,140,29)" rx="2" ry="2" />
<text  x="343.79" y="159.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* const&amp; std::max&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (250,000 samples, 0.04%)</title><rect x="409.8" y="245" width="0.5" height="15.0" fill="rgb(225,134,24)" rx="2" ry="2" />
<text  x="412.83" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (500,000 samples, 0.07%)</title><rect x="353.1" y="197" width="0.8" height="15.0" fill="rgb(230,11,30)" rx="2" ry="2" />
<text  x="356.07" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafInsertNode::LeafInsertNode (2,500,000 samples, 0.36%)</title><rect x="221.3" y="261" width="4.3" height="15.0" fill="rgb(243,150,19)" rx="2" ry="2" />
<text  x="224.35" y="271.5" ></text>
</g>
<g >
<title>unsigned long&amp;&amp; std::forward&lt;unsigned long&gt; (250,000 samples, 0.04%)</title><rect x="147.7" y="181" width="0.4" height="15.0" fill="rgb(245,85,18)" rx="2" ry="2" />
<text  x="150.65" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreaterEqual (750,000 samples, 0.11%)</title><rect x="150.6" y="213" width="1.3" height="15.0" fill="rgb(254,63,39)" rx="2" ry="2" />
<text  x="153.62" y="223.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;common::WorkerPool::AddThread (237,500,000 samples, 34.10%)</title><rect x="10.0" y="485" width="402.4" height="15.0" fill="rgb(215,117,22)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >std::__invoke_result&lt;common::WorkerPool::AddThread</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InstallNodeToReplace (250,000 samples, 0.04%)</title><rect x="246.3" y="165" width="0.5" height="15.0" fill="rgb(238,70,16)" rx="2" ry="2" />
<text  x="249.34" y="175.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, long&gt; const*&gt;::difference_type std::distance&lt;std::pair&lt;long, long&gt; const*&gt; (500,000 samples, 0.07%)</title><rect x="184.5" y="197" width="0.8" height="15.0" fill="rgb(222,33,12)" rx="2" ry="2" />
<text  x="187.50" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (1,250,000 samples, 0.18%)</title><rect x="95.6" y="117" width="2.1" height="15.0" fill="rgb(217,26,27)" rx="2" ry="2" />
<text  x="98.56" y="127.5" ></text>
</g>
<g >
<title>std::operator&amp; (250,000 samples, 0.04%)</title><rect x="195.5" y="245" width="0.4" height="15.0" fill="rgb(238,206,13)" rx="2" ry="2" />
<text  x="198.51" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt;::_Val_comp_iter (500,000 samples, 0.07%)</title><rect x="333.2" y="181" width="0.8" height="15.0" fill="rgb(244,86,15)" rx="2" ry="2" />
<text  x="336.17" y="191.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (250,000 samples, 0.04%)</title><rect x="108.7" y="53" width="0.4" height="15.0" fill="rgb(215,166,48)" rx="2" ry="2" />
<text  x="111.69" y="63.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateNode (750,000 samples, 0.11%)</title><rect x="245.5" y="197" width="1.3" height="15.0" fill="rgb(254,60,24)" rx="2" ry="2" />
<text  x="248.49" y="207.5" ></text>
</g>
<g >
<title>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (452,250,000 samples, 64.93%)</title><rect x="422.5" y="373" width="766.2" height="15.0" fill="rgb(227,91,22)" rx="2" ry="2" />
<text  x="425.53" y="383.5" >void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;</text>
</g>
<g >
<title>std::function&lt;void  (237,500,000 samples, 34.10%)</title><rect x="10.0" y="357" width="402.4" height="15.0" fill="rgb(223,165,18)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >std::function&lt;void </text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread (237,500,000 samples, 34.10%)</title><rect x="10.0" y="517" width="402.4" height="15.0" fill="rgb(225,223,48)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::A..</text>
</g>
<g >
<title>std::equal_to&lt;long&gt;::operator (250,000 samples, 0.04%)</title><rect x="81.2" y="101" width="0.4" height="15.0" fill="rgb(208,64,15)" rx="2" ry="2" />
<text  x="84.16" y="111.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt;::operator (1,250,000 samples, 0.18%)</title><rect x="139.6" y="181" width="2.1" height="15.0" fill="rgb(213,59,34)" rx="2" ry="2" />
<text  x="142.61" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (500,000 samples, 0.07%)</title><rect x="52.4" y="197" width="0.8" height="15.0" fill="rgb(225,160,12)" rx="2" ry="2" />
<text  x="55.35" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InstallNodeToReplace (1,000,000 samples, 0.14%)</title><rect x="305.2" y="181" width="1.7" height="15.0" fill="rgb(254,220,51)" rx="2" ry="2" />
<text  x="308.21" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (250,000 samples, 0.04%)</title><rect x="60.4" y="181" width="0.4" height="15.0" fill="rgb(216,205,2)" rx="2" ry="2" />
<text  x="63.40" y="191.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (250,000 samples, 0.04%)</title><rect x="108.7" y="85" width="0.4" height="15.0" fill="rgb(241,198,48)" rx="2" ry="2" />
<text  x="111.69" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::TryAllocate (3,250,000 samples, 0.47%)</title><rect x="21.9" y="229" width="5.5" height="15.0" fill="rgb(221,36,35)" rx="2" ry="2" />
<text  x="24.86" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__miter_base&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (250,000 samples, 0.04%)</title><rect x="290.8" y="117" width="0.4" height="15.0" fill="rgb(230,103,38)" rx="2" ry="2" />
<text  x="293.81" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Get (250,000 samples, 0.04%)</title><rect x="76.1" y="165" width="0.4" height="15.0" fill="rgb(238,118,27)" rx="2" ry="2" />
<text  x="79.07" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateNode (22,750,000 samples, 3.27%)</title><rect x="74.0" y="213" width="38.5" height="15.0" fill="rgb(228,5,19)" rx="2" ry="2" />
<text  x="76.96" y="223.5" >bwt..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread (237,500,000 samples, 34.10%)</title><rect x="10.0" y="533" width="402.4" height="15.0" fill="rgb(209,181,17)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tu..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (500,000 samples, 0.07%)</title><rect x="194.2" y="213" width="0.9" height="15.0" fill="rgb(223,115,10)" rx="2" ry="2" />
<text  x="197.24" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::End (250,000 samples, 0.04%)</title><rect x="131.1" y="197" width="0.5" height="15.0" fill="rgb(241,60,51)" rx="2" ry="2" />
<text  x="134.13" y="207.5" ></text>
</g>
<g >
<title>std::operator&amp; (750,000 samples, 0.11%)</title><rect x="70.1" y="181" width="1.3" height="15.0" fill="rgb(248,167,7)" rx="2" ry="2" />
<text  x="73.14" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::PostLeafMergeNode (250,000 samples, 0.04%)</title><rect x="62.9" y="213" width="0.5" height="15.0" fill="rgb(206,171,17)" rx="2" ry="2" />
<text  x="65.94" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::BaseNode (1,000,000 samples, 0.14%)</title><rect x="223.0" y="213" width="1.7" height="15.0" fill="rgb(237,25,46)" rx="2" ry="2" />
<text  x="226.04" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::TryAllocate (2,750,000 samples, 0.39%)</title><rect x="202.7" y="229" width="4.7" height="15.0" fill="rgb(236,105,14)" rx="2" ry="2" />
<text  x="205.71" y="239.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, unsigned long&gt; const*&gt;::difference_type std::__distance&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (250,000 samples, 0.04%)</title><rect x="60.4" y="133" width="0.4" height="15.0" fill="rgb(219,101,41)" rx="2" ry="2" />
<text  x="63.40" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1,500,000 samples, 0.22%)</title><rect x="442.4" y="309" width="2.6" height="15.0" fill="rgb(210,216,24)" rx="2" ry="2" />
<text  x="445.44" y="319.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (1,750,000 samples, 0.25%)</title><rect x="56.6" y="213" width="3.0" height="15.0" fill="rgb(225,128,49)" rx="2" ry="2" />
<text  x="59.59" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (13,250,000 samples, 1.90%)</title><rect x="381.5" y="213" width="22.4" height="15.0" fill="rgb(232,174,23)" rx="2" ry="2" />
<text  x="384.45" y="223.5" >s..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::PostInnerDeleteNode (250,000 samples, 0.04%)</title><rect x="60.8" y="165" width="0.4" height="15.0" fill="rgb(252,68,10)" rx="2" ry="2" />
<text  x="63.83" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator::operator (250,000 samples, 0.04%)</title><rect x="245.9" y="85" width="0.4" height="15.0" fill="rgb(248,134,20)" rx="2" ry="2" />
<text  x="248.92" y="95.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::compare_exchange_strong (250,000 samples, 0.04%)</title><rect x="246.3" y="149" width="0.5" height="15.0" fill="rgb(248,67,27)" rx="2" ry="2" />
<text  x="249.34" y="159.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (250,000 samples, 0.04%)</title><rect x="109.1" y="133" width="0.4" height="15.0" fill="rgb(249,186,2)" rx="2" ry="2" />
<text  x="112.11" y="143.5" ></text>
</g>
<g >
<title>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (452,250,000 samples, 64.93%)</title><rect x="422.5" y="485" width="766.2" height="15.0" fill="rgb(239,0,9)" rx="2" ry="2" />
<text  x="425.53" y="495.5" >bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;</text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (250,000 samples, 0.04%)</title><rect x="109.1" y="117" width="0.4" height="15.0" fill="rgb(212,62,52)" rx="2" ry="2" />
<text  x="112.11" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::copy_backward&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (1,750,000 samples, 0.25%)</title><rect x="92.6" y="133" width="3.0" height="15.0" fill="rgb(232,66,13)" rx="2" ry="2" />
<text  x="95.59" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (250,000 samples, 0.04%)</title><rect x="262.0" y="165" width="0.4" height="15.0" fill="rgb(242,1,23)" rx="2" ry="2" />
<text  x="265.01" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator::operator (1,000,000 samples, 0.14%)</title><rect x="339.5" y="165" width="1.7" height="15.0" fill="rgb(219,171,17)" rx="2" ry="2" />
<text  x="342.52" y="175.5" ></text>
</g>
<g >
<title>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (452,250,000 samples, 64.93%)</title><rect x="422.5" y="469" width="766.2" height="15.0" fill="rgb(239,213,11)" rx="2" ry="2" />
<text  x="425.53" y="479.5" >bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::~ElasticNode (250,000 samples, 0.04%)</title><rect x="433.5" y="261" width="0.5" height="15.0" fill="rgb(216,151,20)" rx="2" ry="2" />
<text  x="436.55" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const** std::copy_backward&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const**&gt; (250,000 samples, 0.04%)</title><rect x="60.0" y="165" width="0.4" height="15.0" fill="rgb(223,51,18)" rx="2" ry="2" />
<text  x="62.98" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (1,250,000 samples, 0.18%)</title><rect x="93.0" y="117" width="2.1" height="15.0" fill="rgb(246,23,51)" rx="2" ry="2" />
<text  x="96.02" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateLeafNode (750,000 samples, 0.11%)</title><rect x="245.5" y="181" width="1.3" height="15.0" fill="rgb(251,193,8)" rx="2" ry="2" />
<text  x="248.49" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc::operator (250,000 samples, 0.04%)</title><rect x="81.6" y="117" width="0.4" height="15.0" fill="rgb(250,10,5)" rx="2" ry="2" />
<text  x="84.58" y="127.5" ></text>
</g>
<g >
<title>____wcstod_l_internal (250,000 samples, 0.04%)</title><rect x="416.6" y="549" width="0.4" height="15.0" fill="rgb(233,67,4)" rx="2" ry="2" />
<text  x="419.60" y="559.5" ></text>
</g>
<g >
<title>_nss_dns_gethostbyaddr2_r (250,000 samples, 0.04%)</title><rect x="1188.7" y="549" width="0.5" height="15.0" fill="rgb(226,78,46)" rx="2" ry="2" />
<text  x="1191.73" y="559.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetNextNodeID (1,250,000 samples, 0.18%)</title><rect x="373.4" y="213" width="2.1" height="15.0" fill="rgb(222,130,37)" rx="2" ry="2" />
<text  x="376.40" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreater (250,000 samples, 0.04%)</title><rect x="59.6" y="165" width="0.4" height="15.0" fill="rgb(226,190,27)" rx="2" ry="2" />
<text  x="62.55" y="175.5" ></text>
</g>
</g>
</svg>
