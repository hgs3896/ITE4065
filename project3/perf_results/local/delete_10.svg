<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Destroy (1,250,000 samples, 0.02%)</title><rect x="11.4" y="341" width="0.2" height="15.0" fill="rgb(253,68,49)" rx="2" ry="2" />
<text  x="14.37" y="351.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::GetSize (750,000 samples, 0.01%)</title><rect x="154.4" y="181" width="0.1" height="15.0" fill="rgb(226,19,27)" rx="2" ry="2" />
<text  x="157.37" y="191.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::BloomFilter (500,000 samples, 0.01%)</title><rect x="80.7" y="133" width="0.1" height="15.0" fill="rgb(233,57,5)" rx="2" ry="2" />
<text  x="83.71" y="143.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="309" width="1093.7" height="15.0" fill="rgb(216,97,36)" rx="2" ry="2" />
<text  x="55.61" y="319.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InstallNodeToReplace (4,500,000 samples, 0.08%)</title><rect x="55.0" y="229" width="1.0" height="15.0" fill="rgb(215,102,19)" rx="2" ry="2" />
<text  x="58.04" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::PostInnerDeleteNode (750,000 samples, 0.01%)</title><rect x="78.8" y="181" width="0.1" height="15.0" fill="rgb(211,41,9)" rx="2" ry="2" />
<text  x="81.75" y="191.5" ></text>
</g>
<g >
<title>common::WorkerPool::AddThread (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="421" width="1093.7" height="15.0" fill="rgb(248,73,11)" rx="2" ry="2" />
<text  x="55.61" y="431.5" >common::WorkerPool::AddThread</text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (11,750,000 samples, 0.21%)</title><rect x="126.5" y="181" width="2.5" height="15.0" fill="rgb(234,35,43)" rx="2" ry="2" />
<text  x="129.54" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TakeNodeSnapshot (9,750,000 samples, 0.17%)</title><rect x="209.5" y="197" width="2.1" height="15.0" fill="rgb(217,208,7)" rx="2" ry="2" />
<text  x="212.50" y="207.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt;::operator (6,750,000 samples, 0.12%)</title><rect x="274.2" y="149" width="1.5" height="15.0" fill="rgb(218,12,48)" rx="2" ry="2" />
<text  x="277.24" y="159.5" ></text>
</g>
<g >
<title>void std::__advance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, long&gt; (1,000,000 samples, 0.02%)</title><rect x="264.8" y="53" width="0.2" height="15.0" fill="rgb(251,51,30)" rx="2" ry="2" />
<text  x="267.79" y="63.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (246,250,000 samples, 4.41%)</title><rect x="214.0" y="133" width="52.0" height="15.0" fill="rgb(214,82,12)" rx="2" ry="2" />
<text  x="216.99" y="143.5" >void ..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Get (1,500,000 samples, 0.03%)</title><rect x="81.0" y="133" width="0.3" height="15.0" fill="rgb(241,71,38)" rx="2" ry="2" />
<text  x="83.97" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::Destroy (1,250,000 samples, 0.02%)</title><rect x="11.4" y="325" width="0.2" height="15.0" fill="rgb(247,94,16)" rx="2" ry="2" />
<text  x="14.37" y="335.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::BaseNode (1,750,000 samples, 0.03%)</title><rect x="139.4" y="181" width="0.3" height="15.0" fill="rgb(241,25,51)" rx="2" ry="2" />
<text  x="142.37" y="191.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (62,000,000 samples, 1.11%)</title><rect x="190.9" y="133" width="13.1" height="15.0" fill="rgb(225,187,44)" rx="2" ry="2" />
<text  x="193.86" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateSiblingChain (1,750,000 samples, 0.03%)</title><rect x="121.2" y="197" width="0.4" height="15.0" fill="rgb(243,116,42)" rx="2" ry="2" />
<text  x="124.21" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::GetNodeHeader (750,000 samples, 0.01%)</title><rect x="270.2" y="197" width="0.2" height="15.0" fill="rgb(237,187,34)" rx="2" ry="2" />
<text  x="273.23" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreaterEqual (500,000 samples, 0.01%)</title><rect x="111.0" y="181" width="0.1" height="15.0" fill="rgb(240,79,3)" rx="2" ry="2" />
<text  x="114.02" y="191.5" ></text>
</g>
<g >
<title>long const&amp; std::forward&lt;long const&amp;&gt; (500,000 samples, 0.01%)</title><rect x="139.8" y="197" width="0.1" height="15.0" fill="rgb(253,66,21)" rx="2" ry="2" />
<text  x="142.80" y="207.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (9,250,000 samples, 0.17%)</title><rect x="119.3" y="181" width="1.9" height="15.0" fill="rgb(209,129,30)" rx="2" ry="2" />
<text  x="122.26" y="191.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (500,000 samples, 0.01%)</title><rect x="1160.7" y="261" width="0.2" height="15.0" fill="rgb(207,209,14)" rx="2" ry="2" />
<text  x="1163.75" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::~LeafNode (750,000 samples, 0.01%)</title><rect x="52.5" y="357" width="0.1" height="15.0" fill="rgb(249,97,45)" rx="2" ry="2" />
<text  x="55.46" y="367.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, unsigned long&gt; const*&gt;::difference_type std::__distance&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (500,000 samples, 0.01%)</title><rect x="275.8" y="133" width="0.1" height="15.0" fill="rgb(246,16,44)" rx="2" ry="2" />
<text  x="278.77" y="143.5" ></text>
</g>
<g >
<title>operator new (8,250,000 samples, 0.15%)</title><rect x="99.8" y="85" width="1.8" height="15.0" fill="rgb(250,164,44)" rx="2" ry="2" />
<text  x="102.82" y="95.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (5,000,000 samples, 0.09%)</title><rect x="127.2" y="165" width="1.0" height="15.0" fill="rgb(211,79,14)" rx="2" ry="2" />
<text  x="130.18" y="175.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order2 (1,000,000 samples, 0.02%)</title><rect x="137.8" y="181" width="0.2" height="15.0" fill="rgb(239,53,25)" rx="2" ry="2" />
<text  x="140.79" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__niter_wrap&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (750,000 samples, 0.01%)</title><rect x="262.7" y="69" width="0.2" height="15.0" fill="rgb(220,73,51)" rx="2" ry="2" />
<text  x="265.73" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreaterEqual (3,250,000 samples, 0.06%)</title><rect x="270.5" y="197" width="0.7" height="15.0" fill="rgb(243,36,16)" rx="2" ry="2" />
<text  x="273.54" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::Begin (750,000 samples, 0.01%)</title><rect x="271.8" y="181" width="0.2" height="15.0" fill="rgb(211,138,23)" rx="2" ry="2" />
<text  x="274.81" y="191.5" ></text>
</g>
<g >
<title>std::atomic&lt;char*&gt;::load (10,750,000 samples, 0.19%)</title><rect x="133.3" y="181" width="2.3" height="15.0" fill="rgb(235,127,38)" rx="2" ry="2" />
<text  x="136.30" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (1,500,000 samples, 0.03%)</title><rect x="107.3" y="197" width="0.3" height="15.0" fill="rgb(211,142,14)" rx="2" ry="2" />
<text  x="110.32" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::TryAllocate (2,000,000 samples, 0.04%)</title><rect x="53.9" y="197" width="0.5" height="15.0" fill="rgb(244,9,39)" rx="2" ry="2" />
<text  x="56.93" y="207.5" ></text>
</g>
<g >
<title>std::equal_to&lt;long&gt;::operator (1,250,000 samples, 0.02%)</title><rect x="125.9" y="197" width="0.3" height="15.0" fill="rgb(244,204,42)" rx="2" ry="2" />
<text  x="128.91" y="207.5" ></text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, unsigned long&gt; const*, long&gt; (750,000 samples, 0.01%)</title><rect x="276.0" y="149" width="0.2" height="15.0" fill="rgb(253,103,3)" rx="2" ry="2" />
<text  x="279.04" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (1,500,000 samples, 0.03%)</title><rect x="1161.1" y="309" width="0.3" height="15.0" fill="rgb(207,93,11)" rx="2" ry="2" />
<text  x="1164.06" y="319.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsDeltaNode (1,000,000 samples, 0.02%)</title><rect x="80.2" y="181" width="0.2" height="15.0" fill="rgb(254,189,37)" rx="2" ry="2" />
<text  x="83.23" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Begin (19,750,000 samples, 0.35%)</title><rect x="165.9" y="149" width="4.2" height="15.0" fill="rgb(221,123,8)" rx="2" ry="2" />
<text  x="168.88" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateInnerNode (750,000 samples, 0.01%)</title><rect x="1150.8" y="277" width="0.2" height="15.0" fill="rgb(217,56,31)" rx="2" ry="2" />
<text  x="1153.82" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (3,250,000 samples, 0.06%)</title><rect x="1160.2" y="293" width="0.7" height="15.0" fill="rgb(211,221,39)" rx="2" ry="2" />
<text  x="1163.16" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LoadNodeID (230,250,000 samples, 4.12%)</title><rect x="57.3" y="213" width="48.6" height="15.0" fill="rgb(236,200,0)" rx="2" ry="2" />
<text  x="60.26" y="223.5" >bwtr..</text>
</g>
<g >
<title>std::equal_to&lt;long&gt;::operator (69,000,000 samples, 1.24%)</title><rect x="1072.7" y="197" width="14.6" height="15.0" fill="rgb(239,51,36)" rx="2" ry="2" />
<text  x="1075.72" y="207.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt;::pair&lt;unsigned long, true&gt; (1,000,000 samples, 0.02%)</title><rect x="110.4" y="165" width="0.2" height="15.0" fill="rgb(244,5,24)" rx="2" ry="2" />
<text  x="113.38" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetLowKeyPair (1,000,000 samples, 0.02%)</title><rect x="138.9" y="213" width="0.2" height="15.0" fill="rgb(228,75,14)" rx="2" ry="2" />
<text  x="141.90" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (15,500,000 samples, 0.28%)</title><rect x="149.6" y="213" width="3.3" height="15.0" fill="rgb(240,37,42)" rx="2" ry="2" />
<text  x="152.62" y="223.5" ></text>
</g>
<g >
<title>std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;::operator (2,000,000 samples, 0.04%)</title><rect x="1187.6" y="213" width="0.4" height="15.0" fill="rgb(241,190,4)" rx="2" ry="2" />
<text  x="1190.57" y="223.5" ></text>
</g>
<g >
<title>void std::__advance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, long&gt; (1,000,000 samples, 0.02%)</title><rect x="104.6" y="53" width="0.2" height="15.0" fill="rgb(206,71,45)" rx="2" ry="2" />
<text  x="107.63" y="63.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Delete (364,250,000 samples, 6.52%)</title><rect x="53.0" y="245" width="76.9" height="15.0" fill="rgb(253,170,1)" rx="2" ry="2" />
<text  x="55.98" y="255.5" >bwtree::..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (750,000 samples, 0.01%)</title><rect x="1160.4" y="245" width="0.2" height="15.0" fill="rgb(234,38,23)" rx="2" ry="2" />
<text  x="1163.43" y="255.5" ></text>
</g>
<g >
<title>round_and_return (500,000 samples, 0.01%)</title><rect x="1189.9" y="517" width="0.1" height="15.0" fill="rgb(228,109,7)" rx="2" ry="2" />
<text  x="1192.89" y="527.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order2 (750,000 samples, 0.01%)</title><rect x="55.5" y="181" width="0.1" height="15.0" fill="rgb(208,162,47)" rx="2" ry="2" />
<text  x="58.47" y="191.5" ></text>
</g>
<g >
<title>operator new (4,500,000 samples, 0.08%)</title><rect x="260.5" y="101" width="0.9" height="15.0" fill="rgb(223,177,11)" rx="2" ry="2" />
<text  x="263.46" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateInnerNode (750,000 samples, 0.01%)</title><rect x="209.1" y="181" width="0.1" height="15.0" fill="rgb(234,4,48)" rx="2" ry="2" />
<text  x="212.08" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateInnerNode (58,750,000 samples, 1.05%)</title><rect x="267.3" y="213" width="12.4" height="15.0" fill="rgb(217,36,42)" rx="2" ry="2" />
<text  x="270.27" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (500,000 samples, 0.01%)</title><rect x="107.2" y="165" width="0.1" height="15.0" fill="rgb(211,220,41)" rx="2" ry="2" />
<text  x="110.16" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateLeafNode (750,000 samples, 0.01%)</title><rect x="78.8" y="149" width="0.1" height="15.0" fill="rgb(237,194,10)" rx="2" ry="2" />
<text  x="81.75" y="159.5" ></text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (2,250,000 samples, 0.04%)</title><rect x="128.5" y="149" width="0.5" height="15.0" fill="rgb(250,111,4)" rx="2" ry="2" />
<text  x="131.55" y="159.5" ></text>
</g>
<g >
<title>[unknown] (2,500,000 samples, 0.04%)</title><rect x="1146.3" y="501" width="0.5" height="15.0" fill="rgb(223,43,2)" rx="2" ry="2" />
<text  x="1149.28" y="511.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order (2,250,000 samples, 0.04%)</title><rect x="137.8" y="197" width="0.5" height="15.0" fill="rgb(221,57,35)" rx="2" ry="2" />
<text  x="140.79" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::FinishPartialSMO (14,000,000 samples, 0.25%)</title><rect x="206.4" y="197" width="2.9" height="15.0" fill="rgb(231,209,1)" rx="2" ry="2" />
<text  x="209.39" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::AddGarbageNode (1,750,000 samples, 0.03%)</title><rect x="266.0" y="149" width="0.4" height="15.0" fill="rgb(237,167,44)" rx="2" ry="2" />
<text  x="269.00" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (7,500,000 samples, 0.13%)</title><rect x="207.1" y="181" width="1.6" height="15.0" fill="rgb(249,115,10)" rx="2" ry="2" />
<text  x="210.07" y="191.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="501" width="1093.7" height="15.0" fill="rgb(222,91,54)" rx="2" ry="2" />
<text  x="55.61" y="511.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateSiblingChain (500,000 samples, 0.01%)</title><rect x="1122.4" y="213" width="0.1" height="15.0" fill="rgb(222,114,49)" rx="2" ry="2" />
<text  x="1125.41" y="223.5" ></text>
</g>
<g >
<title>void std::advance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, long&gt; (1,250,000 samples, 0.02%)</title><rect x="104.6" y="69" width="0.2" height="15.0" fill="rgb(236,164,14)" rx="2" ry="2" />
<text  x="107.58" y="79.5" ></text>
</g>
<g >
<title>util::Distribution&lt; (133,500,000 samples, 2.39%)</title><rect x="1161.4" y="309" width="28.2" height="15.0" fill="rgb(209,107,38)" rx="2" ry="2" />
<text  x="1164.43" y="319.5" >u..</text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta*&gt;::load (750,000 samples, 0.01%)</title><rect x="132.6" y="181" width="0.1" height="15.0" fill="rgb(247,48,22)" rx="2" ry="2" />
<text  x="135.56" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TryConsolidateNode (263,750,000 samples, 4.72%)</title><rect x="211.6" y="197" width="55.7" height="15.0" fill="rgb(223,45,48)" rx="2" ry="2" />
<text  x="214.56" y="207.5" >bwtre..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (500,000 samples, 0.01%)</title><rect x="111.2" y="181" width="0.1" height="15.0" fill="rgb(213,13,20)" rx="2" ry="2" />
<text  x="114.18" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::Allocate (18,500,000 samples, 0.33%)</title><rect x="131.9" y="213" width="3.9" height="15.0" fill="rgb(222,100,6)" rx="2" ry="2" />
<text  x="134.88" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (1,000,000 samples, 0.02%)</title><rect x="838.0" y="197" width="0.2" height="15.0" fill="rgb(225,105,53)" rx="2" ry="2" />
<text  x="841.00" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Destroy (1,000,000 samples, 0.02%)</title><rect x="1151.7" y="245" width="0.2" height="15.0" fill="rgb(225,140,17)" rx="2" ry="2" />
<text  x="1154.72" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreaterEqual (1,250,000 samples, 0.02%)</title><rect x="107.9" y="197" width="0.3" height="15.0" fill="rgb(208,13,51)" rx="2" ry="2" />
<text  x="110.90" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (34,250,000 samples, 0.61%)</title><rect x="68.4" y="149" width="7.2" height="15.0" fill="rgb(243,169,31)" rx="2" ry="2" />
<text  x="71.40" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (16,750,000 samples, 0.30%)</title><rect x="117.7" y="197" width="3.5" height="15.0" fill="rgb(242,199,6)" rx="2" ry="2" />
<text  x="120.67" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::FindSplitPoint (78,250,000 samples, 1.40%)</title><rect x="60.1" y="165" width="16.5" height="15.0" fill="rgb(245,0,14)" rx="2" ry="2" />
<text  x="63.11" y="175.5" ></text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, unsigned long&gt; const*, long&gt; (1,000,000 samples, 0.02%)</title><rect x="110.0" y="149" width="0.2" height="15.0" fill="rgb(209,164,29)" rx="2" ry="2" />
<text  x="113.01" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::GetSize (500,000 samples, 0.01%)</title><rect x="272.0" y="181" width="0.1" height="15.0" fill="rgb(249,96,52)" rx="2" ry="2" />
<text  x="274.97" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;long&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, long&gt; (750,000 samples, 0.01%)</title><rect x="265.8" y="117" width="0.2" height="15.0" fill="rgb(206,195,7)" rx="2" ry="2" />
<text  x="268.79" y="127.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta*&gt;::load (500,000 samples, 0.01%)</title><rect x="135.7" y="197" width="0.1" height="15.0" fill="rgb(206,192,19)" rx="2" ry="2" />
<text  x="138.68" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (1,250,000 samples, 0.02%)</title><rect x="266.8" y="149" width="0.3" height="15.0" fill="rgb(253,213,49)" rx="2" ry="2" />
<text  x="269.79" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetLowKeyPair (1,750,000 samples, 0.03%)</title><rect x="131.2" y="229" width="0.4" height="15.0" fill="rgb(216,223,24)" rx="2" ry="2" />
<text  x="134.19" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetNextNodeID (1,250,000 samples, 0.02%)</title><rect x="278.5" y="181" width="0.2" height="15.0" fill="rgb(246,229,25)" rx="2" ry="2" />
<text  x="281.47" y="191.5" ></text>
</g>
<g >
<title>testing::TestInfo::Run (184,250,000 samples, 3.30%)</title><rect x="1150.8" y="389" width="38.9" height="15.0" fill="rgb(214,134,25)" rx="2" ry="2" />
<text  x="1153.77" y="399.5" >tes..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeMetaData::NodeMetaData (500,000 samples, 0.01%)</title><rect x="139.6" y="165" width="0.1" height="15.0" fill="rgb(235,8,18)" rx="2" ry="2" />
<text  x="142.64" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (2,500,000 samples, 0.04%)</title><rect x="155.7" y="165" width="0.6" height="15.0" fill="rgb(214,54,10)" rx="2" ry="2" />
<text  x="158.74" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator::operator (6,750,000 samples, 0.12%)</title><rect x="1090.2" y="149" width="1.5" height="15.0" fill="rgb(235,148,49)" rx="2" ry="2" />
<text  x="1093.25" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (500,000 samples, 0.01%)</title><rect x="271.2" y="197" width="0.1" height="15.0" fill="rgb(212,170,0)" rx="2" ry="2" />
<text  x="274.23" y="207.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (750,000 samples, 0.01%)</title><rect x="128.1" y="133" width="0.1" height="15.0" fill="rgb(221,200,42)" rx="2" ry="2" />
<text  x="131.07" y="143.5" ></text>
</g>
<g >
<title>std::operator&amp; (750,000 samples, 0.01%)</title><rect x="211.3" y="165" width="0.2" height="15.0" fill="rgb(239,27,54)" rx="2" ry="2" />
<text  x="214.35" y="175.5" ></text>
</g>
<g >
<title>operator new (15,250,000 samples, 0.27%)</title><rect x="257.2" y="85" width="3.3" height="15.0" fill="rgb(209,27,48)" rx="2" ry="2" />
<text  x="260.24" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateNode (119,250,000 samples, 2.13%)</title><rect x="80.4" y="181" width="25.2" height="15.0" fill="rgb(219,159,3)" rx="2" ry="2" />
<text  x="83.44" y="191.5" >b..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ValueCmpEqual (1,109,750,000 samples, 19.86%)</title><rect x="838.2" y="197" width="234.4" height="15.0" fill="rgb(216,197,4)" rx="2" ry="2" />
<text  x="841.21" y="207.5" >bwtree::BwTree&lt;long, long, test..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Begin (4,500,000 samples, 0.08%)</title><rect x="154.8" y="165" width="0.9" height="15.0" fill="rgb(212,8,21)" rx="2" ry="2" />
<text  x="157.79" y="175.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::load (4,500,000 samples, 0.08%)</title><rect x="210.4" y="165" width="0.9" height="15.0" fill="rgb(238,101,23)" rx="2" ry="2" />
<text  x="213.40" y="175.5" ></text>
</g>
<g >
<title>[unknown] (500,000 samples, 0.01%)</title><rect x="1146.3" y="277" width="0.1" height="15.0" fill="rgb(222,1,8)" rx="2" ry="2" />
<text  x="1149.28" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::Begin (500,000 samples, 0.01%)</title><rect x="272.0" y="165" width="0.1" height="15.0" fill="rgb(209,107,17)" rx="2" ry="2" />
<text  x="274.97" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (13,000,000 samples, 0.23%)</title><rect x="11.6" y="325" width="2.8" height="15.0" fill="rgb(253,227,50)" rx="2" ry="2" />
<text  x="14.64" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt;::_Val_comp_iter (1,000,000 samples, 0.02%)</title><rect x="272.3" y="149" width="0.3" height="15.0" fill="rgb(206,6,23)" rx="2" ry="2" />
<text  x="275.34" y="159.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;unsigned long&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, unsigned long&gt; (500,000 samples, 0.01%)</title><rect x="111.5" y="197" width="0.1" height="15.0" fill="rgb(251,121,39)" rx="2" ry="2" />
<text  x="114.49" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::CHUNK_SIZE (500,000 samples, 0.01%)</title><rect x="213.1" y="133" width="0.1" height="15.0" fill="rgb(250,172,47)" rx="2" ry="2" />
<text  x="216.09" y="143.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (500,000 samples, 0.01%)</title><rect x="209.2" y="117" width="0.1" height="15.0" fill="rgb(251,98,28)" rx="2" ry="2" />
<text  x="212.24" y="127.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (750,000 samples, 0.01%)</title><rect x="264.4" y="37" width="0.2" height="15.0" fill="rgb(208,134,3)" rx="2" ry="2" />
<text  x="267.42" y="47.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (750,000 samples, 0.01%)</title><rect x="154.5" y="181" width="0.2" height="15.0" fill="rgb(226,128,41)" rx="2" ry="2" />
<text  x="157.53" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (1,500,000 samples, 0.03%)</title><rect x="1151.4" y="245" width="0.3" height="15.0" fill="rgb(246,175,35)" rx="2" ry="2" />
<text  x="1154.40" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward&lt;false, true, std::random_access_iterator_tag&gt;::__copy_move_b&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*&gt; (750,000 samples, 0.01%)</title><rect x="102.9" y="37" width="0.1" height="15.0" fill="rgb(227,203,38)" rx="2" ry="2" />
<text  x="105.89" y="47.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::End (500,000 samples, 0.01%)</title><rect x="107.7" y="197" width="0.1" height="15.0" fill="rgb(254,61,32)" rx="2" ry="2" />
<text  x="110.74" y="207.5" ></text>
</g>
<g >
<title>std::operator| (750,000 samples, 0.01%)</title><rect x="138.1" y="181" width="0.2" height="15.0" fill="rgb(243,48,3)" rx="2" ry="2" />
<text  x="141.11" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (750,000 samples, 0.01%)</title><rect x="56.7" y="213" width="0.2" height="15.0" fill="rgb(240,172,9)" rx="2" ry="2" />
<text  x="59.73" y="223.5" ></text>
</g>
<g >
<title>std::equal_to&lt;long&gt;::operator (11,750,000 samples, 0.21%)</title><rect x="123.4" y="181" width="2.5" height="15.0" fill="rgb(208,108,40)" rx="2" ry="2" />
<text  x="126.43" y="191.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::GarbageNode*&gt;::compare_exchange_strong (1,000,000 samples, 0.02%)</title><rect x="266.0" y="133" width="0.2" height="15.0" fill="rgb(209,141,43)" rx="2" ry="2" />
<text  x="269.00" y="143.5" ></text>
</g>
<g >
<title>std::equal_to&lt;long&gt;::operator (509,250,000 samples, 9.12%)</title><rect x="965.0" y="181" width="107.6" height="15.0" fill="rgb(230,116,52)" rx="2" ry="2" />
<text  x="968.05" y="191.5" >std::equal_to..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (201,750,000 samples, 3.61%)</title><rect x="10.0" y="485" width="42.6" height="15.0" fill="rgb(236,62,53)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >std:..</text>
</g>
<g >
<title>____wcstold_l_internal (5,000,000 samples, 0.09%)</title><rect x="1147.0" y="501" width="1.0" height="15.0" fill="rgb(221,6,51)" rx="2" ry="2" />
<text  x="1149.96" y="511.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator::operator (1,500,000 samples, 0.03%)</title><rect x="265.4" y="69" width="0.3" height="15.0" fill="rgb(218,63,32)" rx="2" ry="2" />
<text  x="268.37" y="79.5" ></text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (12,750,000 samples, 0.23%)</title><rect x="102.1" y="117" width="2.7" height="15.0" fill="rgb(245,48,29)" rx="2" ry="2" />
<text  x="105.15" y="127.5" ></text>
</g>
<g >
<title>std::hash&lt;long&gt;::operator (750,000 samples, 0.01%)</title><rect x="215.8" y="69" width="0.1" height="15.0" fill="rgb(230,37,3)" rx="2" ry="2" />
<text  x="218.78" y="79.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, long const&amp;&gt; (500,000 samples, 0.01%)</title><rect x="56.2" y="213" width="0.1" height="15.0" fill="rgb(251,142,8)" rx="2" ry="2" />
<text  x="59.15" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (7,000,000 samples, 0.13%)</title><rect x="263.5" y="85" width="1.5" height="15.0" fill="rgb(250,225,39)" rx="2" ry="2" />
<text  x="266.52" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (1,250,000 samples, 0.02%)</title><rect x="215.9" y="117" width="0.3" height="15.0" fill="rgb(215,113,42)" rx="2" ry="2" />
<text  x="218.94" y="127.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt;::pair&lt;long, long, true&gt; (1,250,000 samples, 0.02%)</title><rect x="139.9" y="197" width="0.3" height="15.0" fill="rgb(221,125,13)" rx="2" ry="2" />
<text  x="142.90" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsDeltaNode (1,500,000 samples, 0.03%)</title><rect x="154.1" y="181" width="0.3" height="15.0" fill="rgb(245,7,19)" rx="2" ry="2" />
<text  x="157.05" y="191.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, BwtreeTest_ConcurrentSkewedDelete_10_Test::TestBody (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="277" width="1093.7" height="15.0" fill="rgb(239,163,3)" rx="2" ry="2" />
<text  x="55.61" y="287.5" >void std::__invoke_impl&lt;void, BwtreeTest_ConcurrentSkewedDelete_10_Test::TestBody</text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (3,250,000 samples, 0.06%)</title><rect x="265.1" y="101" width="0.7" height="15.0" fill="rgb(249,43,1)" rx="2" ry="2" />
<text  x="268.11" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (500,000 samples, 0.01%)</title><rect x="279.2" y="165" width="0.1" height="15.0" fill="rgb(247,119,9)" rx="2" ry="2" />
<text  x="282.20" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateLeafNode (500,000 samples, 0.01%)</title><rect x="209.2" y="149" width="0.1" height="15.0" fill="rgb(220,57,43)" rx="2" ry="2" />
<text  x="212.24" y="159.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, unsigned long&gt; const*&gt;::iterator_category std::__iterator_category&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (750,000 samples, 0.01%)</title><rect x="275.9" y="149" width="0.1" height="15.0" fill="rgb(205,167,53)" rx="2" ry="2" />
<text  x="278.88" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateInnerNode (500,000 samples, 0.01%)</title><rect x="80.5" y="165" width="0.1" height="15.0" fill="rgb(222,190,29)" rx="2" ry="2" />
<text  x="83.50" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::GetSize (750,000 samples, 0.01%)</title><rect x="108.6" y="181" width="0.1" height="15.0" fill="rgb(254,41,32)" rx="2" ry="2" />
<text  x="111.59" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateInnerNode (500,000 samples, 0.01%)</title><rect x="140.2" y="229" width="0.1" height="15.0" fill="rgb(236,132,3)" rx="2" ry="2" />
<text  x="143.17" y="239.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInnerRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InnerDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInner (500,000 samples, 0.01%)</title><rect x="80.5" y="133" width="0.1" height="15.0" fill="rgb(206,112,30)" rx="2" ry="2" />
<text  x="83.50" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::GetIndexPair (1,000,000 samples, 0.02%)</title><rect x="101.9" y="117" width="0.2" height="15.0" fill="rgb(206,144,29)" rx="2" ry="2" />
<text  x="104.94" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TakeNodeSnapshot (4,500,000 samples, 0.08%)</title><rect x="79.0" y="197" width="1.0" height="15.0" fill="rgb(227,144,45)" rx="2" ry="2" />
<text  x="82.02" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (500,000 samples, 0.01%)</title><rect x="263.2" y="69" width="0.1" height="15.0" fill="rgb(249,202,27)" rx="2" ry="2" />
<text  x="266.15" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (750,000 samples, 0.01%)</title><rect x="111.1" y="197" width="0.2" height="15.0" fill="rgb(221,181,3)" rx="2" ry="2" />
<text  x="114.12" y="207.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (114,000,000 samples, 2.04%)</title><rect x="81.5" y="133" width="24.1" height="15.0" fill="rgb(220,4,43)" rx="2" ry="2" />
<text  x="84.50" y="143.5" >v..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::DeltaNode::DeltaNode (750,000 samples, 0.01%)</title><rect x="56.0" y="197" width="0.2" height="15.0" fill="rgb(247,152,5)" rx="2" ry="2" />
<text  x="58.99" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::_Iter_comp_val (1,000,000 samples, 0.02%)</title><rect x="126.3" y="165" width="0.2" height="15.0" fill="rgb(218,204,7)" rx="2" ry="2" />
<text  x="129.28" y="175.5" ></text>
</g>
<g >
<title>[unknown] (2,250,000 samples, 0.04%)</title><rect x="1146.3" y="485" width="0.5" height="15.0" fill="rgb(212,179,43)" rx="2" ry="2" />
<text  x="1149.28" y="495.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (750,000 samples, 0.01%)</title><rect x="114.3" y="197" width="0.2" height="15.0" fill="rgb(235,111,49)" rx="2" ry="2" />
<text  x="117.34" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (19,000,000 samples, 0.34%)</title><rect x="64.4" y="149" width="4.0" height="15.0" fill="rgb(210,129,41)" rx="2" ry="2" />
<text  x="67.39" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateLeafNode (118,500,000 samples, 2.12%)</title><rect x="80.6" y="165" width="25.0" height="15.0" fill="rgb(238,191,25)" rx="2" ry="2" />
<text  x="83.60" y="175.5" >b..</text>
</g>
<g >
<title>[unknown] (500,000 samples, 0.01%)</title><rect x="1146.3" y="341" width="0.1" height="15.0" fill="rgb(216,7,51)" rx="2" ry="2" />
<text  x="1149.28" y="351.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Context::Context (1,000,000 samples, 0.02%)</title><rect x="53.7" y="229" width="0.2" height="15.0" fill="rgb(249,200,32)" rx="2" ry="2" />
<text  x="56.67" y="239.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="485" width="1093.7" height="15.0" fill="rgb(220,130,46)" rx="2" ry="2" />
<text  x="55.61" y="495.5" >std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread</text>
</g>
<g >
<title>std::remove_reference&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (750,000 samples, 0.01%)</title><rect x="263.3" y="69" width="0.1" height="15.0" fill="rgb(242,164,14)" rx="2" ry="2" />
<text  x="266.26" y="79.5" ></text>
</g>
<g >
<title>__vstrfmon_l_internal (184,250,000 samples, 3.30%)</title><rect x="1150.8" y="517" width="38.9" height="15.0" fill="rgb(242,61,39)" rx="2" ry="2" />
<text  x="1153.77" y="527.5" >__v..</text>
</g>
<g >
<title>double std::uniform_real_distribution&lt;double&gt;::operator (4,500,000 samples, 0.08%)</title><rect x="1187.1" y="261" width="0.9" height="15.0" fill="rgb(221,134,36)" rx="2" ry="2" />
<text  x="1190.10" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_result&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (201,750,000 samples, 3.61%)</title><rect x="10.0" y="453" width="42.6" height="15.0" fill="rgb(208,180,23)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >std:..</text>
</g>
<g >
<title>std::__invoke_result&lt;common::WorkerPool::AddThread (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="453" width="1093.7" height="15.0" fill="rgb(216,177,52)" rx="2" ry="2" />
<text  x="55.61" y="463.5" >std::__invoke_result&lt;common::WorkerPool::AddThread</text>
</g>
<g >
<title>std::pair&lt;long, long&gt;::pair&lt;long, true&gt; (500,000 samples, 0.01%)</title><rect x="265.8" y="101" width="0.2" height="15.0" fill="rgb(214,2,11)" rx="2" ry="2" />
<text  x="268.84" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Get (750,000 samples, 0.01%)</title><rect x="213.3" y="133" width="0.2" height="15.0" fill="rgb(222,64,52)" rx="2" ry="2" />
<text  x="216.30" y="143.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (19,000,000 samples, 0.34%)</title><rect x="71.6" y="133" width="4.0" height="15.0" fill="rgb(246,197,0)" rx="2" ry="2" />
<text  x="74.62" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::back (750,000 samples, 0.01%)</title><rect x="1160.9" y="309" width="0.2" height="15.0" fill="rgb(207,14,40)" rx="2" ry="2" />
<text  x="1163.90" y="319.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (2,000,000 samples, 0.04%)</title><rect x="1123.0" y="181" width="0.4" height="15.0" fill="rgb(227,89,14)" rx="2" ry="2" />
<text  x="1125.99" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (2,000,000 samples, 0.04%)</title><rect x="269.6" y="197" width="0.4" height="15.0" fill="rgb(254,7,19)" rx="2" ry="2" />
<text  x="272.59" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::~LeafNode (193,250,000 samples, 3.46%)</title><rect x="11.6" y="341" width="40.9" height="15.0" fill="rgb(228,211,7)" rx="2" ry="2" />
<text  x="14.64" y="351.5" >bwt..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::FindSplitPoint (230,750,000 samples, 4.13%)</title><rect x="157.4" y="165" width="48.7" height="15.0" fill="rgb(209,114,7)" rx="2" ry="2" />
<text  x="160.38" y="175.5" >bwtr..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (500,000 samples, 0.01%)</title><rect x="213.5" y="133" width="0.1" height="15.0" fill="rgb(205,14,26)" rx="2" ry="2" />
<text  x="216.46" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDeleteNode::LeafDeleteNode (1,250,000 samples, 0.02%)</title><rect x="56.0" y="229" width="0.3" height="15.0" fill="rgb(243,8,45)" rx="2" ry="2" />
<text  x="58.99" y="239.5" ></text>
</g>
<g >
<title>round_and_return (500,000 samples, 0.01%)</title><rect x="1148.1" y="501" width="0.1" height="15.0" fill="rgb(210,73,6)" rx="2" ry="2" />
<text  x="1151.07" y="511.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a1&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (1,500,000 samples, 0.03%)</title><rect x="102.7" y="69" width="0.3" height="15.0" fill="rgb(208,75,38)" rx="2" ry="2" />
<text  x="105.73" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator::operator (1,250,000 samples, 0.02%)</title><rect x="109.7" y="133" width="0.3" height="15.0" fill="rgb(254,113,2)" rx="2" ry="2" />
<text  x="112.70" y="143.5" ></text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (500,000 samples, 0.01%)</title><rect x="105.4" y="69" width="0.1" height="15.0" fill="rgb(248,29,12)" rx="2" ry="2" />
<text  x="108.37" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; __gnu_cxx::__ops::__iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (1,250,000 samples, 0.02%)</title><rect x="126.2" y="181" width="0.3" height="15.0" fill="rgb(215,96,14)" rx="2" ry="2" />
<text  x="129.23" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (3,250,000 samples, 0.06%)</title><rect x="103.9" y="53" width="0.7" height="15.0" fill="rgb(247,36,37)" rx="2" ry="2" />
<text  x="106.89" y="63.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (1,750,000 samples, 0.03%)</title><rect x="263.0" y="85" width="0.4" height="15.0" fill="rgb(245,198,31)" rx="2" ry="2" />
<text  x="266.05" y="95.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::compare_exchange_strong (4,250,000 samples, 0.08%)</title><rect x="55.0" y="213" width="0.9" height="15.0" fill="rgb(224,124,20)" rx="2" ry="2" />
<text  x="58.04" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::~ElasticNode (180,250,000 samples, 3.23%)</title><rect x="14.4" y="325" width="38.1" height="15.0" fill="rgb(253,219,22)" rx="2" ry="2" />
<text  x="17.38" y="335.5" >bwt..</text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt;::pair&lt;unsigned long, true&gt; (500,000 samples, 0.01%)</title><rect x="277.3" y="181" width="0.1" height="15.0" fill="rgb(231,25,32)" rx="2" ry="2" />
<text  x="280.30" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;unsigned long&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, unsigned long&gt; (1,250,000 samples, 0.02%)</title><rect x="110.3" y="181" width="0.3" height="15.0" fill="rgb(244,48,26)" rx="2" ry="2" />
<text  x="113.33" y="191.5" ></text>
</g>
<g >
<title>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (184,250,000 samples, 3.30%)</title><rect x="1150.8" y="357" width="38.9" height="15.0" fill="rgb(206,119,26)" rx="2" ry="2" />
<text  x="1153.77" y="367.5" >voi..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (500,000 samples, 0.01%)</title><rect x="111.2" y="165" width="0.1" height="15.0" fill="rgb(218,57,37)" rx="2" ry="2" />
<text  x="114.18" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTreeBase::GetInnerDeltaChainLengthThreshold (1,000,000 samples, 0.02%)</title><rect x="267.1" y="181" width="0.2" height="15.0" fill="rgb(211,22,35)" rx="2" ry="2" />
<text  x="270.06" y="191.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt;::operator (750,000 samples, 0.01%)</title><rect x="108.9" y="165" width="0.1" height="15.0" fill="rgb(218,69,32)" rx="2" ry="2" />
<text  x="111.85" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (500,000 samples, 0.01%)</title><rect x="1146.2" y="245" width="0.1" height="15.0" fill="rgb(220,90,6)" rx="2" ry="2" />
<text  x="1149.17" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreaterEqual (750,000 samples, 0.01%)</title><rect x="837.8" y="181" width="0.2" height="15.0" fill="rgb(232,221,37)" rx="2" ry="2" />
<text  x="840.84" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::At (500,000 samples, 0.01%)</title><rect x="165.8" y="149" width="0.1" height="15.0" fill="rgb(237,153,43)" rx="2" ry="2" />
<text  x="168.78" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::FreeEpochDeltaChain (200,000,000 samples, 3.58%)</title><rect x="10.2" y="357" width="42.3" height="15.0" fill="rgb(251,52,28)" rx="2" ry="2" />
<text  x="13.21" y="367.5" >bwt..</text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::load (2,000,000 samples, 0.04%)</title><rect x="79.5" y="165" width="0.5" height="15.0" fill="rgb(238,46,54)" rx="2" ry="2" />
<text  x="82.55" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Begin (7,000,000 samples, 0.13%)</title><rect x="62.9" y="149" width="1.5" height="15.0" fill="rgb(244,182,24)" rx="2" ry="2" />
<text  x="65.91" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (2,250,000 samples, 0.04%)</title><rect x="102.7" y="85" width="0.4" height="15.0" fill="rgb(229,158,44)" rx="2" ry="2" />
<text  x="105.67" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Insert (4,810,750,000 samples, 86.11%)</title><rect x="130.0" y="245" width="1016.2" height="15.0" fill="rgb(231,226,54)" rx="2" ry="2" />
<text  x="133.03" y="255.5" >bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (1,216,750,000 samples, 21.78%)</title><rect x="420.6" y="197" width="257.0" height="15.0" fill="rgb(248,211,39)" rx="2" ry="2" />
<text  x="423.57" y="207.5" >bwtree::BwTree&lt;long, long, test::B..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateLeafNode (500,000 samples, 0.01%)</title><rect x="1151.0" y="277" width="0.1" height="15.0" fill="rgb(218,229,54)" rx="2" ry="2" />
<text  x="1153.98" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (201,750,000 samples, 3.61%)</title><rect x="10.0" y="421" width="42.6" height="15.0" fill="rgb(251,164,12)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >bwtr..</text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (24,750,000 samples, 0.44%)</title><rect x="1088.0" y="181" width="5.2" height="15.0" fill="rgb(251,56,7)" rx="2" ry="2" />
<text  x="1090.98" y="191.5" ></text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (500,000 samples, 0.01%)</title><rect x="105.4" y="85" width="0.1" height="15.0" fill="rgb(253,201,15)" rx="2" ry="2" />
<text  x="108.37" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LocateSeparatorByKey (11,000,000 samples, 0.20%)</title><rect x="108.3" y="197" width="2.3" height="15.0" fill="rgb(228,103,5)" rx="2" ry="2" />
<text  x="111.27" y="207.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, BwtreeTest_ConcurrentSkewedDelete_10_Test::TestBody (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="293" width="1093.7" height="15.0" fill="rgb(217,159,52)" rx="2" ry="2" />
<text  x="55.61" y="303.5" >std::enable_if&lt;is_invocable_r_v&lt;void, BwtreeTest_ConcurrentSkewedDelete_10_Test::TestBody</text>
</g>
<g >
<title>[unknown] (1,750,000 samples, 0.03%)</title><rect x="1146.3" y="469" width="0.3" height="15.0" fill="rgb(241,66,15)" rx="2" ry="2" />
<text  x="1149.28" y="479.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (201,750,000 samples, 3.61%)</title><rect x="10.0" y="437" width="42.6" height="15.0" fill="rgb(243,104,4)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >void..</text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (13,500,000 samples, 0.24%)</title><rect x="126.2" y="197" width="2.8" height="15.0" fill="rgb(210,174,21)" rx="2" ry="2" />
<text  x="129.17" y="207.5" ></text>
</g>
<g >
<title>unsigned long std::__detail::__mod&lt;unsigned long, 2147483647ul, 16807ul, 0ul&gt; (1,250,000 samples, 0.02%)</title><rect x="1187.7" y="197" width="0.3" height="15.0" fill="rgb(228,44,50)" rx="2" ry="2" />
<text  x="1190.73" y="207.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::GarbageNode*&gt;::load (750,000 samples, 0.01%)</title><rect x="266.2" y="133" width="0.2" height="15.0" fill="rgb(212,147,41)" rx="2" ry="2" />
<text  x="269.21" y="143.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (750,000 samples, 0.01%)</title><rect x="78.8" y="117" width="0.1" height="15.0" fill="rgb(246,184,20)" rx="2" ry="2" />
<text  x="81.75" y="127.5" ></text>
</g>
<g >
<title>[unknown] (1,250,000 samples, 0.02%)</title><rect x="1146.3" y="389" width="0.2" height="15.0" fill="rgb(220,31,40)" rx="2" ry="2" />
<text  x="1149.28" y="399.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&amp;&gt;::type&amp;&amp; std::move&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&amp;&gt; (750,000 samples, 0.01%)</title><rect x="1087.7" y="165" width="0.1" height="15.0" fill="rgb(254,203,48)" rx="2" ry="2" />
<text  x="1090.66" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator::operator (4,500,000 samples, 0.08%)</title><rect x="274.7" y="133" width="0.9" height="15.0" fill="rgb(240,71,15)" rx="2" ry="2" />
<text  x="277.66" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (54,750,000 samples, 0.98%)</title><rect x="170.1" y="149" width="11.5" height="15.0" fill="rgb(248,36,25)" rx="2" ry="2" />
<text  x="173.05" y="159.5" ></text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (750,000 samples, 0.01%)</title><rect x="81.3" y="133" width="0.2" height="15.0" fill="rgb(252,88,44)" rx="2" ry="2" />
<text  x="84.34" y="143.5" ></text>
</g>
<g >
<title>all (5,586,500,000 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(254,121,33)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::ClearEpoch (42,250,000 samples, 0.76%)</title><rect x="1151.2" y="277" width="9.0" height="15.0" fill="rgb(208,175,23)" rx="2" ry="2" />
<text  x="1154.24" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (750,000 samples, 0.01%)</title><rect x="78.8" y="133" width="0.1" height="15.0" fill="rgb(228,199,13)" rx="2" ry="2" />
<text  x="81.75" y="143.5" ></text>
</g>
<g >
<title>std::atomic&lt;char*&gt;::fetch_sub (1,000,000 samples, 0.02%)</title><rect x="133.1" y="181" width="0.2" height="15.0" fill="rgb(253,67,45)" rx="2" ry="2" />
<text  x="136.09" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (750,000 samples, 0.01%)</title><rect x="80.3" y="165" width="0.1" height="15.0" fill="rgb(230,54,38)" rx="2" ry="2" />
<text  x="83.28" y="175.5" ></text>
</g>
<g >
<title>std::operator&amp; (1,000,000 samples, 0.02%)</title><rect x="55.7" y="197" width="0.2" height="15.0" fill="rgb(254,132,22)" rx="2" ry="2" />
<text  x="58.68" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::ElasticNode (750,000 samples, 0.01%)</title><rect x="81.1" y="117" width="0.2" height="15.0" fill="rgb(211,86,50)" rx="2" ry="2" />
<text  x="84.13" y="127.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::operator[] (3,250,000 samples, 0.06%)</title><rect x="1160.2" y="309" width="0.7" height="15.0" fill="rgb(218,5,32)" rx="2" ry="2" />
<text  x="1163.16" y="319.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta*&gt;::load (1,250,000 samples, 0.02%)</title><rect x="11.4" y="309" width="0.2" height="15.0" fill="rgb(211,229,19)" rx="2" ry="2" />
<text  x="14.37" y="319.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::FreeEpochDeltaChain (42,250,000 samples, 0.76%)</title><rect x="1151.2" y="261" width="9.0" height="15.0" fill="rgb(228,145,5)" rx="2" ry="2" />
<text  x="1154.24" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (1,250,000 samples, 0.02%)</title><rect x="266.8" y="165" width="0.3" height="15.0" fill="rgb(226,198,37)" rx="2" ry="2" />
<text  x="269.79" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ValueCmpEqual (107,500,000 samples, 1.92%)</title><rect x="1123.4" y="213" width="22.7" height="15.0" fill="rgb(241,90,23)" rx="2" ry="2" />
<text  x="1126.41" y="223.5" >b..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (500,000 samples, 0.01%)</title><rect x="108.2" y="197" width="0.1" height="15.0" fill="rgb(235,55,13)" rx="2" ry="2" />
<text  x="111.17" y="207.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&amp;&gt;::type&amp;&amp; std::move&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&amp;&gt; (500,000 samples, 0.01%)</title><rect x="272.6" y="149" width="0.1" height="15.0" fill="rgb(244,176,14)" rx="2" ry="2" />
<text  x="275.55" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::~BwTree (42,250,000 samples, 0.76%)</title><rect x="1151.2" y="309" width="9.0" height="15.0" fill="rgb(253,70,46)" rx="2" ry="2" />
<text  x="1154.24" y="319.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (500,000 samples, 0.01%)</title><rect x="266.6" y="181" width="0.1" height="15.0" fill="rgb(243,166,35)" rx="2" ry="2" />
<text  x="269.64" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTreeBase::GetInnerDeltaChainLengthThreshold (500,000 samples, 0.01%)</title><rect x="105.8" y="181" width="0.1" height="15.0" fill="rgb(229,3,39)" rx="2" ry="2" />
<text  x="108.79" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetNode (7,000,000 samples, 0.13%)</title><rect x="210.0" y="181" width="1.5" height="15.0" fill="rgb(247,17,17)" rx="2" ry="2" />
<text  x="213.03" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::End (500,000 samples, 0.01%)</title><rect x="154.4" y="165" width="0.1" height="15.0" fill="rgb(223,57,53)" rx="2" ry="2" />
<text  x="157.42" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetItemCount (500,000 samples, 0.01%)</title><rect x="153.9" y="181" width="0.2" height="15.0" fill="rgb(228,177,52)" rx="2" ry="2" />
<text  x="156.95" y="191.5" ></text>
</g>
<g >
<title>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (184,250,000 samples, 3.30%)</title><rect x="1150.8" y="453" width="38.9" height="15.0" fill="rgb(232,157,21)" rx="2" ry="2" />
<text  x="1153.77" y="463.5" >boo..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::InlineAllocate (3,000,000 samples, 0.05%)</title><rect x="53.9" y="229" width="0.6" height="15.0" fill="rgb(231,43,54)" rx="2" ry="2" />
<text  x="56.88" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AdjustNodeSize (92,250,000 samples, 1.65%)</title><rect x="57.3" y="197" width="19.5" height="15.0" fill="rgb(218,159,36)" rx="2" ry="2" />
<text  x="60.31" y="207.5" ></text>
</g>
<g >
<title>_nss_dns_gethostbyaddr2_r (1,000,000 samples, 0.02%)</title><rect x="1189.7" y="517" width="0.2" height="15.0" fill="rgb(226,22,35)" rx="2" ry="2" />
<text  x="1192.68" y="527.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::GetIndexPair (750,000 samples, 0.01%)</title><rect x="104.3" y="37" width="0.1" height="15.0" fill="rgb(225,53,16)" rx="2" ry="2" />
<text  x="107.26" y="47.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (1,250,000 samples, 0.02%)</title><rect x="57.0" y="213" width="0.3" height="15.0" fill="rgb(230,26,2)" rx="2" ry="2" />
<text  x="60.00" y="223.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (3,500,000 samples, 0.06%)</title><rect x="103.8" y="69" width="0.8" height="15.0" fill="rgb(223,151,49)" rx="2" ry="2" />
<text  x="106.84" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator- (500,000 samples, 0.01%)</title><rect x="1160.9" y="293" width="0.1" height="15.0" fill="rgb(231,73,41)" rx="2" ry="2" />
<text  x="1163.90" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (750,000 samples, 0.01%)</title><rect x="82.4" y="117" width="0.2" height="15.0" fill="rgb(211,176,49)" rx="2" ry="2" />
<text  x="85.45" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::InlineAllocate (20,250,000 samples, 0.36%)</title><rect x="131.6" y="229" width="4.3" height="15.0" fill="rgb(240,223,29)" rx="2" ry="2" />
<text  x="134.61" y="239.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (136,000,000 samples, 2.43%)</title><rect x="1093.7" y="197" width="28.7" height="15.0" fill="rgb(245,130,45)" rx="2" ry="2" />
<text  x="1096.68" y="207.5" >te..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (2,000,000 samples, 0.04%)</title><rect x="208.7" y="181" width="0.4" height="15.0" fill="rgb(236,131,18)" rx="2" ry="2" />
<text  x="211.66" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (5,750,000 samples, 0.10%)</title><rect x="77.1" y="181" width="1.2" height="15.0" fill="rgb(243,211,2)" rx="2" ry="2" />
<text  x="80.06" y="191.5" ></text>
</g>
<g >
<title>double std::generate_canonical&lt;double, 53ul, std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt; &gt; (3,750,000 samples, 0.07%)</title><rect x="1187.3" y="229" width="0.7" height="15.0" fill="rgb(242,151,32)" rx="2" ry="2" />
<text  x="1190.25" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (148,000,000 samples, 2.65%)</title><rect x="229.2" y="101" width="31.3" height="15.0" fill="rgb(208,77,30)" rx="2" ry="2" />
<text  x="232.20" y="111.5" >bw..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InstallNodeToReplace (1,250,000 samples, 0.02%)</title><rect x="266.4" y="149" width="0.2" height="15.0" fill="rgb(215,212,6)" rx="2" ry="2" />
<text  x="269.37" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::InstallNodeToReplace (12,000,000 samples, 0.21%)</title><rect x="136.1" y="229" width="2.5" height="15.0" fill="rgb(210,45,48)" rx="2" ry="2" />
<text  x="139.10" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* const&amp; std::min&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (1,500,000 samples, 0.03%)</title><rect x="279.3" y="197" width="0.3" height="15.0" fill="rgb(236,109,49)" rx="2" ry="2" />
<text  x="282.31" y="207.5" ></text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, unsigned long&gt; const*, long&gt; (4,750,000 samples, 0.09%)</title><rect x="276.2" y="149" width="1.0" height="15.0" fill="rgb(238,201,11)" rx="2" ry="2" />
<text  x="279.19" y="159.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (448,000,000 samples, 8.02%)</title><rect x="742.7" y="181" width="94.7" height="15.0" fill="rgb(209,140,35)" rx="2" ry="2" />
<text  x="745.73" y="191.5" >test::BwTre..</text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (500,000 samples, 0.01%)</title><rect x="263.4" y="85" width="0.1" height="15.0" fill="rgb(219,68,11)" rx="2" ry="2" />
<text  x="266.42" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetValue (2,000,000 samples, 0.04%)</title><rect x="1150.8" y="309" width="0.4" height="15.0" fill="rgb(223,46,20)" rx="2" ry="2" />
<text  x="1153.82" y="319.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc::operator (1,000,000 samples, 0.02%)</title><rect x="215.7" y="85" width="0.2" height="15.0" fill="rgb(209,111,44)" rx="2" ry="2" />
<text  x="218.73" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a2&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (1,250,000 samples, 0.02%)</title><rect x="102.8" y="53" width="0.2" height="15.0" fill="rgb(219,142,17)" rx="2" ry="2" />
<text  x="105.78" y="63.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafInsertNode::LeafInsertNode (7,250,000 samples, 0.13%)</title><rect x="138.6" y="229" width="1.6" height="15.0" fill="rgb(252,196,50)" rx="2" ry="2" />
<text  x="141.64" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::PerformGarbageCollection (201,750,000 samples, 3.61%)</title><rect x="10.0" y="389" width="42.6" height="15.0" fill="rgb(208,121,12)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >bwtr..</text>
</g>
<g >
<title>decltype  (500,000 samples, 0.01%)</title><rect x="1160.4" y="229" width="0.1" height="15.0" fill="rgb(222,163,13)" rx="2" ry="2" />
<text  x="1163.43" y="239.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::__ExistsScalar (2,500,000 samples, 0.04%)</title><rect x="215.0" y="101" width="0.5" height="15.0" fill="rgb(206,52,25)" rx="2" ry="2" />
<text  x="217.99" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (4,250,000 samples, 0.08%)</title><rect x="1122.5" y="213" width="0.9" height="15.0" fill="rgb(215,40,18)" rx="2" ry="2" />
<text  x="1125.51" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::copy_backward&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (2,750,000 samples, 0.05%)</title><rect x="262.4" y="101" width="0.5" height="15.0" fill="rgb(237,115,27)" rx="2" ry="2" />
<text  x="265.36" y="111.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (750,000 samples, 0.01%)</title><rect x="129.2" y="197" width="0.2" height="15.0" fill="rgb(246,203,25)" rx="2" ry="2" />
<text  x="132.24" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AdjustNodeSize (251,500,000 samples, 4.50%)</title><rect x="153.1" y="197" width="53.1" height="15.0" fill="rgb(216,84,3)" rx="2" ry="2" />
<text  x="156.10" y="207.5" >bwtre..</text>
</g>
<g >
<title>bwtree_test (5,586,500,000 samples, 100.00%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(219,94,13)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >bwtree_test</text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (500,000 samples, 0.01%)</title><rect x="103.4" y="69" width="0.1" height="15.0" fill="rgb(212,122,4)" rx="2" ry="2" />
<text  x="106.41" y="79.5" ></text>
</g>
<g >
<title>std::function&lt;void  (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="325" width="1093.7" height="15.0" fill="rgb(240,73,32)" rx="2" ry="2" />
<text  x="55.61" y="335.5" >std::function&lt;void </text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1,500,000 samples, 0.03%)</title><rect x="1160.3" y="277" width="0.3" height="15.0" fill="rgb(210,1,51)" rx="2" ry="2" />
<text  x="1163.27" y="287.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt;::difference_type std::distance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (500,000 samples, 0.01%)</title><rect x="264.6" y="69" width="0.1" height="15.0" fill="rgb(227,177,36)" rx="2" ry="2" />
<text  x="267.63" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetNextNodeID (1,000,000 samples, 0.02%)</title><rect x="110.8" y="181" width="0.2" height="15.0" fill="rgb(207,164,54)" rx="2" ry="2" />
<text  x="113.75" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (2,000,000 samples, 0.04%)</title><rect x="264.2" y="53" width="0.4" height="15.0" fill="rgb(240,197,54)" rx="2" ry="2" />
<text  x="267.15" y="63.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::ClearEpoch (201,500,000 samples, 3.61%)</title><rect x="10.1" y="373" width="42.5" height="15.0" fill="rgb(242,155,21)" rx="2" ry="2" />
<text  x="13.05" y="383.5" >bwtr..</text>
</g>
<g >
<title>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt; (184,250,000 samples, 3.30%)</title><rect x="1150.8" y="437" width="38.9" height="15.0" fill="rgb(206,109,19)" rx="2" ry="2" />
<text  x="1153.77" y="447.5" >boo..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsDeltaNode (3,500,000 samples, 0.06%)</title><rect x="211.8" y="181" width="0.8" height="15.0" fill="rgb(234,151,50)" rx="2" ry="2" />
<text  x="214.82" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetLowKeyNodeID (500,000 samples, 0.01%)</title><rect x="107.2" y="197" width="0.1" height="15.0" fill="rgb(231,189,10)" rx="2" ry="2" />
<text  x="110.16" y="207.5" ></text>
</g>
<g >
<title>std::hash&lt;long&gt;::operator (1,000,000 samples, 0.02%)</title><rect x="215.3" y="69" width="0.2" height="15.0" fill="rgb(238,64,27)" rx="2" ry="2" />
<text  x="218.31" y="79.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;long&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, long&gt; (1,000,000 samples, 0.02%)</title><rect x="129.0" y="197" width="0.2" height="15.0" fill="rgb(251,88,10)" rx="2" ry="2" />
<text  x="132.02" y="207.5" ></text>
</g>
<g >
<title>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt; (184,250,000 samples, 3.30%)</title><rect x="1150.8" y="341" width="38.9" height="15.0" fill="rgb(222,165,20)" rx="2" ry="2" />
<text  x="1153.77" y="351.5" >voi..</text>
</g>
<g >
<title>BwtreeTest_ConcurrentSkewedDelete_10_Test::TestBody (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="261" width="1093.7" height="15.0" fill="rgb(212,147,54)" rx="2" ry="2" />
<text  x="55.61" y="271.5" >BwtreeTest_ConcurrentSkewedDelete_10_Test::TestBody</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__niter_base&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (750,000 samples, 0.01%)</title><rect x="262.6" y="69" width="0.1" height="15.0" fill="rgb(221,184,41)" rx="2" ry="2" />
<text  x="265.57" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (6,000,000 samples, 0.11%)</title><rect x="103.6" y="85" width="1.2" height="15.0" fill="rgb(223,203,22)" rx="2" ry="2" />
<text  x="106.57" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateSiblingChain (3,750,000 samples, 0.07%)</title><rect x="278.1" y="197" width="0.8" height="15.0" fill="rgb(221,126,39)" rx="2" ry="2" />
<text  x="281.10" y="207.5" ></text>
</g>
<g >
<title>____wcstof_l_internal (2,000,000 samples, 0.04%)</title><rect x="1148.8" y="517" width="0.4" height="15.0" fill="rgb(225,123,27)" rx="2" ry="2" />
<text  x="1151.81" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="389" width="1093.7" height="15.0" fill="rgb(226,117,25)" rx="2" ry="2" />
<text  x="55.61" y="399.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::__lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; &gt; (2,750,000 samples, 0.05%)</title><rect x="104.9" y="101" width="0.6" height="15.0" fill="rgb(231,67,26)" rx="2" ry="2" />
<text  x="107.89" y="111.5" ></text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, unsigned long&gt; const*, long&gt; (1,000,000 samples, 0.02%)</title><rect x="110.0" y="133" width="0.2" height="15.0" fill="rgb(206,178,3)" rx="2" ry="2" />
<text  x="113.01" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (134,000,000 samples, 2.40%)</title><rect x="24.2" y="309" width="28.3" height="15.0" fill="rgb(246,122,19)" rx="2" ry="2" />
<text  x="27.15" y="319.5" >b..</text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, long const&amp;&gt; (1,750,000 samples, 0.03%)</title><rect x="139.8" y="213" width="0.4" height="15.0" fill="rgb(224,1,5)" rx="2" ry="2" />
<text  x="142.80" y="223.5" ></text>
</g>
<g >
<title>[unknown] (1,000,000 samples, 0.02%)</title><rect x="1146.3" y="373" width="0.2" height="15.0" fill="rgb(254,227,21)" rx="2" ry="2" />
<text  x="1149.28" y="383.5" ></text>
</g>
<g >
<title>std::function&lt;void  (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="405" width="1093.7" height="15.0" fill="rgb(240,47,11)" rx="2" ry="2" />
<text  x="55.61" y="415.5" >std::function&lt;void </text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateNode (500,000 samples, 0.01%)</title><rect x="209.2" y="165" width="0.1" height="15.0" fill="rgb(238,62,23)" rx="2" ry="2" />
<text  x="212.24" y="175.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (2,250,000 samples, 0.04%)</title><rect x="264.2" y="69" width="0.4" height="15.0" fill="rgb(245,141,17)" rx="2" ry="2" />
<text  x="267.15" y="79.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta*&gt;::load (750,000 samples, 0.01%)</title><rect x="1151.8" y="213" width="0.1" height="15.0" fill="rgb(232,59,5)" rx="2" ry="2" />
<text  x="1154.77" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (41,250,000 samples, 0.74%)</title><rect x="140.7" y="213" width="8.8" height="15.0" fill="rgb(225,196,31)" rx="2" ry="2" />
<text  x="143.75" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::~EpochManager (42,250,000 samples, 0.76%)</title><rect x="1151.2" y="293" width="9.0" height="15.0" fill="rgb(227,6,21)" rx="2" ry="2" />
<text  x="1154.24" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (750,000 samples, 0.01%)</title><rect x="149.5" y="213" width="0.1" height="15.0" fill="rgb(242,46,25)" rx="2" ry="2" />
<text  x="152.46" y="223.5" ></text>
</g>
<g >
<title>[unknown] (9,000,000 samples, 0.16%)</title><rect x="1146.3" y="517" width="1.9" height="15.0" fill="rgb(252,37,52)" rx="2" ry="2" />
<text  x="1149.28" y="527.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::Destroy (750,000 samples, 0.01%)</title><rect x="1151.8" y="229" width="0.1" height="15.0" fill="rgb(223,182,34)" rx="2" ry="2" />
<text  x="1154.77" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::GrowChunk (2,000,000 samples, 0.04%)</title><rect x="132.3" y="197" width="0.4" height="15.0" fill="rgb(209,163,52)" rx="2" ry="2" />
<text  x="135.30" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; __gnu_cxx::__ops::__iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (2,000,000 samples, 0.04%)</title><rect x="1087.4" y="181" width="0.4" height="15.0" fill="rgb(247,225,23)" rx="2" ry="2" />
<text  x="1090.40" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (756,250,000 samples, 13.54%)</title><rect x="677.6" y="197" width="159.8" height="15.0" fill="rgb(225,210,3)" rx="2" ry="2" />
<text  x="680.62" y="207.5" >bwtree::BwTree&lt;long,..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc::operator (500,000 samples, 0.01%)</title><rect x="82.3" y="85" width="0.1" height="15.0" fill="rgb(207,97,41)" rx="2" ry="2" />
<text  x="85.29" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (105,750,000 samples, 1.89%)</title><rect x="181.6" y="149" width="22.4" height="15.0" fill="rgb(221,4,0)" rx="2" ry="2" />
<text  x="184.62" y="159.5" >b..</text>
</g>
<g >
<title>____wcstold_l_internal (7,250,000 samples, 0.13%)</title><rect x="1149.2" y="517" width="1.6" height="15.0" fill="rgb(247,148,52)" rx="2" ry="2" />
<text  x="1152.23" y="527.5" ></text>
</g>
<g >
<title>[unknown] (500,000 samples, 0.01%)</title><rect x="1146.3" y="261" width="0.1" height="15.0" fill="rgb(249,27,10)" rx="2" ry="2" />
<text  x="1149.28" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (1,000,000 samples, 0.02%)</title><rect x="57.6" y="165" width="0.2" height="15.0" fill="rgb(235,71,27)" rx="2" ry="2" />
<text  x="60.63" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::__upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; &gt; (21,250,000 samples, 0.38%)</title><rect x="272.7" y="165" width="4.5" height="15.0" fill="rgb(239,22,1)" rx="2" ry="2" />
<text  x="275.71" y="175.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (1,500,000 samples, 0.03%)</title><rect x="1091.4" y="133" width="0.3" height="15.0" fill="rgb(228,228,37)" rx="2" ry="2" />
<text  x="1094.36" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (7,250,000 samples, 0.13%)</title><rect x="103.3" y="101" width="1.5" height="15.0" fill="rgb(216,122,1)" rx="2" ry="2" />
<text  x="106.31" y="111.5" ></text>
</g>
<g >
<title>testing::UnitTest::Run (184,250,000 samples, 3.30%)</title><rect x="1150.8" y="469" width="38.9" height="15.0" fill="rgb(231,87,50)" rx="2" ry="2" />
<text  x="1153.77" y="479.5" >tes..</text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (500,000 samples, 0.01%)</title><rect x="108.1" y="165" width="0.1" height="15.0" fill="rgb(230,167,29)" rx="2" ry="2" />
<text  x="111.06" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::GetSplitSibling (243,250,000 samples, 4.35%)</title><rect x="154.7" y="181" width="51.4" height="15.0" fill="rgb(209,115,44)" rx="2" ry="2" />
<text  x="157.74" y="191.5" >bwtre..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (750,000 samples, 0.01%)</title><rect x="105.6" y="181" width="0.2" height="15.0" fill="rgb(233,31,8)" rx="2" ry="2" />
<text  x="108.63" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateLeafNode (3,989,750,000 samples, 71.42%)</title><rect x="279.7" y="213" width="842.7" height="15.0" fill="rgb(209,21,16)" rx="2" ry="2" />
<text  x="282.68" y="223.5" >bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;l..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::TryAllocate (14,000,000 samples, 0.25%)</title><rect x="132.7" y="197" width="3.0" height="15.0" fill="rgb(218,189,40)" rx="2" ry="2" />
<text  x="135.72" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (3,250,000 samples, 0.06%)</title><rect x="1122.7" y="197" width="0.7" height="15.0" fill="rgb(226,64,27)" rx="2" ry="2" />
<text  x="1125.73" y="207.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="469" width="1093.7" height="15.0" fill="rgb(220,140,37)" rx="2" ry="2" />
<text  x="55.61" y="479.5" >void std::thread::_Invoker&lt;std::tuple&lt;common::WorkerPool::AddThread</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::End (500,000 samples, 0.01%)</title><rect x="108.6" y="165" width="0.1" height="15.0" fill="rgb(243,109,1)" rx="2" ry="2" />
<text  x="111.64" y="175.5" ></text>
</g>
<g >
<title>testing::internal::UnitTestImpl::RunAllTests (184,250,000 samples, 3.30%)</title><rect x="1150.8" y="421" width="38.9" height="15.0" fill="rgb(242,120,43)" rx="2" ry="2" />
<text  x="1153.77" y="431.5" >tes..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Begin (750,000 samples, 0.01%)</title><rect x="420.4" y="197" width="0.2" height="15.0" fill="rgb(242,213,54)" rx="2" ry="2" />
<text  x="423.41" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (5,000,000 samples, 0.09%)</title><rect x="156.3" y="165" width="1.1" height="15.0" fill="rgb(221,213,23)" rx="2" ry="2" />
<text  x="159.33" y="175.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (9,250,000 samples, 0.17%)</title><rect x="204.2" y="149" width="1.9" height="15.0" fill="rgb(242,53,18)" rx="2" ry="2" />
<text  x="207.17" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (23,250,000 samples, 0.42%)</title><rect x="1155.3" y="213" width="4.9" height="15.0" fill="rgb(228,80,40)" rx="2" ry="2" />
<text  x="1158.25" y="223.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (2,000,000 samples, 0.04%)</title><rect x="265.3" y="85" width="0.4" height="15.0" fill="rgb(216,113,8)" rx="2" ry="2" />
<text  x="268.26" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (500,000 samples, 0.01%)</title><rect x="209.3" y="197" width="0.1" height="15.0" fill="rgb(217,76,38)" rx="2" ry="2" />
<text  x="212.34" y="207.5" ></text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, unsigned long&gt; const*, long&gt; (2,500,000 samples, 0.04%)</title><rect x="276.7" y="133" width="0.5" height="15.0" fill="rgb(226,58,11)" rx="2" ry="2" />
<text  x="279.67" y="143.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (24,750,000 samples, 0.44%)</title><rect x="272.1" y="181" width="5.2" height="15.0" fill="rgb(227,47,22)" rx="2" ry="2" />
<text  x="275.08" y="191.5" ></text>
</g>
<g >
<title>int&amp; std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (1,250,000 samples, 0.02%)</title><rect x="1161.1" y="293" width="0.2" height="15.0" fill="rgb(217,211,9)" rx="2" ry="2" />
<text  x="1164.06" y="303.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyEqualityChecker::operator (4,500,000 samples, 0.08%)</title><rect x="75.7" y="149" width="0.9" height="15.0" fill="rgb(220,135,52)" rx="2" ry="2" />
<text  x="78.69" y="159.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::__InsertScalar (750,000 samples, 0.01%)</title><rect x="82.2" y="101" width="0.2" height="15.0" fill="rgb(208,224,52)" rx="2" ry="2" />
<text  x="85.24" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::LeaveEpoch (500,000 samples, 0.01%)</title><rect x="129.9" y="245" width="0.1" height="15.0" fill="rgb(251,13,41)" rx="2" ry="2" />
<text  x="132.92" y="255.5" ></text>
</g>
<g >
<title>[unknown] (500,000 samples, 0.01%)</title><rect x="1146.3" y="357" width="0.1" height="15.0" fill="rgb(245,39,22)" rx="2" ry="2" />
<text  x="1149.28" y="367.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (66,000,000 samples, 1.18%)</title><rect x="87.6" y="101" width="14.0" height="15.0" fill="rgb(248,219,39)" rx="2" ry="2" />
<text  x="90.62" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::JoinEpoch (1,250,000 samples, 0.02%)</title><rect x="54.5" y="229" width="0.3" height="15.0" fill="rgb(207,20,2)" rx="2" ry="2" />
<text  x="57.52" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (1,750,000 samples, 0.03%)</title><rect x="420.0" y="197" width="0.4" height="15.0" fill="rgb(213,77,38)" rx="2" ry="2" />
<text  x="423.04" y="207.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::compare_exchange_strong (750,000 samples, 0.01%)</title><rect x="266.5" y="133" width="0.1" height="15.0" fill="rgb(206,99,50)" rx="2" ry="2" />
<text  x="269.48" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::ThreadFunc (201,750,000 samples, 3.61%)</title><rect x="10.0" y="405" width="42.6" height="15.0" fill="rgb(207,171,37)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >bwtr..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (91,500,000 samples, 1.64%)</title><rect x="82.6" y="117" width="19.3" height="15.0" fill="rgb(249,39,6)" rx="2" ry="2" />
<text  x="85.61" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (4,000,000 samples, 0.07%)</title><rect x="58.8" y="165" width="0.9" height="15.0" fill="rgb(224,219,48)" rx="2" ry="2" />
<text  x="61.85" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TryConsolidateNode (122,750,000 samples, 2.20%)</title><rect x="80.0" y="197" width="25.9" height="15.0" fill="rgb(240,85,25)" rx="2" ry="2" />
<text  x="82.97" y="207.5" >b..</text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (1,000,000 samples, 0.02%)</title><rect x="213.6" y="133" width="0.2" height="15.0" fill="rgb(231,224,12)" rx="2" ry="2" />
<text  x="216.57" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Adaptor&lt;std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;, double&gt;::operator (3,750,000 samples, 0.07%)</title><rect x="1187.3" y="245" width="0.7" height="15.0" fill="rgb(246,158,30)" rx="2" ry="2" />
<text  x="1190.25" y="255.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;unsigned long&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, unsigned long&gt; (3,250,000 samples, 0.06%)</title><rect x="277.4" y="181" width="0.7" height="15.0" fill="rgb(211,87,54)" rx="2" ry="2" />
<text  x="280.41" y="191.5" ></text>
</g>
<g >
<title>[unknown] (500,000 samples, 0.01%)</title><rect x="1146.3" y="293" width="0.1" height="15.0" fill="rgb(220,68,29)" rx="2" ry="2" />
<text  x="1149.28" y="303.5" ></text>
</g>
<g >
<title>std::operator&amp; (500,000 samples, 0.01%)</title><rect x="135.6" y="181" width="0.1" height="15.0" fill="rgb(248,27,30)" rx="2" ry="2" />
<text  x="138.57" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::LeafDataNode (750,000 samples, 0.01%)</title><rect x="56.0" y="213" width="0.2" height="15.0" fill="rgb(227,202,44)" rx="2" ry="2" />
<text  x="58.99" y="223.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, long&gt; const*&gt;::iterator_category std::__iterator_category&lt;std::pair&lt;long, long&gt; const*&gt; (500,000 samples, 0.01%)</title><rect x="128.2" y="165" width="0.1" height="15.0" fill="rgb(235,39,38)" rx="2" ry="2" />
<text  x="131.23" y="175.5" ></text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (3,250,000 samples, 0.06%)</title><rect x="128.3" y="165" width="0.7" height="15.0" fill="rgb(229,195,6)" rx="2" ry="2" />
<text  x="131.34" y="175.5" ></text>
</g>
<g >
<title>operator new (1,750,000 samples, 0.03%)</title><rect x="101.6" y="101" width="0.3" height="15.0" fill="rgb(248,42,41)" rx="2" ry="2" />
<text  x="104.57" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::FinishPartialSMO (10,250,000 samples, 0.18%)</title><rect x="76.8" y="197" width="2.2" height="15.0" fill="rgb(254,174,10)" rx="2" ry="2" />
<text  x="79.80" y="207.5" ></text>
</g>
<g >
<title>____wcstod_l_internal (3,000,000 samples, 0.05%)</title><rect x="1148.2" y="517" width="0.6" height="15.0" fill="rgb(237,39,50)" rx="2" ry="2" />
<text  x="1151.18" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt;::pair&lt;unsigned long, true&gt; (2,250,000 samples, 0.04%)</title><rect x="277.6" y="165" width="0.4" height="15.0" fill="rgb(223,31,33)" rx="2" ry="2" />
<text  x="280.57" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ValueCmpEqual (20,250,000 samples, 0.36%)</title><rect x="121.6" y="197" width="4.3" height="15.0" fill="rgb(218,98,15)" rx="2" ry="2" />
<text  x="124.63" y="207.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, unsigned long&gt; const*&gt;::difference_type std::distance&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (750,000 samples, 0.01%)</title><rect x="275.7" y="149" width="0.2" height="15.0" fill="rgb(212,7,0)" rx="2" ry="2" />
<text  x="278.72" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::JumpToLeftSibling (500,000 samples, 0.01%)</title><rect x="78.6" y="181" width="0.1" height="15.0" fill="rgb(209,33,29)" rx="2" ry="2" />
<text  x="81.59" y="191.5" ></text>
</g>
<g >
<title>BwtreeTest_ConcurrentSkewedDelete_10_Test::TestBody (184,000,000 samples, 3.29%)</title><rect x="1150.8" y="325" width="38.8" height="15.0" fill="rgb(224,37,23)" rx="2" ry="2" />
<text  x="1153.77" y="335.5" >Bwt..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (500,000 samples, 0.01%)</title><rect x="209.2" y="133" width="0.1" height="15.0" fill="rgb(216,150,33)" rx="2" ry="2" />
<text  x="212.24" y="143.5" ></text>
</g>
<g >
<title>[unknown] (1,500,000 samples, 0.03%)</title><rect x="1146.3" y="421" width="0.3" height="15.0" fill="rgb(209,82,35)" rx="2" ry="2" />
<text  x="1149.28" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* const&amp; std::min&lt;std::pair&lt;long, unsigned long&gt; const*&gt; (1,000,000 samples, 0.02%)</title><rect x="111.3" y="197" width="0.2" height="15.0" fill="rgb(217,0,22)" rx="2" ry="2" />
<text  x="114.28" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateLeafNode (255,000,000 samples, 4.56%)</title><rect x="212.8" y="165" width="53.8" height="15.0" fill="rgb(227,15,52)" rx="2" ry="2" />
<text  x="215.77" y="175.5" >bwtre..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::Begin (4,000,000 samples, 0.07%)</title><rect x="58.0" y="165" width="0.8" height="15.0" fill="rgb(250,200,48)" rx="2" ry="2" />
<text  x="61.00" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::DeltaNode::DeltaNode (2,000,000 samples, 0.04%)</title><rect x="139.3" y="197" width="0.4" height="15.0" fill="rgb(236,22,18)" rx="2" ry="2" />
<text  x="142.32" y="207.5" ></text>
</g>
<g >
<title>____wcstold_l_internal (500,000 samples, 0.01%)</title><rect x="1146.4" y="357" width="0.1" height="15.0" fill="rgb(230,6,35)" rx="2" ry="2" />
<text  x="1149.38" y="367.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, long&gt; const*&gt;::difference_type std::distance&lt;std::pair&lt;long, long&gt; const*&gt; (750,000 samples, 0.01%)</title><rect x="204.0" y="149" width="0.2" height="15.0" fill="rgb(240,143,27)" rx="2" ry="2" />
<text  x="207.01" y="159.5" ></text>
</g>
<g >
<title>__divtf3 (750,000 samples, 0.01%)</title><rect x="1161.5" y="293" width="0.1" height="15.0" fill="rgb(238,32,5)" rx="2" ry="2" />
<text  x="1164.48" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (750,000 samples, 0.01%)</title><rect x="129.4" y="213" width="0.2" height="15.0" fill="rgb(252,156,51)" rx="2" ry="2" />
<text  x="132.39" y="223.5" ></text>
</g>
<g >
<title>testing::TestSuite::Run (184,250,000 samples, 3.30%)</title><rect x="1150.8" y="405" width="38.9" height="15.0" fill="rgb(231,12,23)" rx="2" ry="2" />
<text  x="1153.77" y="415.5" >tes..</text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (2,000,000 samples, 0.04%)</title><rect x="104.9" y="85" width="0.5" height="15.0" fill="rgb(236,208,51)" rx="2" ry="2" />
<text  x="107.94" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::~ElasticNode (37,000,000 samples, 0.66%)</title><rect x="1152.3" y="229" width="7.9" height="15.0" fill="rgb(205,103,50)" rx="2" ry="2" />
<text  x="1155.35" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt;::pair&lt;long, true&gt; (1,250,000 samples, 0.02%)</title><rect x="1093.4" y="181" width="0.3" height="15.0" fill="rgb(223,112,26)" rx="2" ry="2" />
<text  x="1096.42" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetNextNodeID (1,000,000 samples, 0.02%)</title><rect x="837.6" y="181" width="0.2" height="15.0" fill="rgb(213,150,25)" rx="2" ry="2" />
<text  x="840.57" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (3,500,000 samples, 0.06%)</title><rect x="265.1" y="117" width="0.7" height="15.0" fill="rgb(208,16,38)" rx="2" ry="2" />
<text  x="268.05" y="127.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (8,250,000 samples, 0.15%)</title><rect x="1089.9" y="165" width="1.8" height="15.0" fill="rgb(217,129,15)" rx="2" ry="2" />
<text  x="1092.93" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetNode (3,750,000 samples, 0.07%)</title><rect x="79.2" y="181" width="0.8" height="15.0" fill="rgb(228,171,9)" rx="2" ry="2" />
<text  x="82.18" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::~LeafNode (38,750,000 samples, 0.69%)</title><rect x="1152.0" y="245" width="8.2" height="15.0" fill="rgb(241,114,5)" rx="2" ry="2" />
<text  x="1154.98" y="255.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (1,000,000 samples, 0.02%)</title><rect x="108.0" y="181" width="0.2" height="15.0" fill="rgb(239,166,2)" rx="2" ry="2" />
<text  x="110.95" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (2,000,000 samples, 0.04%)</title><rect x="278.9" y="197" width="0.4" height="15.0" fill="rgb(219,155,52)" rx="2" ry="2" />
<text  x="281.89" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (1,500,000 samples, 0.03%)</title><rect x="1152.0" y="229" width="0.3" height="15.0" fill="rgb(249,67,7)" rx="2" ry="2" />
<text  x="1155.03" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (750,000 samples, 0.01%)</title><rect x="837.8" y="165" width="0.2" height="15.0" fill="rgb(207,124,5)" rx="2" ry="2" />
<text  x="840.84" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllSepsOnInner (500,000 samples, 0.01%)</title><rect x="80.5" y="149" width="0.1" height="15.0" fill="rgb(243,79,22)" rx="2" ry="2" />
<text  x="83.50" y="159.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (201,750,000 samples, 3.61%)</title><rect x="10.0" y="501" width="42.6" height="15.0" fill="rgb(236,181,11)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >std:..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetNextNodeID (1,000,000 samples, 0.02%)</title><rect x="121.3" y="181" width="0.2" height="15.0" fill="rgb(213,172,39)" rx="2" ry="2" />
<text  x="124.31" y="191.5" ></text>
</g>
<g >
<title>main (184,250,000 samples, 3.30%)</title><rect x="1150.8" y="501" width="38.9" height="15.0" fill="rgb(222,132,10)" rx="2" ry="2" />
<text  x="1153.77" y="511.5" >main</text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::operator (750,000 samples, 0.01%)</title><rect x="1087.8" y="181" width="0.2" height="15.0" fill="rgb(220,222,54)" rx="2" ry="2" />
<text  x="1090.82" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateSiblingChain (3,000,000 samples, 0.05%)</title><rect x="837.4" y="197" width="0.6" height="15.0" fill="rgb(241,143,26)" rx="2" ry="2" />
<text  x="840.36" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt;::_Iter_comp_val (750,000 samples, 0.01%)</title><rect x="1087.5" y="165" width="0.2" height="15.0" fill="rgb(218,182,42)" rx="2" ry="2" />
<text  x="1090.50" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; __gnu_cxx::__ops::__val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (2,250,000 samples, 0.04%)</title><rect x="272.2" y="165" width="0.5" height="15.0" fill="rgb(253,12,54)" rx="2" ry="2" />
<text  x="275.18" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::upper_bound&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (10,000,000 samples, 0.18%)</title><rect x="262.9" y="101" width="2.2" height="15.0" fill="rgb(209,217,7)" rx="2" ry="2" />
<text  x="265.94" y="111.5" ></text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; (7,000,000 samples, 0.13%)</title><rect x="108.8" y="181" width="1.5" height="15.0" fill="rgb(211,76,1)" rx="2" ry="2" />
<text  x="111.80" y="191.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (750,000 samples, 0.01%)</title><rect x="837.8" y="149" width="0.2" height="15.0" fill="rgb(223,86,54)" rx="2" ry="2" />
<text  x="840.84" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::GetIndexPair (2,250,000 samples, 0.04%)</title><rect x="261.4" y="117" width="0.5" height="15.0" fill="rgb(251,57,30)" rx="2" ry="2" />
<text  x="264.41" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ValueCmpEqual (1,750,000 samples, 0.03%)</title><rect x="129.6" y="213" width="0.3" height="15.0" fill="rgb(240,207,10)" rx="2" ry="2" />
<text  x="132.55" y="223.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order2 (1,750,000 samples, 0.03%)</title><rect x="137.4" y="197" width="0.4" height="15.0" fill="rgb(247,141,4)" rx="2" ry="2" />
<text  x="140.42" y="207.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::Insert (1,750,000 samples, 0.03%)</title><rect x="215.6" y="117" width="0.3" height="15.0" fill="rgb(246,194,39)" rx="2" ry="2" />
<text  x="218.57" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LocateSeparatorByKey (32,000,000 samples, 0.57%)</title><rect x="271.3" y="197" width="6.8" height="15.0" fill="rgb(246,138,12)" rx="2" ry="2" />
<text  x="274.34" y="207.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt;::operator (2,000,000 samples, 0.04%)</title><rect x="109.5" y="149" width="0.5" height="15.0" fill="rgb(236,133,31)" rx="2" ry="2" />
<text  x="112.54" y="159.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator::operator (1,750,000 samples, 0.03%)</title><rect x="105.0" y="69" width="0.4" height="15.0" fill="rgb(231,79,50)" rx="2" ry="2" />
<text  x="108.00" y="79.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (3,000,000 samples, 0.05%)</title><rect x="275.0" y="117" width="0.6" height="15.0" fill="rgb(240,138,41)" rx="2" ry="2" />
<text  x="277.98" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateNode (256,000,000 samples, 4.58%)</title><rect x="212.6" y="181" width="54.0" height="15.0" fill="rgb(252,184,34)" rx="2" ry="2" />
<text  x="215.56" y="191.5" >bwtre..</text>
</g>
<g >
<title>double std::uniform_real_distribution&lt;double&gt;::operator (5,000,000 samples, 0.09%)</title><rect x="1187.0" y="277" width="1.1" height="15.0" fill="rgb(227,221,3)" rx="2" ry="2" />
<text  x="1190.04" y="287.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, long&gt; const*&gt;::iterator_category std::__iterator_category&lt;std::pair&lt;long, long&gt; const*&gt; (1,000,000 samples, 0.02%)</title><rect x="1091.8" y="165" width="0.2" height="15.0" fill="rgb(229,118,36)" rx="2" ry="2" />
<text  x="1094.78" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (500,000 samples, 0.01%)</title><rect x="1161.2" y="261" width="0.1" height="15.0" fill="rgb(240,48,11)" rx="2" ry="2" />
<text  x="1164.17" y="271.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__copy_move_backward_a&lt;false, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (2,000,000 samples, 0.04%)</title><rect x="262.5" y="85" width="0.4" height="15.0" fill="rgb(209,4,52)" rx="2" ry="2" />
<text  x="265.46" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::__miter_base&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (500,000 samples, 0.01%)</title><rect x="103.1" y="85" width="0.2" height="15.0" fill="rgb(233,100,33)" rx="2" ry="2" />
<text  x="106.15" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (750,000 samples, 0.01%)</title><rect x="129.4" y="197" width="0.2" height="15.0" fill="rgb(240,200,19)" rx="2" ry="2" />
<text  x="132.39" y="207.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__strip_reference_wrapper&lt;std::decay&lt;long const&amp;&gt;::type&gt;::__type, std::__strip_reference_wrapper&lt;std::decay&lt;long&gt;::type&gt;::__type&gt; std::make_pair&lt;long const&amp;, long&gt; (2,250,000 samples, 0.04%)</title><rect x="1093.2" y="197" width="0.5" height="15.0" fill="rgb(234,24,46)" rx="2" ry="2" />
<text  x="1096.21" y="207.5" ></text>
</g>
<g >
<title>bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (15,000,000 samples, 0.27%)</title><rect x="261.9" y="117" width="3.2" height="15.0" fill="rgb(243,145,2)" rx="2" ry="2" />
<text  x="264.88" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (251,500,000 samples, 4.50%)</title><rect x="212.9" y="149" width="53.1" height="15.0" fill="rgb(215,110,35)" rx="2" ry="2" />
<text  x="215.88" y="159.5" >bwtre..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc::operator (1,750,000 samples, 0.03%)</title><rect x="215.2" y="85" width="0.3" height="15.0" fill="rgb(205,21,12)" rx="2" ry="2" />
<text  x="218.15" y="95.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (500,000 samples, 0.01%)</title><rect x="271.1" y="181" width="0.1" height="15.0" fill="rgb(247,75,25)" rx="2" ry="2" />
<text  x="274.13" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (1,500,000 samples, 0.03%)</title><rect x="78.3" y="181" width="0.3" height="15.0" fill="rgb(254,204,45)" rx="2" ry="2" />
<text  x="81.28" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetLowKeyPair (500,000 samples, 0.01%)</title><rect x="53.6" y="229" width="0.1" height="15.0" fill="rgb(220,156,31)" rx="2" ry="2" />
<text  x="56.56" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (1,500,000 samples, 0.03%)</title><rect x="279.0" y="181" width="0.3" height="15.0" fill="rgb(229,44,39)" rx="2" ry="2" />
<text  x="281.99" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (2,250,000 samples, 0.04%)</title><rect x="212.1" y="165" width="0.5" height="15.0" fill="rgb(207,102,40)" rx="2" ry="2" />
<text  x="215.09" y="175.5" ></text>
</g>
<g >
<title>std::atomic&lt;char*&gt;::load (1,000,000 samples, 0.02%)</title><rect x="54.1" y="181" width="0.3" height="15.0" fill="rgb(225,9,21)" rx="2" ry="2" />
<text  x="57.15" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsDeltaNode (1,000,000 samples, 0.02%)</title><rect x="57.6" y="181" width="0.2" height="15.0" fill="rgb(234,162,38)" rx="2" ry="2" />
<text  x="60.63" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::End (14,500,000 samples, 0.26%)</title><rect x="114.6" y="197" width="3.0" height="15.0" fill="rgb(246,182,29)" rx="2" ry="2" />
<text  x="117.56" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateLeafNode (84,250,000 samples, 1.51%)</title><rect x="111.6" y="213" width="17.8" height="15.0" fill="rgb(216,227,3)" rx="2" ry="2" />
<text  x="114.60" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt;::pair&lt;long, true&gt; (750,000 samples, 0.01%)</title><rect x="129.1" y="181" width="0.1" height="15.0" fill="rgb(251,90,1)" rx="2" ry="2" />
<text  x="132.08" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateSiblingChain (2,500,000 samples, 0.04%)</title><rect x="110.6" y="197" width="0.5" height="15.0" fill="rgb(238,23,22)" rx="2" ry="2" />
<text  x="113.60" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (750,000 samples, 0.01%)</title><rect x="1160.7" y="277" width="0.2" height="15.0" fill="rgb(234,0,29)" rx="2" ry="2" />
<text  x="1163.69" y="287.5" ></text>
</g>
<g >
<title>testing::Test::Run (184,250,000 samples, 3.30%)</title><rect x="1150.8" y="373" width="38.9" height="15.0" fill="rgb(243,171,31)" rx="2" ry="2" />
<text  x="1153.77" y="383.5" >tes..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpGreaterEqual (750,000 samples, 0.01%)</title><rect x="278.7" y="181" width="0.2" height="15.0" fill="rgb(205,57,3)" rx="2" ry="2" />
<text  x="281.73" y="191.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (5,379,500,000 samples, 96.29%)</title><rect x="10.0" y="517" width="1136.3" height="15.0" fill="rgb(232,55,11)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >[libstdc++.so.6.0.30]</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::GetIndexPair (500,000 samples, 0.01%)</title><rect x="264.3" y="37" width="0.1" height="15.0" fill="rgb(246,204,6)" rx="2" ry="2" />
<text  x="267.26" y="47.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::Insert (750,000 samples, 0.01%)</title><rect x="82.2" y="117" width="0.2" height="15.0" fill="rgb(216,190,22)" rx="2" ry="2" />
<text  x="85.24" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::TraverseReadOptimized (1,500,000 samples, 0.03%)</title><rect x="1150.8" y="293" width="0.3" height="15.0" fill="rgb(208,123,15)" rx="2" ry="2" />
<text  x="1153.82" y="303.5" ></text>
</g>
<g >
<title>void std::thread::_Invoker&lt;std::tuple&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::StartThread (201,750,000 samples, 3.61%)</title><rect x="10.0" y="469" width="42.6" height="15.0" fill="rgb(218,46,54)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >void..</text>
</g>
<g >
<title>____wcstold_l_internal (500,000 samples, 0.01%)</title><rect x="1146.6" y="469" width="0.2" height="15.0" fill="rgb(224,23,15)" rx="2" ry="2" />
<text  x="1149.65" y="479.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateInnerNode (27,000,000 samples, 0.48%)</title><rect x="105.9" y="213" width="5.7" height="15.0" fill="rgb(210,145,12)" rx="2" ry="2" />
<text  x="108.90" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::PostInnerInsertNode (500,000 samples, 0.01%)</title><rect x="209.2" y="181" width="0.1" height="15.0" fill="rgb(226,61,18)" rx="2" ry="2" />
<text  x="212.24" y="191.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::Exists (500,000 samples, 0.01%)</title><rect x="213.0" y="133" width="0.1" height="15.0" fill="rgb(222,184,5)" rx="2" ry="2" />
<text  x="215.99" y="143.5" ></text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (3,750,000 samples, 0.07%)</title><rect x="1092.4" y="149" width="0.8" height="15.0" fill="rgb(252,31,50)" rx="2" ry="2" />
<text  x="1095.41" y="159.5" ></text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::Exists (2,750,000 samples, 0.05%)</title><rect x="215.0" y="117" width="0.6" height="15.0" fill="rgb(248,56,31)" rx="2" ry="2" />
<text  x="217.99" y="127.5" ></text>
</g>
<g >
<title>[unknown] (1,500,000 samples, 0.03%)</title><rect x="1146.3" y="437" width="0.3" height="15.0" fill="rgb(233,72,22)" rx="2" ry="2" />
<text  x="1149.28" y="447.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LoadNodeID (541,500,000 samples, 9.69%)</title><rect x="152.9" y="213" width="114.4" height="15.0" fill="rgb(207,125,27)" rx="2" ry="2" />
<text  x="155.89" y="223.5" >bwtree::BwTree..</text>
</g>
<g >
<title>bwtree::BloomFilter&lt;std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairEqualityChecker, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairHashFunc&gt;::__InsertScalar (1,750,000 samples, 0.03%)</title><rect x="215.6" y="101" width="0.3" height="15.0" fill="rgb(224,101,10)" rx="2" ry="2" />
<text  x="218.57" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (5,000,000 samples, 0.09%)</title><rect x="10.3" y="341" width="1.1" height="15.0" fill="rgb(231,146,15)" rx="2" ry="2" />
<text  x="13.32" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Mod&lt;unsigned long, 2147483647ul, 16807ul, 0ul, true, true&gt;::__calc (1,250,000 samples, 0.02%)</title><rect x="1187.7" y="181" width="0.3" height="15.0" fill="rgb(214,51,35)" rx="2" ry="2" />
<text  x="1190.73" y="191.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (500,000 samples, 0.01%)</title><rect x="104.4" y="37" width="0.1" height="15.0" fill="rgb(231,21,36)" rx="2" ry="2" />
<text  x="107.42" y="47.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafNode::GetSplitSibling (88,500,000 samples, 1.58%)</title><rect x="58.0" y="181" width="18.7" height="15.0" fill="rgb(226,190,50)" rx="2" ry="2" />
<text  x="61.00" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (500,000 samples, 0.01%)</title><rect x="129.4" y="181" width="0.2" height="15.0" fill="rgb(225,1,36)" rx="2" ry="2" />
<text  x="132.45" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ConsolidateNode (750,000 samples, 0.01%)</title><rect x="78.8" y="165" width="0.1" height="15.0" fill="rgb(219,12,52)" rx="2" ry="2" />
<text  x="81.75" y="175.5" ></text>
</g>
<g >
<title>std::iterator_traits&lt;std::pair&lt;long, long&gt; const*&gt;::difference_type std::__distance&lt;std::pair&lt;long, long&gt; const*&gt; (750,000 samples, 0.01%)</title><rect x="204.0" y="133" width="0.2" height="15.0" fill="rgb(207,77,17)" rx="2" ry="2" />
<text  x="207.01" y="143.5" ></text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, test::MultiThreadTestUtil::RunThreadsUntilFinish (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="373" width="1093.7" height="15.0" fill="rgb(245,106,50)" rx="2" ry="2" />
<text  x="55.61" y="383.5" >std::enable_if&lt;is_invocable_r_v&lt;void, test::MultiThreadTestUtil::RunThreadsUntilFinish</text>
</g>
<g >
<title>std::operator&amp; (500,000 samples, 0.01%)</title><rect x="138.0" y="181" width="0.1" height="15.0" fill="rgb(249,49,29)" rx="2" ry="2" />
<text  x="141.00" y="191.5" ></text>
</g>
<g >
<title>[unknown] (1,750,000 samples, 0.03%)</title><rect x="1146.3" y="453" width="0.3" height="15.0" fill="rgb(228,227,39)" rx="2" ry="2" />
<text  x="1149.28" y="463.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, long&gt; &gt;::PushBack (214,000,000 samples, 3.83%)</title><rect x="216.2" y="117" width="45.2" height="15.0" fill="rgb(218,151,28)" rx="2" ry="2" />
<text  x="219.21" y="127.5" >bwtr..</text>
</g>
<g >
<title>std::operator&amp; (750,000 samples, 0.01%)</title><rect x="132.6" y="165" width="0.1" height="15.0" fill="rgb(241,95,14)" rx="2" ry="2" />
<text  x="135.56" y="175.5" ></text>
</g>
<g >
<title>util::Zipf::Generate (124,750,000 samples, 2.23%)</title><rect x="1163.3" y="293" width="26.3" height="15.0" fill="rgb(230,49,14)" rx="2" ry="2" />
<text  x="1166.28" y="303.5" >u..</text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (5,750,000 samples, 0.10%)</title><rect x="1092.0" y="165" width="1.2" height="15.0" fill="rgb(246,189,38)" rx="2" ry="2" />
<text  x="1094.99" y="175.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, test::MultiThreadTestUtil::RunThreadsUntilFinish (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="357" width="1093.7" height="15.0" fill="rgb(251,203,34)" rx="2" ry="2" />
<text  x="55.61" y="367.5" >void std::__invoke_impl&lt;void, test::MultiThreadTestUtil::RunThreadsUntilFinish</text>
</g>
<g >
<title>long&amp;&amp; std::forward&lt;long&gt; (750,000 samples, 0.01%)</title><rect x="1093.3" y="181" width="0.1" height="15.0" fill="rgb(209,5,17)" rx="2" ry="2" />
<text  x="1096.26" y="191.5" ></text>
</g>
<g >
<title>void std::advance&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, long&gt; (1,250,000 samples, 0.02%)</title><rect x="264.7" y="69" width="0.3" height="15.0" fill="rgb(243,7,47)" rx="2" ry="2" />
<text  x="267.74" y="79.5" ></text>
</g>
<g >
<title>std::__cmpexch_failure_order (1,000,000 samples, 0.02%)</title><rect x="55.5" y="197" width="0.2" height="15.0" fill="rgb(242,100,35)" rx="2" ry="2" />
<text  x="58.47" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode::LeafDataNode (3,000,000 samples, 0.05%)</title><rect x="139.1" y="213" width="0.6" height="15.0" fill="rgb(245,192,42)" rx="2" ry="2" />
<text  x="142.11" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NodeSnapshot::IsLeaf (1,500,000 samples, 0.03%)</title><rect x="266.7" y="181" width="0.4" height="15.0" fill="rgb(244,228,26)" rx="2" ry="2" />
<text  x="269.74" y="191.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetType (1,000,000 samples, 0.02%)</title><rect x="154.2" y="165" width="0.2" height="15.0" fill="rgb(243,2,38)" rx="2" ry="2" />
<text  x="157.16" y="175.5" ></text>
</g>
<g >
<title>RUN_ALL_TESTS (184,250,000 samples, 3.30%)</title><rect x="1150.8" y="485" width="38.9" height="15.0" fill="rgb(239,9,18)" rx="2" ry="2" />
<text  x="1153.77" y="495.5" >RUN..</text>
</g>
<g >
<title>[unknown] (1,500,000 samples, 0.03%)</title><rect x="1146.3" y="405" width="0.3" height="15.0" fill="rgb(239,73,23)" rx="2" ry="2" />
<text  x="1149.28" y="415.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::NavigateSiblingChain (750,000 samples, 0.01%)</title><rect x="1150.8" y="261" width="0.2" height="15.0" fill="rgb(219,119,49)" rx="2" ry="2" />
<text  x="1153.82" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (7,750,000 samples, 0.14%)</title><rect x="1161.6" y="293" width="1.7" height="15.0" fill="rgb(211,207,37)" rx="2" ry="2" />
<text  x="1164.64" y="303.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (118,000,000 samples, 2.11%)</title><rect x="80.7" y="149" width="24.9" height="15.0" fill="rgb(250,164,0)" rx="2" ry="2" />
<text  x="83.65" y="159.5" >b..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator::operator (3,750,000 samples, 0.07%)</title><rect x="127.4" y="149" width="0.8" height="15.0" fill="rgb(232,147,10)" rx="2" ry="2" />
<text  x="130.44" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Adaptor&lt;std::linear_congruential_engine&lt;unsigned long, 16807ul, 0ul, 2147483647ul&gt;, double&gt;::_Adaptor (750,000 samples, 0.01%)</title><rect x="1187.1" y="245" width="0.2" height="15.0" fill="rgb(208,51,37)" rx="2" ry="2" />
<text  x="1190.10" y="255.5" ></text>
</g>
<g >
<title>void bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeafRecursive&lt;bwtree::SortedSmallSet&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const*, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (750,000 samples, 0.01%)</title><rect x="78.8" y="101" width="0.1" height="15.0" fill="rgb(238,161,24)" rx="2" ry="2" />
<text  x="81.75" y="111.5" ></text>
</g>
<g >
<title>[unknown] (500,000 samples, 0.01%)</title><rect x="1146.3" y="309" width="0.1" height="15.0" fill="rgb(217,151,8)" rx="2" ry="2" />
<text  x="1149.28" y="319.5" ></text>
</g>
<g >
<title>[unknown] (500,000 samples, 0.01%)</title><rect x="1146.3" y="325" width="0.1" height="15.0" fill="rgb(222,26,31)" rx="2" ry="2" />
<text  x="1149.28" y="335.5" ></text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, common::WorkerPool::AddThread (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="437" width="1093.7" height="15.0" fill="rgb(207,62,48)" rx="2" ry="2" />
<text  x="55.61" y="447.5" >void std::__invoke_impl&lt;void, common::WorkerPool::AddThread</text>
</g>
<g >
<title>void std::advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (500,000 samples, 0.01%)</title><rect x="265.7" y="85" width="0.1" height="15.0" fill="rgb(230,75,35)" rx="2" ry="2" />
<text  x="268.69" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsOnLeafDeltaChain (500,000 samples, 0.01%)</title><rect x="107.2" y="181" width="0.1" height="15.0" fill="rgb(240,19,44)" rx="2" ry="2" />
<text  x="110.16" y="191.5" ></text>
</g>
<g >
<title>test::MultiThreadTestUtil::RunThreadsUntilFinish (5,177,750,000 samples, 92.68%)</title><rect x="52.6" y="341" width="1093.7" height="15.0" fill="rgb(254,212,46)" rx="2" ry="2" />
<text  x="55.61" y="351.5" >test::MultiThreadTestUtil::RunThreadsUntilFinish</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::ElasticNode&lt;std::pair&lt;long, unsigned long&gt; &gt;::End (750,000 samples, 0.01%)</title><rect x="270.1" y="197" width="0.1" height="15.0" fill="rgb(238,155,29)" rx="2" ry="2" />
<text  x="273.07" y="207.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpEqual (2,000,000 samples, 0.04%)</title><rect x="59.7" y="165" width="0.4" height="15.0" fill="rgb(241,159,26)" rx="2" ry="2" />
<text  x="62.69" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::LeaveEpoch (1,250,000 samples, 0.02%)</title><rect x="54.8" y="229" width="0.2" height="15.0" fill="rgb(221,121,54)" rx="2" ry="2" />
<text  x="57.78" y="239.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (500,000 samples, 0.01%)</title><rect x="265.6" y="53" width="0.1" height="15.0" fill="rgb(228,216,31)" rx="2" ry="2" />
<text  x="268.58" y="63.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (28,000,000 samples, 0.50%)</title><rect x="1087.3" y="197" width="5.9" height="15.0" fill="rgb(217,197,34)" rx="2" ry="2" />
<text  x="1090.29" y="207.5" ></text>
</g>
<g >
<title>____wcstod_l_internal (500,000 samples, 0.01%)</title><rect x="1146.9" y="501" width="0.1" height="15.0" fill="rgb(205,39,7)" rx="2" ry="2" />
<text  x="1149.86" y="511.5" ></text>
</g>
<g >
<title>std::operator&amp; (1,500,000 samples, 0.03%)</title><rect x="138.3" y="197" width="0.3" height="15.0" fill="rgb(254,107,11)" rx="2" ry="2" />
<text  x="141.27" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1,250,000 samples, 0.02%)</title><rect x="1160.3" y="261" width="0.3" height="15.0" fill="rgb(252,83,22)" rx="2" ry="2" />
<text  x="1163.32" y="271.5" ></text>
</g>
<g >
<title>void std::__advance&lt;std::pair&lt;long, long&gt; const*, long&gt; (500,000 samples, 0.01%)</title><rect x="265.7" y="69" width="0.1" height="15.0" fill="rgb(211,16,50)" rx="2" ry="2" />
<text  x="268.69" y="79.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::EpochManager::JoinEpoch (500,000 samples, 0.01%)</title><rect x="135.9" y="229" width="0.1" height="15.0" fill="rgb(220,168,47)" rx="2" ry="2" />
<text  x="138.89" y="239.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::GetNextNodeID (500,000 samples, 0.01%)</title><rect x="1150.8" y="245" width="0.1" height="15.0" fill="rgb(218,33,45)" rx="2" ry="2" />
<text  x="1153.82" y="255.5" ></text>
</g>
<g >
<title>long&amp;&amp; std::forward&lt;long&gt; (500,000 samples, 0.01%)</title><rect x="1093.6" y="165" width="0.1" height="15.0" fill="rgb(229,40,19)" rx="2" ry="2" />
<text  x="1096.58" y="175.5" ></text>
</g>
<g >
<title>operator new (1,000,000 samples, 0.02%)</title><rect x="213.8" y="133" width="0.2" height="15.0" fill="rgb(231,148,4)" rx="2" ry="2" />
<text  x="216.78" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (500,000 samples, 0.01%)</title><rect x="57.9" y="181" width="0.1" height="15.0" fill="rgb(239,123,26)" rx="2" ry="2" />
<text  x="60.89" y="191.5" ></text>
</g>
<g >
<title>std::atomic&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode const*&gt;::compare_exchange_strong (10,250,000 samples, 0.18%)</title><rect x="136.5" y="213" width="2.1" height="15.0" fill="rgb(236,0,53)" rx="2" ry="2" />
<text  x="139.47" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::back (750,000 samples, 0.01%)</title><rect x="1161.1" y="277" width="0.2" height="15.0" fill="rgb(227,193,50)" rx="2" ry="2" />
<text  x="1164.12" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;long, long&gt; const* std::lower_bound&lt;std::pair&lt;long, long&gt; const*, std::pair&lt;long, long&gt;, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyValuePairComparator&gt; (3,000,000 samples, 0.05%)</title><rect x="104.9" y="117" width="0.6" height="15.0" fill="rgb(234,95,17)" rx="2" ry="2" />
<text  x="107.89" y="127.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::Allocate (2,250,000 samples, 0.04%)</title><rect x="53.9" y="213" width="0.5" height="15.0" fill="rgb(210,175,40)" rx="2" ry="2" />
<text  x="56.93" y="223.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::GetLatestNodeSnapshot (750,000 samples, 0.01%)</title><rect x="270.4" y="197" width="0.1" height="15.0" fill="rgb(250,10,20)" rx="2" ry="2" />
<text  x="273.39" y="207.5" ></text>
</g>
<g >
<title>test::BwTreeTestUtil::KeyComparator::operator (2,000,000 samples, 0.04%)</title><rect x="270.7" y="165" width="0.4" height="15.0" fill="rgb(234,155,3)" rx="2" ry="2" />
<text  x="273.70" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::CHUNK_SIZE (500,000 samples, 0.01%)</title><rect x="80.8" y="133" width="0.1" height="15.0" fill="rgb(244,132,15)" rx="2" ry="2" />
<text  x="83.81" y="143.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::AllocationMeta::AllocationMeta (500,000 samples, 0.01%)</title><rect x="213.4" y="117" width="0.1" height="15.0" fill="rgb(234,111,41)" rx="2" ry="2" />
<text  x="216.36" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::CollectAllValuesOnLeaf (750,000 samples, 0.01%)</title><rect x="103.4" y="85" width="0.1" height="15.0" fill="rgb(207,197,12)" rx="2" ry="2" />
<text  x="106.36" y="95.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Traverse (348,750,000 samples, 6.24%)</title><rect x="56.3" y="229" width="73.6" height="15.0" fill="rgb(212,77,21)" rx="2" ry="2" />
<text  x="59.26" y="239.5" >bwtree::..</text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::BaseNode::IsDeltaNode (500,000 samples, 0.01%)</title><rect x="206.2" y="197" width="0.1" height="15.0" fill="rgb(242,170,31)" rx="2" ry="2" />
<text  x="209.23" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (7,250,000 samples, 0.13%)</title><rect x="1188.1" y="277" width="1.5" height="15.0" fill="rgb(252,152,39)" rx="2" ry="2" />
<text  x="1191.10" y="287.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const** std::copy_backward&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**, bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::LeafDataNode const**&gt; (3,000,000 samples, 0.05%)</title><rect x="102.7" y="101" width="0.6" height="15.0" fill="rgb(246,112,18)" rx="2" ry="2" />
<text  x="105.67" y="111.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::Traverse (4,762,250,000 samples, 85.25%)</title><rect x="140.3" y="229" width="1005.9" height="15.0" fill="rgb(230,177,15)" rx="2" ry="2" />
<text  x="143.27" y="239.5" >bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;lon..</text>
</g>
<g >
<title>std::pair&lt;long, unsigned long&gt; const* std::__upper_bound&lt;std::pair&lt;long, unsigned long&gt; const*, std::pair&lt;long, unsigned long&gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyNodeIDPairComparator&gt; &gt; (5,750,000 samples, 0.10%)</title><rect x="109.0" y="165" width="1.2" height="15.0" fill="rgb(248,18,39)" rx="2" ry="2" />
<text  x="112.01" y="175.5" ></text>
</g>
<g >
<title>bwtree::BwTree&lt;long, long, test::BwTreeTestUtil::KeyComparator, test::BwTreeTestUtil::KeyEqualityChecker, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::hash&lt;long&gt; &gt;::KeyCmpLess (2,500,000 samples, 0.04%)</title><rect x="270.6" y="181" width="0.5" height="15.0" fill="rgb(225,129,6)" rx="2" ry="2" />
<text  x="273.60" y="191.5" ></text>
</g>
</g>
</svg>
